#include "GLTrace.h"

struct GLTracer
{
	glTracer_glCullFace _glCullFace;
	glTracer_glFrontFace _glFrontFace;
	glTracer_glHint	_glHint;
	glTracer_glLineWidth _glLineWidth;
	glTracer_glPointSize _glPointSize;
	glTracer_glPolygonMode _glPolygonMode;
	glTracer_glScissor _glScissor;
	glTracer_glTexParameterf _glTexParameterf;
	glTracer_glTexParameterfv _glTexParameterfv;
	glTracer_glTexParameteri _glTexParameteri;
	glTracer_glTexParameteriv _glTexParameteriv;
	glTracer_glTexImage1D _glTexImage1D;
	glTracer_glTexImage2D _glTexImage2D;
	glTracer_glDrawBuffer _glDrawBuffer;
	glTracer_glClear _glClear;
	glTracer_glClearColor _glClearColor;
	glTracer_glClearStencil _glClearStencil;
	glTracer_glClearDepth _glClearDepth;
	glTracer_glStencilMask _glStencilMask;
	glTracer_glColorMask _glColorMask;
	glTracer_glDepthMask _glDepthMask;
	glTracer_glDisable _glDisable;
	glTracer_glEnable _glEnable;
	glTracer_glFinish _glFinish;
	glTracer_glFlush _glFlush;
	glTracer_glBlendFunc _glBlendFunc;
	glTracer_glLogicOp _glLogicOp;
	glTracer_glStencilFunc _glStencilFunc;
	glTracer_glStencilOp _glStencilOp;
	glTracer_glDepthFunc _glDepthFunc;
	glTracer_glPixelStoref _glPixelStoref;
	glTracer_glPixelStorei _glPixelStorei;
	glTracer_glReadBuffer _glReadBuffer;
	glTracer_glReadPixels _glReadPixels;
	glTracer_glGetBooleanv _glGetBooleanv;
	glTracer_glGetDoublev _glGetDoublev;
	glTracer_glGetError _glGetError;
	glTracer_glGetFloatv _glGetFloatv;
	glTracer_glGetIntegerv _glGetIntegerv;
	glTracer_glGetString _glGetString;
	glTracer_glGetTexImage _glGetTexImage;
	glTracer_glGetTexParameterfv _glGetTexParameterfv;
	glTracer_glGetTexParameteriv _glGetTexParameteriv;
	glTracer_glGetTexLevelParameterfv _glGetTexLevelParameterfv;
	glTracer_glGetTexLevelParameteriv _glGetTexLevelParameteriv;
	glTracer_glIsEnabled _glIsEnabled;
	glTracer_glDepthRange _glDepthRange;
	glTracer_glViewport _glViewport;
	glTracer_glNewList _glNewList;
	glTracer_glEndList _glEndList;
	glTracer_glCallList _glCallList;
	glTracer_glCallLists _glCallLists;
	glTracer_glDeleteLists _glDeleteLists;
	glTracer_glGenLists _glGenLists;
	glTracer_glListBase _glListBase;
	glTracer_glBegin _glBegin;
	glTracer_glBitmap _glBitmap;
	glTracer_glColor3b _glColor3b;
	glTracer_glColor3bv _glColor3bv;
	glTracer_glColor3d _glColor3d;
	glTracer_glColor3dv _glColor3dv;
	glTracer_glColor3f _glColor3f;
	glTracer_glColor3fv _glColor3fv;
	glTracer_glColor3i _glColor3i;
	glTracer_glColor3iv _glColor3iv;
	glTracer_glColor3s _glColor3s;
	glTracer_glColor3sv _glColor3sv;
	glTracer_glColor3ub _glColor3ub;
	glTracer_glColor3ubv _glColor3ubv;
	glTracer_glColor3ui _glColor3ui;
	glTracer_glColor3uiv _glColor3uiv;
	glTracer_glColor3us _glColor3us;
	glTracer_glColor3usv _glColor3usv;
	glTracer_glColor4b _glColor4b;
	glTracer_glColor4bv _glColor4bv;
	glTracer_glColor4d _glColor4d;
	glTracer_glColor4dv _glColor4dv;
	glTracer_glColor4f _glColor4f;
	glTracer_glColor4fv _glColor4fv;
	glTracer_glColor4i _glColor4i;
	glTracer_glColor4iv _glColor4iv;
	glTracer_glColor4s _glColor4s;
	glTracer_glColor4sv _glColor4sv;
	glTracer_glColor4ub _glColor4ub;
	glTracer_glColor4ubv _glColor4ubv;
	glTracer_glColor4ui _glColor4ui;
	glTracer_glColor4uiv _glColor4uiv;
	glTracer_glColor4us _glColor4us;
	glTracer_glColor4usv _glColor4usv;
	glTracer_glEdgeFlag _glEdgeFlag;
	glTracer_glEdgeFlagv _glEdgeFlagv;
	glTracer_glEnd _glEnd;
	glTracer_glIndexd _glIndexd;
	glTracer_glIndexdv _glIndexdv;
	glTracer_glIndexf _glIndexf;
	glTracer_glIndexfv _glIndexfv;
	glTracer_glIndexi _glIndexi;
	glTracer_glIndexiv _glIndexiv;
	glTracer_glIndexs _glIndexs;
	glTracer_glIndexsv _glIndexsv;
	glTracer_glNormal3b _glNormal3b;
	glTracer_glNormal3bv _glNormal3bv;
	glTracer_glNormal3d _glNormal3d;
	glTracer_glNormal3dv _glNormal3dv;
	glTracer_glNormal3f _glNormal3f;
	glTracer_glNormal3fv _glNormal3fv;
	glTracer_glNormal3i _glNormal3i;
	glTracer_glNormal3iv _glNormal3iv;
	glTracer_glNormal3s _glNormal3s;
	glTracer_glNormal3sv _glNormal3sv;
	glTracer_glRasterPos2d _glRasterPos2d;
	glTracer_glRasterPos2dv _glRasterPos2dv;
	glTracer_glRasterPos2f _glRasterPos2f;
	glTracer_glRasterPos2fv _glRasterPos2fv;
	glTracer_glRasterPos2i _glRasterPos2i;
	glTracer_glRasterPos2iv _glRasterPos2iv;
	glTracer_glRasterPos2s _glRasterPos2s;
	glTracer_glRasterPos2sv _glRasterPos2sv;
	glTracer_glRasterPos3d _glRasterPos3d;
	glTracer_glRasterPos3dv _glRasterPos3dv;
	glTracer_glRasterPos3f _glRasterPos3f;
	glTracer_glRasterPos3fv _glRasterPos3fv;
	glTracer_glRasterPos3i _glRasterPos3i;
	glTracer_glRasterPos3iv _glRasterPos3iv;
	glTracer_glRasterPos3s _glRasterPos3s;
	glTracer_glRasterPos3sv _glRasterPos3sv;
	glTracer_glRasterPos4d _glRasterPos4d;
	glTracer_glRasterPos4dv _glRasterPos4dv;
	glTracer_glRasterPos4f _glRasterPos4f;
	glTracer_glRasterPos4fv _glRasterPos4fv;
	glTracer_glRasterPos4i _glRasterPos4i;
	glTracer_glRasterPos4iv _glRasterPos4iv;
	glTracer_glRasterPos4s _glRasterPos4s;
	glTracer_glRasterPos4sv _glRasterPos4sv;
	glTracer_glRectd _glRectd;
	glTracer_glRectdv _glRectdv;
	glTracer_glRectf _glRectf;
	glTracer_glRectfv _glRectfv;
	glTracer_glRecti _glRecti;
	glTracer_glRectiv _glRectiv;
	glTracer_glRects _glRects;
	glTracer_glRectsv _glRectsv;
	glTracer_glTexCoord1d _glTexCoord1d;
	glTracer_glTexCoord1dv _glTexCoord1dv;
	glTracer_glTexCoord1f _glTexCoord1f;
	glTracer_glTexCoord1fv _glTexCoord1fv;
	glTracer_glTexCoord1i _glTexCoord1i;
	glTracer_glTexCoord1iv _glTexCoord1iv;
	glTracer_glTexCoord1s _glTexCoord1s;
	glTracer_glTexCoord1sv _glTexCoord1sv;
	glTracer_glTexCoord2d _glTexCoord2d;
	glTracer_glTexCoord2dv _glTexCoord2dv;
	glTracer_glTexCoord2f _glTexCoord2f;
	glTracer_glTexCoord2fv _glTexCoord2fv;
	glTracer_glTexCoord2i _glTexCoord2i;
	glTracer_glTexCoord2iv _glTexCoord2iv;
	glTracer_glTexCoord2s _glTexCoord2s;
	glTracer_glTexCoord2sv _glTexCoord2sv;
	glTracer_glTexCoord3d _glTexCoord3d;
	glTracer_glTexCoord3dv _glTexCoord3dv;
	glTracer_glTexCoord3f _glTexCoord3f;
	glTracer_glTexCoord3fv _glTexCoord3fv;
	glTracer_glTexCoord3i _glTexCoord3i;
	glTracer_glTexCoord3iv _glTexCoord3iv;
	glTracer_glTexCoord3s _glTexCoord3s;
	glTracer_glTexCoord3sv _glTexCoord3sv;
	glTracer_glTexCoord4d _glTexCoord4d;
	glTracer_glTexCoord4dv _glTexCoord4dv;
	glTracer_glTexCoord4f _glTexCoord4f;
	glTracer_glTexCoord4fv _glTexCoord4fv;
	glTracer_glTexCoord4i _glTexCoord4i;
	glTracer_glTexCoord4iv _glTexCoord4iv;
	glTracer_glTexCoord4s _glTexCoord4s;
	glTracer_glTexCoord4sv _glTexCoord4sv;
	glTracer_glVertex2d _glVertex2d;
	glTracer_glVertex2dv _glVertex2dv;
	glTracer_glVertex2f _glVertex2f;
	glTracer_glVertex2fv _glVertex2fv;
	glTracer_glVertex2i _glVertex2i;
	glTracer_glVertex2iv _glVertex2iv;
	glTracer_glVertex2s _glVertex2s;
	glTracer_glVertex2sv _glVertex2sv;
	glTracer_glVertex3d _glVertex3d;
	glTracer_glVertex3dv _glVertex3dv;
	glTracer_glVertex3f _glVertex3f;
	glTracer_glVertex3fv _glVertex3fv;
	glTracer_glVertex3i _glVertex3i;
	glTracer_glVertex3iv _glVertex3iv;
	glTracer_glVertex3s _glVertex3s;
	glTracer_glVertex3sv _glVertex3sv;
	glTracer_glVertex4d _glVertex4d;
	glTracer_glVertex4dv _glVertex4dv;
	glTracer_glVertex4f _glVertex4f;
	glTracer_glVertex4fv _glVertex4fv;
	glTracer_glVertex4i _glVertex4i;
	glTracer_glVertex4iv _glVertex4iv;
	glTracer_glVertex4s _glVertex4s;
	glTracer_glVertex4sv _glVertex4sv;
	glTracer_glClipPlane _glClipPlane;
	glTracer_glColorMaterial _glColorMaterial;
	glTracer_glFogf _glFogf;
	glTracer_glFogfv _glFogfv;
	glTracer_glFogi _glFogi;
	glTracer_glFogiv _glFogiv;
	glTracer_glLightf _glLightf;
	glTracer_glLightfv _glLightfv;
	glTracer_glLighti _glLighti;
	glTracer_glLightiv _glLightiv;
	glTracer_glLightModelf _glLightModelf;
	glTracer_glLightModelfv _glLightModelfv;
	glTracer_glLightModeli _glLightModeli;
	glTracer_glLightModeliv _glLightModeliv;
	glTracer_glLineStipple _glLineStipple;
	glTracer_glMaterialf _glMaterialf;
	glTracer_glMaterialfv _glMaterialfv;
	glTracer_glMateriali _glMateriali;
	glTracer_glMaterialiv _glMaterialiv;
	glTracer_glPolygonStipple _glPolygonStipple;
	glTracer_glShadeModel _glShadeModel;
	glTracer_glTexEnvf _glTexEnvf;
	glTracer_glTexEnvfv _glTexEnvfv;
	glTracer_glTexEnvi _glTexEnvi;
	glTracer_glTexEnviv _glTexEnviv;
	glTracer_glTexGend _glTexGend;
	glTracer_glTexGendv _glTexGendv;
	glTracer_glTexGenf _glTexGenf;
	glTracer_glTexGenfv _glTexGenfv;
	glTracer_glTexGeni _glTexGeni;
	glTracer_glTexGeniv _glTexGeniv;
	glTracer_glFeedbackBuffer _glFeedbackBuffer;
	glTracer_glSelectBuffer _glSelectBuffer;
	glTracer_glRenderMode _glRenderMode;
	glTracer_glInitNames _glInitNames;
	glTracer_glLoadName _glLoadName;
	glTracer_glPassThrough _glPassThrough;
	glTracer_glPopName _glPopName;
	glTracer_glPushName _glPushName;
	glTracer_glClearAccum _glClearAccum;
	glTracer_glClearIndex _glClearIndex;
	glTracer_glIndexMask _glIndexMask;
	glTracer_glAccum _glAccum;
	glTracer_glPopAttrib _glPopAttrib;
	glTracer_glPushAttrib _glPushAttrib;
	glTracer_glMap1d _glMap1d;
	glTracer_glMap1f _glMap1f;
	glTracer_glMap2d _glMap2d;
	glTracer_glMap2f _glMap2f;
	glTracer_glMapGrid1d _glMapGrid1d;
	glTracer_glMapGrid1f _glMapGrid1f;
	glTracer_glMapGrid2d _glMapGrid2d;
	glTracer_glMapGrid2f _glMapGrid2f;
	glTracer_glEvalCoord1d _glEvalCoord1d;
	glTracer_glEvalCoord1dv _glEvalCoord1dv;
	glTracer_glEvalCoord1f _glEvalCoord1f;
	glTracer_glEvalCoord1fv _glEvalCoord1fv;
	glTracer_glEvalCoord2d _glEvalCoord2d;
	glTracer_glEvalCoord2dv _glEvalCoord2dv;
	glTracer_glEvalCoord2f _glEvalCoord2f;
	glTracer_glEvalCoord2fv _glEvalCoord2fv;
	glTracer_glEvalMesh1 _glEvalMesh1;
	glTracer_glEvalPoint1 _glEvalPoint1;
	glTracer_glEvalMesh2 _glEvalMesh2;
	glTracer_glEvalPoint2 _glEvalPoint2;
	glTracer_glAlphaFunc _glAlphaFunc;
	glTracer_glPixelZoom _glPixelZoom;
	glTracer_glPixelTransferf _glPixelTransferf;
	glTracer_glPixelTransferi _glPixelTransferi;
	glTracer_glPixelMapfv _glPixelMapfv;
	glTracer_glPixelMapuiv _glPixelMapuiv;
	glTracer_glPixelMapusv _glPixelMapusv;
	glTracer_glCopyPixels _glCopyPixels;
	glTracer_glDrawPixels _glDrawPixels;
	glTracer_glGetClipPlane _glGetClipPlane;
	glTracer_glGetLightfv _glGetLightfv;
	glTracer_glGetLightiv _glGetLightiv;
	glTracer_glGetMapdv _glGetMapdv;
	glTracer_glGetMapfv _glGetMapfv;
	glTracer_glGetMapiv _glGetMapiv;
	glTracer_glGetMaterialfv _glGetMaterialfv;
	glTracer_glGetMaterialiv _glGetMaterialiv;
	glTracer_glGetPixelMapfv _glGetPixelMapfv;
	glTracer_glGetPixelMapuiv _glGetPixelMapuiv;
	glTracer_glGetPixelMapusv _glGetPixelMapusv;
	glTracer_glGetPolygonStipple _glGetPolygonStipple;
	glTracer_glGetTexEnvfv _glGetTexEnvfv;
	glTracer_glGetTexEnviv _glGetTexEnviv;
	glTracer_glGetTexGendv _glGetTexGendv;
	glTracer_glGetTexGenfv _glGetTexGenfv;
	glTracer_glGetTexGeniv _glGetTexGeniv;
	glTracer_glIsList _glIsList;
	glTracer_glFrustum _glFrustum;
	glTracer_glLoadIdentity _glLoadIdentity;
	glTracer_glLoadMatrixf _glLoadMatrixf;
	glTracer_glLoadMatrixd _glLoadMatrixd;
	glTracer_glMatrixMode _glMatrixMode;
	glTracer_glMultMatrixf _glMultMatrixf;
	glTracer_glMultMatrixd _glMultMatrixd;
	glTracer_glOrtho _glOrtho;
	glTracer_glPopMatrix _glPopMatrix;
	glTracer_glPushMatrix _glPushMatrix;
	glTracer_glRotated _glRotated;
	glTracer_glRotatef _glRotatef;
	glTracer_glScaled _glScaled;
	glTracer_glScalef _glScalef;
	glTracer_glTranslated _glTranslated;
	glTracer_glTranslatef _glTranslatef;
	glTracer_glDrawArrays _glDrawArrays;
	glTracer_glDrawElements _glDrawElements;
	glTracer_glGetPointerv _glGetPointerv;
	glTracer_glPolygonOffset _glPolygonOffset;
	glTracer_glCopyTexImage1D _glCopyTexImage1D;
	glTracer_glCopyTexImage2D _glCopyTexImage2D;
	glTracer_glCopyTexSubImage1D _glCopyTexSubImage1D;
	glTracer_glCopyTexSubImage2D _glCopyTexSubImage2D;
	glTracer_glTexSubImage1D _glTexSubImage1D;
	glTracer_glTexSubImage2D _glTexSubImage2D;
	glTracer_glBindTexture _glBindTexture;
	glTracer_glDeleteTextures _glDeleteTextures;
	glTracer_glGenTextures _glGenTextures;
	glTracer_glIsTexture _glIsTexture;
	glTracer_glArrayElement _glArrayElement;
	glTracer_glColorPointer _glColorPointer;
	glTracer_glDisableClientState _glDisableClientState;
	glTracer_glEdgeFlagPointer _glEdgeFlagPointer;
	glTracer_glEnableClientState _glEnableClientState;
	glTracer_glIndexPointer _glIndexPointer;
	glTracer_glInterleavedArrays _glInterleavedArrays;
	glTracer_glNormalPointer _glNormalPointer;
	glTracer_glTexCoordPointer _glTexCoordPointer;
	glTracer_glVertexPointer _glVertexPointer;
	glTracer_glAreTexturesResident _glAreTexturesResident;
	glTracer_glPrioritizeTextures _glPrioritizeTextures;
	glTracer_glIndexub _glIndexub;
	glTracer_glIndexubv _glIndexubv;
	glTracer_glPopClientAttrib _glPopClientAttrib;
	glTracer_glPushClientAttrib _glPushClientAttrib;
	glTracer_glDrawRangeElements _glDrawRangeElements;
	glTracer_glTexImage3D _glTexImage3D;
	glTracer_glTexSubImage3D _glTexSubImage3D;
	glTracer_glCopyTexSubImage3D _glCopyTexSubImage3D;
	glTracer_glActiveTexture _glActiveTexture;
	glTracer_glSampleCoverage _glSampleCoverage;
	glTracer_glCompressedTexImage3D _glCompressedTexImage3D;
	glTracer_glCompressedTexImage2D _glCompressedTexImage2D;
	glTracer_glCompressedTexImage1D _glCompressedTexImage1D;
	glTracer_glCompressedTexSubImage3D _glCompressedTexSubImage3D;
	glTracer_glCompressedTexSubImage2D _glCompressedTexSubImage2D;
	glTracer_glCompressedTexSubImage1D _glCompressedTexSubImage1D;
	glTracer_glGetCompressedTexImage _glGetCompressedTexImage;
	glTracer_glClientActiveTexture _glClientActiveTexture;
	glTracer_glMultiTexCoord1d _glMultiTexCoord1d;
	glTracer_glMultiTexCoord1dv _glMultiTexCoord1dv;
	glTracer_glMultiTexCoord1f _glMultiTexCoord1f;
	glTracer_glMultiTexCoord1fv _glMultiTexCoord1fv;
	glTracer_glMultiTexCoord1i _glMultiTexCoord1i;
	glTracer_glMultiTexCoord1iv _glMultiTexCoord1iv;
	glTracer_glMultiTexCoord1s _glMultiTexCoord1s;
	glTracer_glMultiTexCoord1sv _glMultiTexCoord1sv;
	glTracer_glMultiTexCoord2d _glMultiTexCoord2d;
	glTracer_glMultiTexCoord2dv _glMultiTexCoord2dv;
	glTracer_glMultiTexCoord2f _glMultiTexCoord2f;
	glTracer_glMultiTexCoord2fv _glMultiTexCoord2fv;
	glTracer_glMultiTexCoord2i _glMultiTexCoord2i;
	glTracer_glMultiTexCoord2iv _glMultiTexCoord2iv;
	glTracer_glMultiTexCoord2s _glMultiTexCoord2s;
	glTracer_glMultiTexCoord2sv _glMultiTexCoord2sv;
	glTracer_glMultiTexCoord3d _glMultiTexCoord3d;
	glTracer_glMultiTexCoord3dv _glMultiTexCoord3dv;
	glTracer_glMultiTexCoord3f _glMultiTexCoord3f;
	glTracer_glMultiTexCoord3fv _glMultiTexCoord3fv;
	glTracer_glMultiTexCoord3i _glMultiTexCoord3i;
	glTracer_glMultiTexCoord3iv _glMultiTexCoord3iv;
	glTracer_glMultiTexCoord3s _glMultiTexCoord3s;
	glTracer_glMultiTexCoord3sv _glMultiTexCoord3sv;
	glTracer_glMultiTexCoord4d _glMultiTexCoord4d;
	glTracer_glMultiTexCoord4dv _glMultiTexCoord4dv;
	glTracer_glMultiTexCoord4f _glMultiTexCoord4f;
	glTracer_glMultiTexCoord4fv _glMultiTexCoord4fv;
	glTracer_glMultiTexCoord4i _glMultiTexCoord4i;
	glTracer_glMultiTexCoord4iv _glMultiTexCoord4iv;
	glTracer_glMultiTexCoord4s _glMultiTexCoord4s;
	glTracer_glMultiTexCoord4sv _glMultiTexCoord4sv;
	glTracer_glLoadTransposeMatrixf _glLoadTransposeMatrixf;
	glTracer_glLoadTransposeMatrixd _glLoadTransposeMatrixd;
	glTracer_glMultTransposeMatrixf _glMultTransposeMatrixf;
	glTracer_glMultTransposeMatrixd _glMultTransposeMatrixd;
	glTracer_glBlendFuncSeparate _glBlendFuncSeparate;
	glTracer_glMultiDrawArrays _glMultiDrawArrays;
	glTracer_glMultiDrawElements _glMultiDrawElements;
	glTracer_glPointParameterf _glPointParameterf;
	glTracer_glPointParameterfv _glPointParameterfv;
	glTracer_glPointParameteri _glPointParameteri;
	glTracer_glPointParameteriv _glPointParameteriv;
	glTracer_glFogCoordf _glFogCoordf;
	glTracer_glFogCoordfv _glFogCoordfv;
	glTracer_glFogCoordd _glFogCoordd;
	glTracer_glFogCoorddv _glFogCoorddv;
	glTracer_glFogCoordPointer _glFogCoordPointer;
	glTracer_glSecondaryColor3b _glSecondaryColor3b;
	glTracer_glSecondaryColor3bv _glSecondaryColor3bv;
	glTracer_glSecondaryColor3d _glSecondaryColor3d;
	glTracer_glSecondaryColor3dv _glSecondaryColor3dv;
	glTracer_glSecondaryColor3f _glSecondaryColor3f;
	glTracer_glSecondaryColor3fv _glSecondaryColor3fv;
	glTracer_glSecondaryColor3i _glSecondaryColor3i;
	glTracer_glSecondaryColor3iv _glSecondaryColor3iv;
	glTracer_glSecondaryColor3s _glSecondaryColor3s;
	glTracer_glSecondaryColor3sv _glSecondaryColor3sv;
	glTracer_glSecondaryColor3ub _glSecondaryColor3ub;
	glTracer_glSecondaryColor3ubv _glSecondaryColor3ubv;
	glTracer_glSecondaryColor3ui _glSecondaryColor3ui;
	glTracer_glSecondaryColor3uiv _glSecondaryColor3uiv;
	glTracer_glSecondaryColor3us _glSecondaryColor3us;
	glTracer_glSecondaryColor3usv _glSecondaryColor3usv;
	glTracer_glSecondaryColorPointer _glSecondaryColorPointer;
	glTracer_glWindowPos2d _glWindowPos2d;
	glTracer_glWindowPos2dv _glWindowPos2dv;
	glTracer_glWindowPos2f _glWindowPos2f;
	glTracer_glWindowPos2fv _glWindowPos2fv;
	glTracer_glWindowPos2i _glWindowPos2i;
	glTracer_glWindowPos2iv _glWindowPos2iv;
	glTracer_glWindowPos2s _glWindowPos2s;
	glTracer_glWindowPos2sv _glWindowPos2sv;
	glTracer_glWindowPos3d _glWindowPos3d;
	glTracer_glWindowPos3dv _glWindowPos3dv;
	glTracer_glWindowPos3f _glWindowPos3f;
	glTracer_glWindowPos3fv _glWindowPos3fv;
	glTracer_glWindowPos3i _glWindowPos3i;
	glTracer_glWindowPos3iv _glWindowPos3iv;
	glTracer_glWindowPos3s _glWindowPos3s;
	glTracer_glWindowPos3sv _glWindowPos3sv;
	glTracer_glBlendColor _glBlendColor;
	glTracer_glBlendEquation _glBlendEquation;
	glTracer_glGenQueries _glGenQueries;
	glTracer_glDeleteQueries _glDeleteQueries;
	glTracer_glIsQuery _glIsQuery;
	glTracer_glBeginQuery _glBeginQuery;
	glTracer_glEndQuery _glEndQuery;
	glTracer_glGetQueryiv _glGetQueryiv;
	glTracer_glGetQueryObjectiv _glGetQueryObjectiv;
	glTracer_glGetQueryObjectuiv _glGetQueryObjectuiv;
	glTracer_glBindBuffer _glBindBuffer;
	glTracer_glDeleteBuffers _glDeleteBuffers;
	glTracer_glGenBuffers _glGenBuffers;
	glTracer_glIsBuffer _glIsBuffer;
	glTracer_glBufferData _glBufferData;
	glTracer_glBufferSubData _glBufferSubData;
	glTracer_glGetBufferSubData _glGetBufferSubData;
	glTracer_glMapBuffer _glMapBuffer;
	glTracer_glUnmapBuffer _glUnmapBuffer;
	glTracer_glGetBufferParameteriv _glGetBufferParameteriv;
	glTracer_glGetBufferPointerv _glGetBufferPointerv;
	glTracer_glBlendEquationSeparate _glBlendEquationSeparate;
	glTracer_glDrawBuffers _glDrawBuffers;
	glTracer_glStencilOpSeparate _glStencilOpSeparate;
	glTracer_glStencilFuncSeparate _glStencilFuncSeparate;
	glTracer_glStencilMaskSeparate _glStencilMaskSeparate;
	glTracer_glAttachShader _glAttachShader;
	glTracer_glBindAttribLocation _glBindAttribLocation;
	glTracer_glCompileShader _glCompileShader;
	glTracer_glCreateProgram _glCreateProgram;
	glTracer_glCreateShader _glCreateShader;
	glTracer_glDeleteProgram _glDeleteProgram;
	glTracer_glDeleteShader _glDeleteShader;
	glTracer_glDetachShader _glDetachShader;
	glTracer_glDisableVertexAttribArray _glDisableVertexAttribArray;
	glTracer_glEnableVertexAttribArray _glEnableVertexAttribArray;
	glTracer_glGetActiveAttrib _glGetActiveAttrib;
	glTracer_glGetActiveUniform _glGetActiveUniform;
	glTracer_glGetAttachedShaders _glGetAttachedShaders;
	glTracer_glGetAttribLocation _glGetAttribLocation;
	glTracer_glGetProgramiv _glGetProgramiv;
	glTracer_glGetProgramInfoLog _glGetProgramInfoLog;
	glTracer_glGetShaderiv _glGetShaderiv;
	glTracer_glGetShaderInfoLog _glGetShaderInfoLog;
	glTracer_glGetShaderSource _glGetShaderSource;
	glTracer_glGetUniformLocation _glGetUniformLocation;
	glTracer_glGetUniformfv _glGetUniformfv;
	glTracer_glGetUniformiv _glGetUniformiv;
	glTracer_glGetVertexAttribdv _glGetVertexAttribdv;
	glTracer_glGetVertexAttribfv _glGetVertexAttribfv;
	glTracer_glGetVertexAttribiv _glGetVertexAttribiv;
	glTracer_glGetVertexAttribPointerv _glGetVertexAttribPointerv;
	glTracer_glIsProgram _glIsProgram;
	glTracer_glIsShader _glIsShader;
	glTracer_glLinkProgram _glLinkProgram;
	glTracer_glShaderSource _glShaderSource;
	glTracer_glUseProgram _glUseProgram;
	glTracer_glUniform1f _glUniform1f;
	glTracer_glUniform2f _glUniform2f;
	glTracer_glUniform3f _glUniform3f;
	glTracer_glUniform4f _glUniform4f;
	glTracer_glUniform1i _glUniform1i;
	glTracer_glUniform2i _glUniform2i;
	glTracer_glUniform3i _glUniform3i;
	glTracer_glUniform4i _glUniform4i;
	glTracer_glUniform1fv _glUniform1fv;
	glTracer_glUniform2fv _glUniform2fv;
	glTracer_glUniform3fv _glUniform3fv;
	glTracer_glUniform4fv _glUniform4fv;
	glTracer_glUniform1iv _glUniform1iv;
	glTracer_glUniform2iv _glUniform2iv;
	glTracer_glUniform3iv _glUniform3iv;
	glTracer_glUniform4iv _glUniform4iv;
	glTracer_glUniformMatrix2fv _glUniformMatrix2fv;
	glTracer_glUniformMatrix3fv _glUniformMatrix3fv;
	glTracer_glUniformMatrix4fv _glUniformMatrix4fv;
	glTracer_glValidateProgram _glValidateProgram;
	glTracer_glVertexAttrib1d _glVertexAttrib1d;
	glTracer_glVertexAttrib1dv _glVertexAttrib1dv;
	glTracer_glVertexAttrib1f _glVertexAttrib1f;
	glTracer_glVertexAttrib1fv _glVertexAttrib1fv;
	glTracer_glVertexAttrib1s _glVertexAttrib1s;
	glTracer_glVertexAttrib1sv _glVertexAttrib1sv;
	glTracer_glVertexAttrib2d _glVertexAttrib2d;
	glTracer_glVertexAttrib2dv _glVertexAttrib2dv;
	glTracer_glVertexAttrib2f _glVertexAttrib2f;
	glTracer_glVertexAttrib2fv _glVertexAttrib2fv;
	glTracer_glVertexAttrib2s _glVertexAttrib2s;
	glTracer_glVertexAttrib2sv _glVertexAttrib2sv;
	glTracer_glVertexAttrib3d _glVertexAttrib3d;
	glTracer_glVertexAttrib3dv _glVertexAttrib3dv;
	glTracer_glVertexAttrib3f _glVertexAttrib3f;
	glTracer_glVertexAttrib3fv _glVertexAttrib3fv;
	glTracer_glVertexAttrib3s _glVertexAttrib3s;
	glTracer_glVertexAttrib3sv _glVertexAttrib3sv;
	glTracer_glVertexAttrib4Nbv _glVertexAttrib4Nbv;
	glTracer_glVertexAttrib4Niv _glVertexAttrib4Niv;
	glTracer_glVertexAttrib4Nsv _glVertexAttrib4Nsv;
	glTracer_glVertexAttrib4Nub _glVertexAttrib4Nub;
	glTracer_glVertexAttrib4Nubv _glVertexAttrib4Nubv;
	glTracer_glVertexAttrib4Nuiv _glVertexAttrib4Nuiv;
	glTracer_glVertexAttrib4Nusv _glVertexAttrib4Nusv;
	glTracer_glVertexAttrib4bv _glVertexAttrib4bv;
	glTracer_glVertexAttrib4d _glVertexAttrib4d;
	glTracer_glVertexAttrib4dv _glVertexAttrib4dv;
	glTracer_glVertexAttrib4f _glVertexAttrib4f;
	glTracer_glVertexAttrib4fv _glVertexAttrib4fv;
	glTracer_glVertexAttrib4iv _glVertexAttrib4iv;
	glTracer_glVertexAttrib4s _glVertexAttrib4s;
	glTracer_glVertexAttrib4sv _glVertexAttrib4sv;
	glTracer_glVertexAttrib4ubv _glVertexAttrib4ubv;
	glTracer_glVertexAttrib4uiv _glVertexAttrib4uiv;
	glTracer_glVertexAttrib4usv _glVertexAttrib4usv;
	glTracer_glVertexAttribPointer _glVertexAttribPointer;
	glTracer_glUniformMatrix2x3fv _glUniformMatrix2x3fv;
	glTracer_glUniformMatrix3x2fv _glUniformMatrix3x2fv;
	glTracer_glUniformMatrix2x4fv _glUniformMatrix2x4fv;
	glTracer_glUniformMatrix4x2fv _glUniformMatrix4x2fv;
	glTracer_glUniformMatrix3x4fv _glUniformMatrix3x4fv;
	glTracer_glUniformMatrix4x3fv _glUniformMatrix4x3fv;
	glTracer_glColorMaski _glColorMaski;
	glTracer_glGetBooleani_v _glGetBooleani_v;
	glTracer_glGetIntegeri_v _glGetIntegeri_v;
	glTracer_glEnablei _glEnablei;
	glTracer_glDisablei _glDisablei;
	glTracer_glIsEnabledi _glIsEnabledi;
	glTracer_glBeginTransformFeedback _glBeginTransformFeedback;
	glTracer_glEndTransformFeedback _glEndTransformFeedback;
	glTracer_glBindBufferRange _glBindBufferRange;
	glTracer_glBindBufferBase _glBindBufferBase;
	glTracer_glTransformFeedbackVaryings _glTransformFeedbackVaryings;
	glTracer_glGetTransformFeedbackVarying _glGetTransformFeedbackVarying;
	glTracer_glClampColor _glClampColor;
	glTracer_glBeginConditionalRender _glBeginConditionalRender;
	glTracer_glEndConditionalRender _glEndConditionalRender;
	glTracer_glVertexAttribIPointer _glVertexAttribIPointer;
	glTracer_glGetVertexAttribIiv _glGetVertexAttribIiv;
	glTracer_glGetVertexAttribIuiv _glGetVertexAttribIuiv;
	glTracer_glVertexAttribI1i _glVertexAttribI1i;
	glTracer_glVertexAttribI2i _glVertexAttribI2i;
	glTracer_glVertexAttribI3i _glVertexAttribI3i;
	glTracer_glVertexAttribI4i _glVertexAttribI4i;
	glTracer_glVertexAttribI1ui _glVertexAttribI1ui;
	glTracer_glVertexAttribI2ui _glVertexAttribI2ui;
	glTracer_glVertexAttribI3ui _glVertexAttribI3ui;
	glTracer_glVertexAttribI4ui _glVertexAttribI4ui;
	glTracer_glVertexAttribI1iv _glVertexAttribI1iv;
	glTracer_glVertexAttribI2iv _glVertexAttribI2iv;
	glTracer_glVertexAttribI3iv _glVertexAttribI3iv;
	glTracer_glVertexAttribI4iv _glVertexAttribI4iv;
	glTracer_glVertexAttribI1uiv _glVertexAttribI1uiv;
	glTracer_glVertexAttribI2uiv _glVertexAttribI2uiv;
	glTracer_glVertexAttribI3uiv _glVertexAttribI3uiv;
	glTracer_glVertexAttribI4uiv _glVertexAttribI4uiv;
	glTracer_glVertexAttribI4bv _glVertexAttribI4bv;
	glTracer_glVertexAttribI4sv _glVertexAttribI4sv;
	glTracer_glVertexAttribI4ubv _glVertexAttribI4ubv;
	glTracer_glVertexAttribI4usv _glVertexAttribI4usv;
	glTracer_glGetUniformuiv _glGetUniformuiv;
	glTracer_glBindFragDataLocation _glBindFragDataLocation;
	glTracer_glGetFragDataLocation _glGetFragDataLocation;
	glTracer_glUniform1ui _glUniform1ui;
	glTracer_glUniform2ui _glUniform2ui;
	glTracer_glUniform3ui _glUniform3ui;
	glTracer_glUniform4ui _glUniform4ui;
	glTracer_glUniform1uiv _glUniform1uiv;
	glTracer_glUniform2uiv _glUniform2uiv;
	glTracer_glUniform3uiv _glUniform3uiv;
	glTracer_glUniform4uiv _glUniform4uiv;
	glTracer_glTexParameterIiv _glTexParameterIiv;
	glTracer_glTexParameterIuiv _glTexParameterIuiv;
	glTracer_glGetTexParameterIiv _glGetTexParameterIiv;
	glTracer_glGetTexParameterIuiv _glGetTexParameterIuiv;
	glTracer_glClearBufferiv _glClearBufferiv;
	glTracer_glClearBufferuiv _glClearBufferuiv;
	glTracer_glClearBufferfv _glClearBufferfv;
	glTracer_glClearBufferfi _glClearBufferfi;
	glTracer_glGetStringi _glGetStringi;
	glTracer_glIsRenderbuffer _glIsRenderbuffer;
	glTracer_glBindRenderbuffer _glBindRenderbuffer;
	glTracer_glDeleteRenderbuffers _glDeleteRenderbuffers;
	glTracer_glGenRenderbuffers _glGenRenderbuffers;
	glTracer_glRenderbufferStorage _glRenderbufferStorage;
	glTracer_glGetRenderbufferParameteriv _glGetRenderbufferParameteriv;
	glTracer_glIsFramebuffer _glIsFramebuffer;
	glTracer_glBindFramebuffer _glBindFramebuffer;
	glTracer_glDeleteFramebuffers _glDeleteFramebuffers;
	glTracer_glGenFramebuffers _glGenFramebuffers;
	glTracer_glCheckFramebufferStatus _glCheckFramebufferStatus;
	glTracer_glFramebufferTexture1D _glFramebufferTexture1D;
	glTracer_glFramebufferTexture2D _glFramebufferTexture2D;
	glTracer_glFramebufferTexture3D _glFramebufferTexture3D;
	glTracer_glFramebufferRenderbuffer _glFramebufferRenderbuffer;
	glTracer_glGetFramebufferAttachmentParameteriv _glGetFramebufferAttachmentParameteriv;
	glTracer_glGenerateMipmap _glGenerateMipmap;
	glTracer_glBlitFramebuffer _glBlitFramebuffer;
	glTracer_glRenderbufferStorageMultisample _glRenderbufferStorageMultisample;
	glTracer_glFramebufferTextureLayer _glFramebufferTextureLayer;
	glTracer_glMapBufferRange _glMapBufferRange;
	glTracer_glFlushMappedBufferRange _glFlushMappedBufferRange;
	glTracer_glBindVertexArray _glBindVertexArray;
	glTracer_glDeleteVertexArrays _glDeleteVertexArrays;
	glTracer_glGenVertexArrays _glGenVertexArrays;
	glTracer_glIsVertexArray _glIsVertexArray;
	glTracer_glDrawArraysInstanced _glDrawArraysInstanced;
	glTracer_glDrawElementsInstanced _glDrawElementsInstanced;
	glTracer_glTexBuffer _glTexBuffer;
	glTracer_glPrimitiveRestartIndex _glPrimitiveRestartIndex;
	glTracer_glCopyBufferSubData _glCopyBufferSubData;
	glTracer_glGetUniformIndices _glGetUniformIndices;
	glTracer_glGetActiveUniformsiv _glGetActiveUniformsiv;
	glTracer_glGetActiveUniformName _glGetActiveUniformName;
	glTracer_glGetUniformBlockIndex _glGetUniformBlockIndex;
	glTracer_glGetActiveUniformBlockiv _glGetActiveUniformBlockiv;
	glTracer_glGetActiveUniformBlockName _glGetActiveUniformBlockName;
	glTracer_glUniformBlockBinding _glUniformBlockBinding;
	glTracer_glDrawElementsBaseVertex _glDrawElementsBaseVertex;
	glTracer_glDrawRangeElementsBaseVertex _glDrawRangeElementsBaseVertex;
	glTracer_glDrawElementsInstancedBaseVertex _glDrawElementsInstancedBaseVertex;
	glTracer_glMultiDrawElementsBaseVertex _glMultiDrawElementsBaseVertex;
	glTracer_glProvokingVertex _glProvokingVertex;
	glTracer_glFenceSync _glFenceSync;
	glTracer_glIsSync _glIsSync;
	glTracer_glDeleteSync _glDeleteSync;
	glTracer_glClientWaitSync _glClientWaitSync;
	glTracer_glWaitSync _glWaitSync;
	glTracer_glGetInteger64v _glGetInteger64v;
	glTracer_glGetSynciv _glGetSynciv;
	glTracer_glGetInteger64i_v _glGetInteger64i_v;
	glTracer_glGetBufferParameteri64v _glGetBufferParameteri64v;
	glTracer_glFramebufferTexture _glFramebufferTexture;
	glTracer_glTexImage2DMultisample _glTexImage2DMultisample;
	glTracer_glTexImage3DMultisample _glTexImage3DMultisample;
	glTracer_glGetMultisamplefv _glGetMultisamplefv;
	glTracer_glSampleMaski _glSampleMaski;
	glTracer_glBindFragDataLocationIndexed _glBindFragDataLocationIndexed;
	glTracer_glGetFragDataIndex _glGetFragDataIndex;
	glTracer_glGenSamplers _glGenSamplers;
	glTracer_glDeleteSamplers _glDeleteSamplers;
	glTracer_glIsSampler _glIsSampler;
	glTracer_glBindSampler _glBindSampler;
	glTracer_glSamplerParameteri _glSamplerParameteri;
	glTracer_glSamplerParameteriv _glSamplerParameteriv;
	glTracer_glSamplerParameterf _glSamplerParameterf;
	glTracer_glSamplerParameterfv _glSamplerParameterfv;
	glTracer_glSamplerParameterIiv _glSamplerParameterIiv;
	glTracer_glSamplerParameterIuiv _glSamplerParameterIuiv;
	glTracer_glGetSamplerParameteriv _glGetSamplerParameteriv;
	glTracer_glGetSamplerParameterIiv _glGetSamplerParameterIiv;
	glTracer_glGetSamplerParameterfv _glGetSamplerParameterfv;
	glTracer_glGetSamplerParameterIuiv _glGetSamplerParameterIuiv;
	glTracer_glQueryCounter _glQueryCounter;
	glTracer_glGetQueryObjecti64v _glGetQueryObjecti64v;
	glTracer_glGetQueryObjectui64v _glGetQueryObjectui64v;
	glTracer_glVertexAttribDivisor _glVertexAttribDivisor;
	glTracer_glVertexAttribP1ui _glVertexAttribP1ui;
	glTracer_glVertexAttribP1uiv _glVertexAttribP1uiv;
	glTracer_glVertexAttribP2ui _glVertexAttribP2ui;
	glTracer_glVertexAttribP2uiv _glVertexAttribP2uiv;
	glTracer_glVertexAttribP3ui _glVertexAttribP3ui;
	glTracer_glVertexAttribP3uiv _glVertexAttribP3uiv;
	glTracer_glVertexAttribP4ui _glVertexAttribP4ui;
	glTracer_glVertexAttribP4uiv _glVertexAttribP4uiv;
	glTracer_glVertexP2ui _glVertexP2ui;
	glTracer_glVertexP2uiv _glVertexP2uiv;
	glTracer_glVertexP3ui _glVertexP3ui;
	glTracer_glVertexP3uiv _glVertexP3uiv;
	glTracer_glVertexP4ui _glVertexP4ui;
	glTracer_glVertexP4uiv _glVertexP4uiv;
	glTracer_glTexCoordP1ui _glTexCoordP1ui;
	glTracer_glTexCoordP1uiv _glTexCoordP1uiv;
	glTracer_glTexCoordP2ui _glTexCoordP2ui;
	glTracer_glTexCoordP2uiv _glTexCoordP2uiv;
	glTracer_glTexCoordP3ui _glTexCoordP3ui;
	glTracer_glTexCoordP3uiv _glTexCoordP3uiv;
	glTracer_glTexCoordP4ui _glTexCoordP4ui;
	glTracer_glTexCoordP4uiv _glTexCoordP4uiv;
	glTracer_glMultiTexCoordP1ui _glMultiTexCoordP1ui;
	glTracer_glMultiTexCoordP1uiv _glMultiTexCoordP1uiv;
	glTracer_glMultiTexCoordP2ui _glMultiTexCoordP2ui;
	glTracer_glMultiTexCoordP2uiv _glMultiTexCoordP2uiv;
	glTracer_glMultiTexCoordP3ui _glMultiTexCoordP3ui;
	glTracer_glMultiTexCoordP3uiv _glMultiTexCoordP3uiv;
	glTracer_glMultiTexCoordP4ui _glMultiTexCoordP4ui;
	glTracer_glMultiTexCoordP4uiv _glMultiTexCoordP4uiv;
	glTracer_glNormalP3ui _glNormalP3ui;
	glTracer_glNormalP3uiv _glNormalP3uiv;
	glTracer_glColorP3ui _glColorP3ui;
	glTracer_glColorP3uiv _glColorP3uiv;
	glTracer_glColorP4ui _glColorP4ui;
	glTracer_glColorP4uiv _glColorP4uiv;
	glTracer_glSecondaryColorP3ui _glSecondaryColorP3ui;
	glTracer_glSecondaryColorP3uiv _glSecondaryColorP3uiv;
	glTracer_glMinSampleShading _glMinSampleShading;
	glTracer_glBlendEquationi _glBlendEquationi;
	glTracer_glBlendEquationSeparatei _glBlendEquationSeparatei;
	glTracer_glBlendFunci _glBlendFunci;
	glTracer_glBlendFuncSeparatei _glBlendFuncSeparatei;
	glTracer_glDrawArraysIndirect _glDrawArraysIndirect;
	glTracer_glDrawElementsIndirect _glDrawElementsIndirect;
	glTracer_glUniform1d _glUniform1d;
	glTracer_glUniform2d _glUniform2d;
	glTracer_glUniform3d _glUniform3d;
	glTracer_glUniform4d _glUniform4d;
	glTracer_glUniform1dv _glUniform1dv;
	glTracer_glUniform2dv _glUniform2dv;
	glTracer_glUniform3dv _glUniform3dv;
	glTracer_glUniform4dv _glUniform4dv;
	glTracer_glUniformMatrix2dv _glUniformMatrix2dv;
	glTracer_glUniformMatrix3dv _glUniformMatrix3dv;
	glTracer_glUniformMatrix4dv _glUniformMatrix4dv;
	glTracer_glUniformMatrix2x3dv _glUniformMatrix2x3dv;
	glTracer_glUniformMatrix2x4dv _glUniformMatrix2x4dv;
	glTracer_glUniformMatrix3x2dv _glUniformMatrix3x2dv;
	glTracer_glUniformMatrix3x4dv _glUniformMatrix3x4dv;
	glTracer_glUniformMatrix4x2dv _glUniformMatrix4x2dv;
	glTracer_glUniformMatrix4x3dv _glUniformMatrix4x3dv;
	glTracer_glGetUniformdv _glGetUniformdv;
	glTracer_glGetSubroutineUniformLocation _glGetSubroutineUniformLocation;
	glTracer_glGetSubroutineIndex _glGetSubroutineIndex;
	glTracer_glGetActiveSubroutineUniformiv _glGetActiveSubroutineUniformiv;
	glTracer_glGetActiveSubroutineUniformName _glGetActiveSubroutineUniformName;
	glTracer_glGetActiveSubroutineName _glGetActiveSubroutineName;
	glTracer_glUniformSubroutinesuiv _glUniformSubroutinesuiv;
	glTracer_glGetUniformSubroutineuiv _glGetUniformSubroutineuiv;
	glTracer_glGetProgramStageiv _glGetProgramStageiv;
	glTracer_glPatchParameteri _glPatchParameteri;
	glTracer_glPatchParameterfv _glPatchParameterfv;
	glTracer_glBindTransformFeedback _glBindTransformFeedback;
	glTracer_glDeleteTransformFeedbacks _glDeleteTransformFeedbacks;
	glTracer_glGenTransformFeedbacks _glGenTransformFeedbacks;
	glTracer_glIsTransformFeedback _glIsTransformFeedback;
	glTracer_glPauseTransformFeedback _glPauseTransformFeedback;
	glTracer_glResumeTransformFeedback _glResumeTransformFeedback;
	glTracer_glDrawTransformFeedback _glDrawTransformFeedback;
	glTracer_glDrawTransformFeedbackStream _glDrawTransformFeedbackStream;
	glTracer_glBeginQueryIndexed _glBeginQueryIndexed;
	glTracer_glEndQueryIndexed _glEndQueryIndexed;
	glTracer_glGetQueryIndexediv _glGetQueryIndexediv;
	glTracer_glReleaseShaderCompiler _glReleaseShaderCompiler;
	glTracer_glShaderBinary _glShaderBinary;
	glTracer_glGetShaderPrecisionFormat _glGetShaderPrecisionFormat;
	glTracer_glDepthRangef _glDepthRangef;
	glTracer_glClearDepthf _glClearDepthf;
	glTracer_glGetProgramBinary _glGetProgramBinary;
	glTracer_glProgramBinary _glProgramBinary;
	glTracer_glProgramParameteri _glProgramParameteri;
	glTracer_glUseProgramStages _glUseProgramStages;
	glTracer_glActiveShaderProgram _glActiveShaderProgram;
	glTracer_glCreateShaderProgramv _glCreateShaderProgramv;
	glTracer_glBindProgramPipeline _glBindProgramPipeline;
	glTracer_glDeleteProgramPipelines _glDeleteProgramPipelines;
	glTracer_glGenProgramPipelines _glGenProgramPipelines;
	glTracer_glIsProgramPipeline _glIsProgramPipeline;
	glTracer_glGetProgramPipelineiv _glGetProgramPipelineiv;
	glTracer_glProgramUniform1i _glProgramUniform1i;
	glTracer_glProgramUniform1iv _glProgramUniform1iv;
	glTracer_glProgramUniform1f _glProgramUniform1f;
	glTracer_glProgramUniform1fv _glProgramUniform1fv;
	glTracer_glProgramUniform1d _glProgramUniform1d;
	glTracer_glProgramUniform1dv _glProgramUniform1dv;
	glTracer_glProgramUniform1ui _glProgramUniform1ui;
	glTracer_glProgramUniform1uiv _glProgramUniform1uiv;
	glTracer_glProgramUniform2i _glProgramUniform2i;
	glTracer_glProgramUniform2iv _glProgramUniform2iv;
	glTracer_glProgramUniform2f _glProgramUniform2f;
	glTracer_glProgramUniform2fv _glProgramUniform2fv;
	glTracer_glProgramUniform2d _glProgramUniform2d;
	glTracer_glProgramUniform2dv _glProgramUniform2dv;
	glTracer_glProgramUniform2ui _glProgramUniform2ui;
	glTracer_glProgramUniform2uiv _glProgramUniform2uiv;
	glTracer_glProgramUniform3i _glProgramUniform3i;
	glTracer_glProgramUniform3iv _glProgramUniform3iv;
	glTracer_glProgramUniform3f _glProgramUniform3f;
	glTracer_glProgramUniform3fv _glProgramUniform3fv;
	glTracer_glProgramUniform3d _glProgramUniform3d;
	glTracer_glProgramUniform3dv _glProgramUniform3dv;
	glTracer_glProgramUniform3ui _glProgramUniform3ui;
	glTracer_glProgramUniform3uiv _glProgramUniform3uiv;
	glTracer_glProgramUniform4i _glProgramUniform4i;
	glTracer_glProgramUniform4iv _glProgramUniform4iv;
	glTracer_glProgramUniform4f _glProgramUniform4f;
	glTracer_glProgramUniform4fv _glProgramUniform4fv;
	glTracer_glProgramUniform4d _glProgramUniform4d;
	glTracer_glProgramUniform4dv _glProgramUniform4dv;
	glTracer_glProgramUniform4ui _glProgramUniform4ui;
	glTracer_glProgramUniform4uiv _glProgramUniform4uiv;
	glTracer_glProgramUniformMatrix2fv _glProgramUniformMatrix2fv;
	glTracer_glProgramUniformMatrix3fv _glProgramUniformMatrix3fv;
	glTracer_glProgramUniformMatrix4fv _glProgramUniformMatrix4fv;
	glTracer_glProgramUniformMatrix2dv _glProgramUniformMatrix2dv;
	glTracer_glProgramUniformMatrix3dv _glProgramUniformMatrix3dv;
	glTracer_glProgramUniformMatrix4dv _glProgramUniformMatrix4dv;
	glTracer_glProgramUniformMatrix2x3fv _glProgramUniformMatrix2x3fv;
	glTracer_glProgramUniformMatrix3x2fv _glProgramUniformMatrix3x2fv;
	glTracer_glProgramUniformMatrix2x4fv _glProgramUniformMatrix2x4fv;
	glTracer_glProgramUniformMatrix4x2fv _glProgramUniformMatrix4x2fv;
	glTracer_glProgramUniformMatrix3x4fv _glProgramUniformMatrix3x4fv;
	glTracer_glProgramUniformMatrix4x3fv _glProgramUniformMatrix4x3fv;
	glTracer_glProgramUniformMatrix2x3dv _glProgramUniformMatrix2x3dv;
	glTracer_glProgramUniformMatrix3x2dv _glProgramUniformMatrix3x2dv;
	glTracer_glProgramUniformMatrix2x4dv _glProgramUniformMatrix2x4dv;
	glTracer_glProgramUniformMatrix4x2dv _glProgramUniformMatrix4x2dv;
	glTracer_glProgramUniformMatrix3x4dv _glProgramUniformMatrix3x4dv;
	glTracer_glProgramUniformMatrix4x3dv _glProgramUniformMatrix4x3dv;
	glTracer_glValidateProgramPipeline _glValidateProgramPipeline;
	glTracer_glGetProgramPipelineInfoLog _glGetProgramPipelineInfoLog;
	glTracer_glVertexAttribL1d _glVertexAttribL1d;
	glTracer_glVertexAttribL2d _glVertexAttribL2d;
	glTracer_glVertexAttribL3d _glVertexAttribL3d;
	glTracer_glVertexAttribL4d _glVertexAttribL4d;
	glTracer_glVertexAttribL1dv _glVertexAttribL1dv;
	glTracer_glVertexAttribL2dv _glVertexAttribL2dv;
	glTracer_glVertexAttribL3dv _glVertexAttribL3dv;
	glTracer_glVertexAttribL4dv _glVertexAttribL4dv;
	glTracer_glVertexAttribLPointer _glVertexAttribLPointer;
	glTracer_glGetVertexAttribLdv _glGetVertexAttribLdv;
	glTracer_glViewportArrayv _glViewportArrayv;
	glTracer_glViewportIndexedf _glViewportIndexedf;
	glTracer_glViewportIndexedfv _glViewportIndexedfv;
	glTracer_glScissorArrayv _glScissorArrayv;
	glTracer_glScissorIndexed _glScissorIndexed;
	glTracer_glScissorIndexedv _glScissorIndexedv;
	glTracer_glDepthRangeArrayv _glDepthRangeArrayv;
	glTracer_glDepthRangeIndexed _glDepthRangeIndexed;
	glTracer_glGetFloati_v _glGetFloati_v;
	glTracer_glGetDoublei_v _glGetDoublei_v;
	glTracer_glDrawArraysInstancedBaseInstance _glDrawArraysInstancedBaseInstance;
	glTracer_glDrawElementsInstancedBaseInstance _glDrawElementsInstancedBaseInstance;
	glTracer_glDrawElementsInstancedBaseVertexBaseInstance _glDrawElementsInstancedBaseVertexBaseInstance;
	glTracer_glGetInternalformativ _glGetInternalformativ;
	glTracer_glGetActiveAtomicCounterBufferiv _glGetActiveAtomicCounterBufferiv;
	glTracer_glBindImageTexture _glBindImageTexture;
	glTracer_glMemoryBarrier _glMemoryBarrier;
	glTracer_glTexStorage1D _glTexStorage1D;
	glTracer_glTexStorage2D _glTexStorage2D;
	glTracer_glTexStorage3D _glTexStorage3D;
	glTracer_glDrawTransformFeedbackInstanced _glDrawTransformFeedbackInstanced;
	glTracer_glDrawTransformFeedbackStreamInstanced _glDrawTransformFeedbackStreamInstanced;
	glTracer_glClearBufferData _glClearBufferData;
	glTracer_glClearBufferSubData _glClearBufferSubData;
	glTracer_glDispatchCompute _glDispatchCompute;
	glTracer_glDispatchComputeIndirect _glDispatchComputeIndirect;
	glTracer_glCopyImageSubData _glCopyImageSubData;
	glTracer_glFramebufferParameteri _glFramebufferParameteri;
	glTracer_glGetFramebufferParameteriv _glGetFramebufferParameteriv;
	glTracer_glGetInternalformati64v _glGetInternalformati64v;
	glTracer_glInvalidateTexSubImage _glInvalidateTexSubImage;
	glTracer_glInvalidateTexImage _glInvalidateTexImage;
	glTracer_glInvalidateBufferSubData _glInvalidateBufferSubData;
	glTracer_glInvalidateBufferData _glInvalidateBufferData;
	glTracer_glInvalidateFramebuffer _glInvalidateFramebuffer;
	glTracer_glInvalidateSubFramebuffer _glInvalidateSubFramebuffer;
	glTracer_glMultiDrawArraysIndirect _glMultiDrawArraysIndirect;
	glTracer_glMultiDrawElementsIndirect _glMultiDrawElementsIndirect;
	glTracer_glGetProgramInterfaceiv _glGetProgramInterfaceiv;
	glTracer_glGetProgramResourceIndex _glGetProgramResourceIndex;
	glTracer_glGetProgramResourceName _glGetProgramResourceName;
	glTracer_glGetProgramResourceiv _glGetProgramResourceiv;
	glTracer_glGetProgramResourceLocation _glGetProgramResourceLocation;
	glTracer_glGetProgramResourceLocationIndex _glGetProgramResourceLocationIndex;
	glTracer_glShaderStorageBlockBinding _glShaderStorageBlockBinding;
	glTracer_glTexBufferRange _glTexBufferRange;
	glTracer_glTexStorage2DMultisample _glTexStorage2DMultisample;
	glTracer_glTexStorage3DMultisample _glTexStorage3DMultisample;
	glTracer_glTextureView _glTextureView;
	glTracer_glBindVertexBuffer _glBindVertexBuffer;
	glTracer_glVertexAttribFormat _glVertexAttribFormat;
	glTracer_glVertexAttribIFormat _glVertexAttribIFormat;
	glTracer_glVertexAttribLFormat _glVertexAttribLFormat;
	glTracer_glVertexAttribBinding _glVertexAttribBinding;
	glTracer_glVertexBindingDivisor _glVertexBindingDivisor;
	glTracer_glDebugMessageControl _glDebugMessageControl;
	glTracer_glDebugMessageInsert _glDebugMessageInsert;
	glTracer_glDebugMessageCallback _glDebugMessageCallback;
	glTracer_glGetDebugMessageLog _glGetDebugMessageLog;
	glTracer_glPushDebugGroup _glPushDebugGroup;
	glTracer_glPopDebugGroup _glPopDebugGroup;
	glTracer_glObjectLabel _glObjectLabel;
	glTracer_glGetObjectLabel _glGetObjectLabel;
	glTracer_glObjectPtrLabel _glObjectPtrLabel;
	glTracer_glGetObjectPtrLabel _glGetObjectPtrLabel;
	glTracer_glBufferStorage _glBufferStorage;
	glTracer_glClearTexImage _glClearTexImage;
	glTracer_glClearTexSubImage _glClearTexSubImage;
	glTracer_glBindBuffersBase _glBindBuffersBase;
	glTracer_glBindBuffersRange _glBindBuffersRange;
	glTracer_glBindTextures _glBindTextures;
	glTracer_glBindSamplers _glBindSamplers;
	glTracer_glBindImageTextures _glBindImageTextures;
	glTracer_glBindVertexBuffers _glBindVertexBuffers;
	glTracer_glClipControl _glClipControl;
	glTracer_glCreateTransformFeedbacks _glCreateTransformFeedbacks;
	glTracer_glTransformFeedbackBufferBase _glTransformFeedbackBufferBase;
	glTracer_glTransformFeedbackBufferRange _glTransformFeedbackBufferRange;
	glTracer_glGetTransformFeedbackiv _glGetTransformFeedbackiv;
	glTracer_glGetTransformFeedbacki_v _glGetTransformFeedbacki_v;
	glTracer_glGetTransformFeedbacki64_v _glGetTransformFeedbacki64_v;
	glTracer_glCreateBuffers _glCreateBuffers;
	glTracer_glNamedBufferStorage _glNamedBufferStorage;
	glTracer_glNamedBufferData _glNamedBufferData;
	glTracer_glNamedBufferSubData _glNamedBufferSubData;
	glTracer_glCopyNamedBufferSubData _glCopyNamedBufferSubData;
	glTracer_glClearNamedBufferData _glClearNamedBufferData;
	glTracer_glClearNamedBufferSubData _glClearNamedBufferSubData;
	glTracer_glMapNamedBuffer _glMapNamedBuffer;
	glTracer_glMapNamedBufferRange _glMapNamedBufferRange;
	glTracer_glUnmapNamedBuffer _glUnmapNamedBuffer;
	glTracer_glFlushMappedNamedBufferRange _glFlushMappedNamedBufferRange;
	glTracer_glGetNamedBufferParameteriv _glGetNamedBufferParameteriv;
	glTracer_glGetNamedBufferParameteri64v _glGetNamedBufferParameteri64v;
	glTracer_glGetNamedBufferPointerv _glGetNamedBufferPointerv;
	glTracer_glGetNamedBufferSubData _glGetNamedBufferSubData;
	glTracer_glCreateFramebuffers _glCreateFramebuffers;
	glTracer_glNamedFramebufferRenderbuffer _glNamedFramebufferRenderbuffer;
	glTracer_glNamedFramebufferParameteri _glNamedFramebufferParameteri;
	glTracer_glNamedFramebufferTexture _glNamedFramebufferTexture;
	glTracer_glNamedFramebufferTextureLayer _glNamedFramebufferTextureLayer;
	glTracer_glNamedFramebufferDrawBuffer _glNamedFramebufferDrawBuffer;
	glTracer_glNamedFramebufferDrawBuffers _glNamedFramebufferDrawBuffers;
	glTracer_glNamedFramebufferReadBuffer _glNamedFramebufferReadBuffer;
	glTracer_glInvalidateNamedFramebufferData _glInvalidateNamedFramebufferData;
	glTracer_glInvalidateNamedFramebufferSubData _glInvalidateNamedFramebufferSubData;
	glTracer_glClearNamedFramebufferiv _glClearNamedFramebufferiv;
	glTracer_glClearNamedFramebufferuiv _glClearNamedFramebufferuiv;
	glTracer_glClearNamedFramebufferfv _glClearNamedFramebufferfv;
	glTracer_glClearNamedFramebufferfi _glClearNamedFramebufferfi;
	glTracer_glBlitNamedFramebuffer _glBlitNamedFramebuffer;
	glTracer_glCheckNamedFramebufferStatus _glCheckNamedFramebufferStatus;
	glTracer_glGetNamedFramebufferParameteriv _glGetNamedFramebufferParameteriv;
	glTracer_glGetNamedFramebufferAttachmentParameteriv _glGetNamedFramebufferAttachmentParameteriv;
	glTracer_glCreateRenderbuffers _glCreateRenderbuffers;
	glTracer_glNamedRenderbufferStorage _glNamedRenderbufferStorage;
	glTracer_glNamedRenderbufferStorageMultisample _glNamedRenderbufferStorageMultisample;
	glTracer_glGetNamedRenderbufferParameteriv _glGetNamedRenderbufferParameteriv;
	glTracer_glCreateTextures _glCreateTextures;
	glTracer_glTextureBuffer _glTextureBuffer;
	glTracer_glTextureBufferRange _glTextureBufferRange;
	glTracer_glTextureStorage1D _glTextureStorage1D;
	glTracer_glTextureStorage2D _glTextureStorage2D;
	glTracer_glTextureStorage3D _glTextureStorage3D;
	glTracer_glTextureStorage2DMultisample _glTextureStorage2DMultisample;
	glTracer_glTextureStorage3DMultisample _glTextureStorage3DMultisample;
	glTracer_glTextureSubImage1D _glTextureSubImage1D;
	glTracer_glTextureSubImage2D _glTextureSubImage2D;
	glTracer_glTextureSubImage3D _glTextureSubImage3D;
	glTracer_glCompressedTextureSubImage1D _glCompressedTextureSubImage1D;
	glTracer_glCompressedTextureSubImage2D _glCompressedTextureSubImage2D;
	glTracer_glCompressedTextureSubImage3D _glCompressedTextureSubImage3D;
	glTracer_glCopyTextureSubImage1D _glCopyTextureSubImage1D;
	glTracer_glCopyTextureSubImage2D _glCopyTextureSubImage2D;
	glTracer_glCopyTextureSubImage3D _glCopyTextureSubImage3D;
	glTracer_glTextureParameterf _glTextureParameterf;
	glTracer_glTextureParameterfv _glTextureParameterfv;
	glTracer_glTextureParameteri _glTextureParameteri;
	glTracer_glTextureParameterIiv _glTextureParameterIiv;
	glTracer_glTextureParameterIuiv _glTextureParameterIuiv;
	glTracer_glTextureParameteriv _glTextureParameteriv;
	glTracer_glGenerateTextureMipmap _glGenerateTextureMipmap;
	glTracer_glBindTextureUnit _glBindTextureUnit;
	glTracer_glGetTextureImage _glGetTextureImage;
	glTracer_glGetCompressedTextureImage _glGetCompressedTextureImage;
	glTracer_glGetTextureLevelParameterfv _glGetTextureLevelParameterfv;
	glTracer_glGetTextureLevelParameteriv _glGetTextureLevelParameteriv;
	glTracer_glGetTextureParameterfv _glGetTextureParameterfv;
	glTracer_glGetTextureParameterIiv _glGetTextureParameterIiv;
	glTracer_glGetTextureParameterIuiv _glGetTextureParameterIuiv;
	glTracer_glGetTextureParameteriv _glGetTextureParameteriv;
	glTracer_glCreateVertexArrays _glCreateVertexArrays;
	glTracer_glDisableVertexArrayAttrib _glDisableVertexArrayAttrib;
	glTracer_glEnableVertexArrayAttrib _glEnableVertexArrayAttrib;
	glTracer_glVertexArrayElementBuffer _glVertexArrayElementBuffer;
	glTracer_glVertexArrayVertexBuffer _glVertexArrayVertexBuffer;
	glTracer_glVertexArrayVertexBuffers _glVertexArrayVertexBuffers;
	glTracer_glVertexArrayAttribBinding _glVertexArrayAttribBinding;
	glTracer_glVertexArrayAttribFormat _glVertexArrayAttribFormat;
	glTracer_glVertexArrayAttribIFormat _glVertexArrayAttribIFormat;
	glTracer_glVertexArrayAttribLFormat _glVertexArrayAttribLFormat;
	glTracer_glVertexArrayBindingDivisor _glVertexArrayBindingDivisor;
	glTracer_glGetVertexArrayiv _glGetVertexArrayiv;
	glTracer_glGetVertexArrayIndexediv _glGetVertexArrayIndexediv;
	glTracer_glGetVertexArrayIndexed64iv _glGetVertexArrayIndexed64iv;
	glTracer_glCreateSamplers _glCreateSamplers;
	glTracer_glCreateProgramPipelines _glCreateProgramPipelines;
	glTracer_glCreateQueries _glCreateQueries;
	glTracer_glGetQueryBufferObjecti64v _glGetQueryBufferObjecti64v;
	glTracer_glGetQueryBufferObjectiv _glGetQueryBufferObjectiv;
	glTracer_glGetQueryBufferObjectui64v _glGetQueryBufferObjectui64v;
	glTracer_glGetQueryBufferObjectuiv _glGetQueryBufferObjectuiv;
	glTracer_glMemoryBarrierByRegion _glMemoryBarrierByRegion;
	glTracer_glGetTextureSubImage _glGetTextureSubImage;
	glTracer_glGetCompressedTextureSubImage _glGetCompressedTextureSubImage;
	glTracer_glGetGraphicsResetStatus _glGetGraphicsResetStatus;
	glTracer_glGetnCompressedTexImage _glGetnCompressedTexImage;
	glTracer_glGetnTexImage _glGetnTexImage;
	glTracer_glGetnUniformdv _glGetnUniformdv;
	glTracer_glGetnUniformfv _glGetnUniformfv;
	glTracer_glGetnUniformiv _glGetnUniformiv;
	glTracer_glGetnUniformuiv _glGetnUniformuiv;
	glTracer_glReadnPixels _glReadnPixels;
	glTracer_glGetnMapdv _glGetnMapdv;
	glTracer_glGetnMapfv _glGetnMapfv;
	glTracer_glGetnMapiv _glGetnMapiv;
	glTracer_glGetnPixelMapfv _glGetnPixelMapfv;
	glTracer_glGetnPixelMapuiv _glGetnPixelMapuiv;
	glTracer_glGetnPixelMapusv _glGetnPixelMapusv;
	glTracer_glGetnPolygonStipple _glGetnPolygonStipple;
	glTracer_glGetnColorTable _glGetnColorTable;
	glTracer_glGetnConvolutionFilter _glGetnConvolutionFilter;
	glTracer_glGetnSeparableFilter _glGetnSeparableFilter;
	glTracer_glGetnHistogram _glGetnHistogram;
	glTracer_glGetnMinmax _glGetnMinmax;
	glTracer_glTextureBarrier _glTextureBarrier;
	glTracer_glSpecializeShader _glSpecializeShader;
	glTracer_glMultiDrawArraysIndirectCount _glMultiDrawArraysIndirectCount;
	glTracer_glMultiDrawElementsIndirectCount _glMultiDrawElementsIndirectCount;
	glTracer_glPolygonOffsetClamp _glPolygonOffsetClamp;
};

namespace
{
	GLTracer tracer;
}

void glCullFace_Traced(GLenum mode)
{
	MYLOG("glCullFace");
	tracer._glCullFace(mode);
}
void glFrontFace_Traced(GLenum mode)
{
	MYLOG("glFrontFace");
	tracer._glFrontFace(mode);
}
void glHint_Traced(GLenum target, GLenum mode)
{
	MYLOG("glHint");
	tracer._glHint(target, mode);
}
void glLineWidth_Traced(GLfloat width)
{
	MYLOG("glLineWidth");
	tracer._glLineWidth(width);
}
void glPointSize_Traced(GLfloat size)
{
	MYLOG("glPointSize");
	tracer._glPointSize(size);
}
void glPolygonMode_Traced(GLenum face, GLenum mode)
{
	MYLOG("glPolygonMode");
	tracer._glPolygonMode(face, mode);
}
void glScissor_Traced(GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glScissor");
	tracer._glScissor(x, y, width, height);
}
void glTexParameterf_Traced(GLenum target, GLenum pname, GLfloat param)
{
	MYLOG("glTexParameterf");
	tracer._glTexParameterf(target, pname, param);
}
void glTexParameterfv_Traced(GLenum target, GLenum pname, const GLfloat* params)
{
	MYLOG("glTexParameterfv");
	tracer._glTexParameterfv(target, pname, params);
}
void glTexParameteri_Traced(GLenum target, GLenum pname, GLint param)
{
	MYLOG("glTexParameteri");
	tracer._glTexParameteri(target, pname, param);
}
void glTexParameteriv_Traced(GLenum target, GLenum pname, const GLint* params)
{
	MYLOG("glTexParameteriv");
	tracer._glTexParameteriv(target, pname, params);
}
void glTexImage1D_Traced(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexImage1D");
	tracer._glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}
void glTexImage2D_Traced(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexImage2D");
	tracer._glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}
void glDrawBuffer_Traced(GLenum buf)
{
	MYLOG("glDrawBuffer");
	tracer._glDrawBuffer(buf);
}
void glClear_Traced(GLbitfield mask)
{
	MYLOG("glClear");
	tracer._glClear(mask);
}
void glClearColor_Traced(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	MYLOG("glClearColor");
	tracer._glClearColor(red, green, blue, alpha);
}
void glClearStencil_Traced(GLint s)
{
	MYLOG("glClearStencil");
	tracer._glClearStencil(s);
}
void glClearDepth_Traced(GLdouble depth)
{
	MYLOG("glClearDepth");
	tracer._glClearDepth(depth);
}
void glStencilMask_Traced(GLuint mask)
{
	MYLOG("glStencilMask");
	tracer._glStencilMask(mask);
}
void glColorMask_Traced(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
	MYLOG("glColorMask");
	tracer._glColorMask(red, green, blue, alpha);
}
void glDepthMask_Traced(GLboolean flag)
{
	MYLOG("glDepthMask");
	tracer._glDepthMask(flag);
}
void glDisable_Traced(GLenum cap)
{
	MYLOG("glDisable");
	tracer._glDisable(cap);
}
void glEnable_Traced(GLenum cap)
{
	MYLOG("glEnable");
	tracer._glEnable(cap);
}
void glFinish_Traced()
{
	MYLOG("glFinish");
	tracer._glFinish();
}
void glFlush_Traced()
{
	MYLOG("glFlush");
	tracer._glFlush();
}
void glBlendFunc_Traced(GLenum sfactor, GLenum dfactor)
{
	MYLOG("glBlendFunc");
	tracer._glBlendFunc(sfactor, dfactor);
}
void glLogicOp_Traced(GLenum opcode)
{
	MYLOG("glLogicOp");
	tracer._glLogicOp(opcode);
}
void glStencilFunc_Traced(GLenum func, GLint ref, GLuint mask)
{
	MYLOG("glStencilFunc");
	tracer._glStencilFunc(func, ref, mask);
}
void glStencilOp_Traced(GLenum fail, GLenum zfail, GLenum zpass)
{
	MYLOG("glStencilOp");
	tracer._glStencilOp(fail, zfail, zpass);
}
void glDepthFunc_Traced(GLenum func)
{
	MYLOG("glDepthFunc");
	tracer._glDepthFunc(func);
}
void glPixelStoref_Traced(GLenum pname, GLfloat param)
{
	MYLOG("glPixelStoref");
	tracer._glPixelStoref(pname, param);
}
void glPixelStorei_Traced(GLenum pname, GLint param)
{
	MYLOG("glPixelStorei");
	tracer._glPixelStorei(pname, param);
}
void glReadBuffer_Traced(GLenum src)
{
	MYLOG("glReadBuffer");
	tracer._glReadBuffer(src);
}
void glReadPixels_Traced(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels)
{
	MYLOG("glReadPixels");
	tracer._glReadPixels(x, y, width, height, format, type, pixels);
}
void glGetBooleanv_Traced(GLenum pname, GLboolean* data)
{
	MYLOG("glGetBooleanv");
	tracer._glGetBooleanv(pname, data);
}
void glGetDoublev_Traced(GLenum pname, GLdouble* data)
{
	MYLOG("glGetDoublev");
	tracer._glGetDoublev(pname, data);
}
GLenum glGetError_Traced()
{
	MYLOG("glGetError");
	return tracer._glGetError();
}
void glGetFloatv_Traced(GLenum pname, GLfloat* data)
{
	MYLOG("glGetFloatv");
	tracer._glGetFloatv(pname, data);
}
void glGetIntegerv_Traced(GLenum pname, GLint* data)
{
	MYLOG("glGetIntegerv");
	tracer._glGetIntegerv(pname, data);
}
const GLubyte* glGetString_Traced(GLenum name)
{
	MYLOG("glGetString");
	return tracer._glGetString(name);
}
void glGetTexImage_Traced(GLenum target, GLint level, GLenum format, GLenum type, void* pixels)
{
	MYLOG("glGetTexImage");
	tracer._glGetTexImage(target, level, format, type, pixels);
}
void glGetTexParameterfv_Traced(GLenum target, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTexParameterfv");
	tracer._glGetTexParameterfv(target, pname, params);
}
void glGetTexParameteriv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetTexParameteriv");
	tracer._glGetTexParameteriv(target, pname, params);
}
void glGetTexLevelParameterfv_Traced(GLenum target, GLint level, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTexLevelParameterfv");
	tracer._glGetTexLevelParameterfv(target, level, pname, params);
}
void glGetTexLevelParameteriv_Traced(GLenum target, GLint level, GLenum pname, GLint* params)
{
	MYLOG("glGetTexLevelParameteriv");
	tracer._glGetTexLevelParameteriv(target, level, pname, params);
}
GLboolean glIsEnabled_Traced(GLenum cap)
{
	MYLOG("glIsEnabled");
	return tracer._glIsEnabled(cap);
}
void glDepthRange_Traced(GLdouble n, GLdouble f)
{
	MYLOG("glDepthRange");
	tracer._glDepthRange(n, f);
}
void glViewport_Traced(GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glViewport");
	tracer._glViewport(x, y, width, height);
}
void glNewList_Traced(GLuint list, GLenum mode)
{
	MYLOG("glNewList");
	tracer._glNewList(list, mode);
}
void glEndList_Traced()
{
	MYLOG("glEndList");
	tracer._glEndList();
}
void glCallList_Traced(GLuint list)
{
	MYLOG("glCallList");
	tracer._glCallList(list);
}
void glCallLists_Traced(GLsizei n, GLenum type, const void* lists)
{
	MYLOG("glCallLists");
	tracer._glCallLists(n, type, lists);
}
void glDeleteLists_Traced(GLuint list, GLsizei range)
{
	MYLOG("glDeleteLists");
	tracer._glDeleteLists(list, range);
}
GLuint glGenLists_Traced(GLsizei range)
{
	MYLOG("glGenLists");
	return tracer._glGenLists(range);
}
void glListBase_Traced(GLuint base)
{
	MYLOG("glListBase");
	tracer._glListBase(base);
}
void glBegin_Traced(GLenum mode)
{
	MYLOG("glBegin");
	tracer._glBegin(mode);
}
void glBitmap_Traced(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap)
{
	MYLOG("glBitmap");
	tracer._glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
void glColor3b_Traced(GLbyte red, GLbyte green, GLbyte blue)
{
	MYLOG("glColor3b");
	tracer._glColor3b(red, green, blue);
}
void glColor3bv_Traced(const GLbyte* v)
{
	MYLOG("glColor3bv");
	tracer._glColor3bv(v);
}
void glColor3d_Traced(GLdouble red, GLdouble green, GLdouble blue)
{
	MYLOG("glColor3d");
	tracer._glColor3d(red, green, blue);
}
void glColor3dv_Traced(const GLdouble* v)
{
	MYLOG("glColor3dv");
	tracer._glColor3dv(v);
}
void glColor3f_Traced(GLfloat red, GLfloat green, GLfloat blue)
{
	MYLOG("glColor3f");
	tracer._glColor3f(red, green, blue);
}
void glColor3fv_Traced(const GLfloat* v)
{
	MYLOG("glColor3fv");
	tracer._glColor3fv(v);
}
void glColor3i_Traced(GLint red, GLint green, GLint blue)
{
	MYLOG("glColor3i");
	tracer._glColor3i(red, green, blue);
}
void glColor3iv_Traced(const GLint* v)
{
	MYLOG("glColor3iv");
	tracer._glColor3iv(v);
}
void glColor3s_Traced(GLshort red, GLshort green, GLshort blue)
{
	MYLOG("glColor3s");
	tracer._glColor3s(red, green, blue);
}
void glColor3sv_Traced(const GLshort* v)
{
	MYLOG("glColor3sv");
	tracer._glColor3sv(v);
}
void glColor3ub_Traced(GLubyte red, GLubyte green, GLubyte blue)
{
	MYLOG("glColor3ub");
	tracer._glColor3ub(red, green, blue);
}
void glColor3ubv_Traced(const GLubyte* v)
{
	MYLOG("glColor3ubv");
	tracer._glColor3ubv(v);
}
void glColor3ui_Traced(GLuint red, GLuint green, GLuint blue)
{
	MYLOG("glColor3ui");
	tracer._glColor3ui(red, green, blue);
}
void glColor3uiv_Traced(const GLuint* v)
{
	MYLOG("glColor3uiv");
	tracer._glColor3uiv(v);
}
void glColor3us_Traced(GLushort red, GLushort green, GLushort blue)
{
	MYLOG("glColor3us");
	tracer._glColor3us(red, green, blue);
}
void glColor3usv_Traced(const GLushort* v)
{
	MYLOG("glColor3usv");
	tracer._glColor3usv(v);
}
void glColor4b_Traced(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
	MYLOG("glColor4b");
	tracer._glColor4b(red, green, blue, alpha);
}
void glColor4bv_Traced(const GLbyte* v)
{
	MYLOG("glColor4bv");
	tracer._glColor4bv(v);
}
void glColor4d_Traced(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
	MYLOG("glColor4d");
	tracer._glColor4d(red, green, blue, alpha);
}
void glColor4dv_Traced(const GLdouble* v)
{
	MYLOG("glColor4dv");
	tracer._glColor4dv(v);
}
void glColor4f_Traced(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	MYLOG("glColor4f");
	tracer._glColor4f(red, green, blue, alpha);
}
void glColor4fv_Traced(const GLfloat* v)
{
	MYLOG("glColor4fv");
	tracer._glColor4fv(v);
}
void glColor4i_Traced(GLint red, GLint green, GLint blue, GLint alpha)
{
	MYLOG("glColor4i");
	tracer._glColor4i(red, green, blue, alpha);
}
void glColor4iv_Traced(const GLint* v)
{
	MYLOG("glColor4iv");
	tracer._glColor4iv(v);
}
void glColor4s_Traced(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
	MYLOG("glColor4s");
	tracer._glColor4s(red, green, blue, alpha);
}
void glColor4sv_Traced(const GLshort* v)
{
	MYLOG("glColor4sv");
	tracer._glColor4sv(v);
}
void glColor4ub_Traced(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
	MYLOG("glColor4ub");
	tracer._glColor4ub(red, green, blue, alpha);
}
void glColor4ubv_Traced(const GLubyte* v)
{
	MYLOG("glColor4ubv");
	tracer._glColor4ubv(v);
}
void glColor4ui_Traced(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
	MYLOG("glColor4ui");
	tracer._glColor4ui(red, green, blue, alpha);
}
void glColor4uiv_Traced(const GLuint* v)
{
	MYLOG("glColor4uiv");
	tracer._glColor4uiv(v);
}
void glColor4us_Traced(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
	MYLOG("glColor4us");
	tracer._glColor4us(red, green, blue, alpha);
}
void glColor4usv_Traced(const GLushort* v)
{
	MYLOG("glColor4usv");
	tracer._glColor4usv(v);
}
void glEdgeFlag_Traced(GLboolean flag)
{
	MYLOG("glEdgeFlag");
	tracer._glEdgeFlag(flag);
}
void glEdgeFlagv_Traced(const GLboolean* flag)
{
	MYLOG("glEdgeFlagv");
	tracer._glEdgeFlagv(flag);
}
void glEnd_Traced()
{
	MYLOG("glEnd");
	tracer._glEnd();
}
void glIndexd_Traced(GLdouble c)
{
	MYLOG("glIndexd");
	tracer._glIndexd(c);
}
void glIndexdv_Traced(const GLdouble* c)
{
	MYLOG("glIndexdv");
	tracer._glIndexdv(c);
}
void glIndexf_Traced(GLfloat c)
{
	MYLOG("glIndexf");
	tracer._glIndexf(c);
}
void glIndexfv_Traced(const GLfloat* c)
{
	MYLOG("glIndexfv");
	tracer._glIndexfv(c);
}
void glIndexi_Traced(GLint c)
{
	MYLOG("glIndexi");
	tracer._glIndexi(c);
}
void glIndexiv_Traced(const GLint* c)
{
	MYLOG("glIndexiv");
	tracer._glIndexiv(c);
}
void glIndexs_Traced(GLshort c)
{
	MYLOG("glIndexs");
	tracer._glIndexs(c);
}
void glIndexsv_Traced(const GLshort* c)
{
	MYLOG("glIndexsv");
	tracer._glIndexsv(c);
}
void glNormal3b_Traced(GLbyte nx, GLbyte ny, GLbyte nz)
{
	MYLOG("glNormal3b");
	tracer._glNormal3b(nx, ny, nz);
}
void glNormal3bv_Traced(const GLbyte* v)
{
	MYLOG("glNormal3bv");
	tracer._glNormal3bv(v);
}
void glNormal3d_Traced(GLdouble nx, GLdouble ny, GLdouble nz)
{
	MYLOG("glNormal3d");
	tracer._glNormal3d(nx, ny, nz);
}
void glNormal3dv_Traced(const GLdouble* v)
{
	MYLOG("glNormal3dv");
	tracer._glNormal3dv(v);
}
void glNormal3f_Traced(GLfloat nx, GLfloat ny, GLfloat nz)
{
	MYLOG("glNormal3f");
	tracer._glNormal3f(nx, ny, nz);
}
void glNormal3fv_Traced(const GLfloat* v)
{
	MYLOG("glNormal3fv");
	tracer._glNormal3fv(v);
}
void glNormal3i_Traced(GLint nx, GLint ny, GLint nz)
{
	MYLOG("glNormal3i");
	tracer._glNormal3i(nx, ny, nz);
}
void glNormal3iv_Traced(const GLint* v)
{
	MYLOG("glNormal3iv");
	tracer._glNormal3iv(v);
}
void glNormal3s_Traced(GLshort nx, GLshort ny, GLshort nz)
{
	MYLOG("glNormal3s");
	tracer._glNormal3s(nx, ny, nz);
}
void glNormal3sv_Traced(const GLshort* v)
{
	MYLOG("glNormal3sv");
	tracer._glNormal3sv(v);
}
void glRasterPos2d_Traced(GLdouble x, GLdouble y)
{
	MYLOG("glRasterPos2d");
	tracer._glRasterPos2d(x, y);
}
void glRasterPos2dv_Traced(const GLdouble* v)
{
	MYLOG("glRasterPos2dv");
	tracer._glRasterPos2dv(v);
}
void glRasterPos2f_Traced(GLfloat x, GLfloat y)
{
	MYLOG("glRasterPos2f");
	tracer._glRasterPos2f(x, y);
}
void glRasterPos2fv_Traced(const GLfloat* v)
{
	MYLOG("glRasterPos2fv");
	tracer._glRasterPos2fv(v);
}
void glRasterPos2i_Traced(GLint x, GLint y)
{
	MYLOG("glRasterPos2i");
	tracer._glRasterPos2i(x, y);
}
void glRasterPos2iv_Traced(const GLint* v)
{
	MYLOG("glRasterPos2iv");
	tracer._glRasterPos2iv(v);
}
void glRasterPos2s_Traced(GLshort x, GLshort y)
{
	MYLOG("glRasterPos2s");
	tracer._glRasterPos2s(x, y);
}
void glRasterPos2sv_Traced(const GLshort* v)
{
	MYLOG("glRasterPos2sv");
	tracer._glRasterPos2sv(v);
}
void glRasterPos3d_Traced(GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glRasterPos3d");
	tracer._glRasterPos3d(x, y, z);
}
void glRasterPos3dv_Traced(const GLdouble* v)
{
	MYLOG("glRasterPos3dv");
	tracer._glRasterPos3dv(v);
}
void glRasterPos3f_Traced(GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glRasterPos3f");
	tracer._glRasterPos3f(x, y, z);
}
void glRasterPos3fv_Traced(const GLfloat* v)
{
	MYLOG("glRasterPos3fv");
	tracer._glRasterPos3fv(v);
}
void glRasterPos3i_Traced(GLint x, GLint y, GLint z)
{
	MYLOG("glRasterPos3i");
	tracer._glRasterPos3i(x, y, z);
}
void glRasterPos3iv_Traced(const GLint* v)
{
	MYLOG("glRasterPos3iv");
	tracer._glRasterPos3iv(v);
}
void glRasterPos3s_Traced(GLshort x, GLshort y, GLshort z)
{
	MYLOG("glRasterPos3s");
	tracer._glRasterPos3s(x, y, z);
}
void glRasterPos3sv_Traced(const GLshort* v)
{
	MYLOG("glRasterPos3sv");
	tracer._glRasterPos3sv(v);
}
void glRasterPos4d_Traced(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	MYLOG("glRasterPos4d");
	tracer._glRasterPos4d(x, y, z, w);
}
void glRasterPos4dv_Traced(const GLdouble* v)
{
	MYLOG("glRasterPos4dv");
	tracer._glRasterPos4dv(v);
}
void glRasterPos4f_Traced(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	MYLOG("glRasterPos4f");
	tracer._glRasterPos4f(x, y, z, w);
}
void glRasterPos4fv_Traced(const GLfloat* v)
{
	MYLOG("glRasterPos4fv");
	tracer._glRasterPos4fv(v);
}
void glRasterPos4i_Traced(GLint x, GLint y, GLint z, GLint w)
{
	MYLOG("glRasterPos4i");
	tracer._glRasterPos4i(x, y, z, w);
}
void glRasterPos4iv_Traced(const GLint* v)
{
	MYLOG("glRasterPos4iv");
	tracer._glRasterPos4iv(v);
}
void glRasterPos4s_Traced(GLshort x, GLshort y, GLshort z, GLshort w)
{
	MYLOG("glRasterPos4s");
	tracer._glRasterPos4s(x, y, z, w);
}
void glRasterPos4sv_Traced(const GLshort* v)
{
	MYLOG("glRasterPos4sv");
	tracer._glRasterPos4sv(v);
}
void glRectd_Traced(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
	MYLOG("glRectd");
	tracer._glRectd(x1, y1, x2, y2);
}
void glRectdv_Traced(const GLdouble* v1, const GLdouble* v2)
{
	MYLOG("glRectdv");
	tracer._glRectdv(v1, v2);
}
void glRectf_Traced(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
	MYLOG("glRectf");
	tracer._glRectf(x1, y1, x2, y2);
}
void glRectfv_Traced(const GLfloat* v1, const GLfloat* v2)
{
	MYLOG("glRectfv");
	tracer._glRectfv(v1, v2);
}
void glRecti_Traced(GLint x1, GLint y1, GLint x2, GLint y2)
{
	MYLOG("glRecti");
	tracer._glRecti(x1, y1, x2, y2);
}
void glRectiv_Traced(const GLint* v1, const GLint* v2)
{
	MYLOG("glRectiv");
	tracer._glRectiv(v1, v2);
}
void glRects_Traced(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
	MYLOG("glRects");
	tracer._glRects(x1, y1, x2, y2);
}
void glRectsv_Traced(const GLshort* v1, const GLshort* v2)
{
	MYLOG("glRectsv");
	tracer._glRectsv(v1, v2);
}
void glTexCoord1d_Traced(GLdouble s)
{
	MYLOG("glTexCoord1d");
	tracer._glTexCoord1d(s);
}
void glTexCoord1dv_Traced(const GLdouble* v)
{
	MYLOG("glTexCoord1dv");
	tracer._glTexCoord1dv(v);
}
void glTexCoord1f_Traced(GLfloat s)
{
	MYLOG("glTexCoord1f");
	tracer._glTexCoord1f(s);
}
void glTexCoord1fv_Traced(const GLfloat* v)
{
	MYLOG("glTexCoord1fv");
	tracer._glTexCoord1fv(v);
}
void glTexCoord1i_Traced(GLint s)
{
	MYLOG("glTexCoord1i");
	tracer._glTexCoord1i(s);
}
void glTexCoord1iv_Traced(const GLint* v)
{
	MYLOG("glTexCoord1iv");
	tracer._glTexCoord1iv(v);
}
void glTexCoord1s_Traced(GLshort s)
{
	MYLOG("glTexCoord1s");
	tracer._glTexCoord1s(s);
}
void glTexCoord1sv_Traced(const GLshort* v)
{
	MYLOG("glTexCoord1sv");
	tracer._glTexCoord1sv(v);
}
void glTexCoord2d_Traced(GLdouble s, GLdouble t)
{
	MYLOG("glTexCoord2d");
	tracer._glTexCoord2d(s, t);
}
void glTexCoord2dv_Traced(const GLdouble* v)
{
	MYLOG("glTexCoord2dv");
	tracer._glTexCoord2dv(v);
}
void glTexCoord2f_Traced(GLfloat s, GLfloat t)
{
	MYLOG("glTexCoord2f");
	tracer._glTexCoord2f(s, t);
}
void glTexCoord2fv_Traced(const GLfloat* v)
{
	MYLOG("glTexCoord2fv");
	tracer._glTexCoord2fv(v);
}
void glTexCoord2i_Traced(GLint s, GLint t)
{
	MYLOG("glTexCoord2i");
	tracer._glTexCoord2i(s, t);
}
void glTexCoord2iv_Traced(const GLint* v)
{
	MYLOG("glTexCoord2iv");
	tracer._glTexCoord2iv(v);
}
void glTexCoord2s_Traced(GLshort s, GLshort t)
{
	MYLOG("glTexCoord2s");
	tracer._glTexCoord2s(s, t);
}
void glTexCoord2sv_Traced(const GLshort* v)
{
	MYLOG("glTexCoord2sv");
	tracer._glTexCoord2sv(v);
}
void glTexCoord3d_Traced(GLdouble s, GLdouble t, GLdouble r)
{
	MYLOG("glTexCoord3d");
	tracer._glTexCoord3d(s, t, r);
}
void glTexCoord3dv_Traced(const GLdouble* v)
{
	MYLOG("glTexCoord3dv");
	tracer._glTexCoord3dv(v);
}
void glTexCoord3f_Traced(GLfloat s, GLfloat t, GLfloat r)
{
	MYLOG("glTexCoord3f");
	tracer._glTexCoord3f(s, t, r);
}
void glTexCoord3fv_Traced(const GLfloat* v)
{
	MYLOG("glTexCoord3fv");
	tracer._glTexCoord3fv(v);
}
void glTexCoord3i_Traced(GLint s, GLint t, GLint r)
{
	MYLOG("glTexCoord3i");
	tracer._glTexCoord3i(s, t, r);
}
void glTexCoord3iv_Traced(const GLint* v)
{
	MYLOG("glTexCoord3iv");
	tracer._glTexCoord3iv(v);
}
void glTexCoord3s_Traced(GLshort s, GLshort t, GLshort r)
{
	MYLOG("glTexCoord3s");
	tracer._glTexCoord3s(s, t, r);
}
void glTexCoord3sv_Traced(const GLshort* v)
{
	MYLOG("glTexCoord3sv");
	tracer._glTexCoord3sv(v);
}
void glTexCoord4d_Traced(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
	MYLOG("glTexCoord4d");
	tracer._glTexCoord4d(s, t, r, q);
}
void glTexCoord4dv_Traced(const GLdouble* v)
{
	MYLOG("glTexCoord4dv");
	tracer._glTexCoord4dv(v);
}
void glTexCoord4f_Traced(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
	MYLOG("glTexCoord4f");
	tracer._glTexCoord4f(s, t, r, q);
}
void glTexCoord4fv_Traced(const GLfloat* v)
{
	MYLOG("glTexCoord4fv");
	tracer._glTexCoord4fv(v);
}
void glTexCoord4i_Traced(GLint s, GLint t, GLint r, GLint q)
{
	MYLOG("glTexCoord4i");
	tracer._glTexCoord4i(s, t, r, q);
}
void glTexCoord4iv_Traced(const GLint* v)
{
	MYLOG("glTexCoord4iv");
	tracer._glTexCoord4iv(v);
}
void glTexCoord4s_Traced(GLshort s, GLshort t, GLshort r, GLshort q)
{
	MYLOG("glTexCoord4s");
	tracer._glTexCoord4s(s, t, r, q);
}
void glTexCoord4sv_Traced(const GLshort* v)
{
	MYLOG("glTexCoord4sv");
	tracer._glTexCoord4sv(v);
}
void glVertex2d_Traced(GLdouble x, GLdouble y)
{
	MYLOG("glVertex2d");
	tracer._glVertex2d(x, y);
}
void glVertex2dv_Traced(const GLdouble* v)
{
	MYLOG("glVertex2dv");
	tracer._glVertex2dv(v);
}
void glVertex2f_Traced(GLfloat x, GLfloat y)
{
	MYLOG("glVertex2f");
	tracer._glVertex2f(x, y);
}
void glVertex2fv_Traced(const GLfloat* v)
{
	MYLOG("glVertex2fv");
	tracer._glVertex2fv(v);
}
void glVertex2i_Traced(GLint x, GLint y)
{
	MYLOG("glVertex2i");
	tracer._glVertex2i(x, y);
}
void glVertex2iv_Traced(const GLint* v)
{
	MYLOG("glVertex2iv");
	tracer._glVertex2iv(v);
}
void glVertex2s_Traced(GLshort x, GLshort y)
{
	MYLOG("glVertex2s");
	tracer._glVertex2s(x, y);
}
void glVertex2sv_Traced(const GLshort* v)
{
	MYLOG("glVertex2sv");
	tracer._glVertex2sv(v);
}
void glVertex3d_Traced(GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glVertex3d");
	tracer._glVertex3d(x, y, z);
}
void glVertex3dv_Traced(const GLdouble* v)
{
	MYLOG("glVertex3dv");
	tracer._glVertex3dv(v);
}
void glVertex3f_Traced(GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glVertex3f");
	tracer._glVertex3f(x, y, z);
}
void glVertex3fv_Traced(const GLfloat* v)
{
	MYLOG("glVertex3fv");
	tracer._glVertex3fv(v);
}
void glVertex3i_Traced(GLint x, GLint y, GLint z)
{
	MYLOG("glVertex3i");
	tracer._glVertex3i(x, y, z);
}
void glVertex3iv_Traced(const GLint* v)
{
	MYLOG("glVertex3iv");
	tracer._glVertex3iv(v);
}
void glVertex3s_Traced(GLshort x, GLshort y, GLshort z)
{
	MYLOG("glVertex3s");
	tracer._glVertex3s(x, y, z);
}
void glVertex3sv_Traced(const GLshort* v)
{
	MYLOG("glVertex3sv");
	tracer._glVertex3sv(v);
}
void glVertex4d_Traced(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	MYLOG("glVertex4d");
	tracer._glVertex4d(x, y, z, w);
}
void glVertex4dv_Traced(const GLdouble* v)
{
	MYLOG("glVertex4dv");
	tracer._glVertex4dv(v);
}
void glVertex4f_Traced(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	MYLOG("glVertex4f");
	tracer._glVertex4f(x, y, z, w);
}
void glVertex4fv_Traced(const GLfloat* v)
{
	MYLOG("glVertex4fv");
	tracer._glVertex4fv(v);
}
void glVertex4i_Traced(GLint x, GLint y, GLint z, GLint w)
{
	MYLOG("glVertex4i");
	tracer._glVertex4i(x, y, z, w);
}
void glVertex4iv_Traced(const GLint* v)
{
	MYLOG("glVertex4iv");
	tracer._glVertex4iv(v);
}
void glVertex4s_Traced(GLshort x, GLshort y, GLshort z, GLshort w)
{
	MYLOG("glVertex4s");
	tracer._glVertex4s(x, y, z, w);
}
void glVertex4sv_Traced(const GLshort* v)
{
	MYLOG("glVertex4sv");
	tracer._glVertex4sv(v);
}
void glClipPlane_Traced(GLenum plane, const GLdouble* equation)
{
	MYLOG("glClipPlane");
	tracer._glClipPlane(plane, equation);
}
void glColorMaterial_Traced(GLenum face, GLenum mode)
{
	MYLOG("glColorMaterial");
	tracer._glColorMaterial(face, mode);
}
void glFogf_Traced(GLenum pname, GLfloat param)
{
	MYLOG("glFogf");
	tracer._glFogf(pname, param);
}
void glFogfv_Traced(GLenum pname, const GLfloat* params)
{
	MYLOG("glFogfv");
	tracer._glFogfv(pname, params);
}
void glFogi_Traced(GLenum pname, GLint param)
{
	MYLOG("glFogi");
	tracer._glFogi(pname, param);
}
void glFogiv_Traced(GLenum pname, const GLint* params)
{
	MYLOG("glFogiv");
	tracer._glFogiv(pname, params);
}
void glLightf_Traced(GLenum light, GLenum pname, GLfloat param)
{
	MYLOG("glLightf");
	tracer._glLightf(light, pname, param);
}
void glLightfv_Traced(GLenum light, GLenum pname, const GLfloat* params)
{
	MYLOG("glLightfv");
	tracer._glLightfv(light, pname, params);
}
void glLighti_Traced(GLenum light, GLenum pname, GLint param)
{
	MYLOG("glLighti");
	tracer._glLighti(light, pname, param);
}
void glLightiv_Traced(GLenum light, GLenum pname, const GLint* params)
{
	MYLOG("glLightiv");
	tracer._glLightiv(light, pname, params);
}
void glLightModelf_Traced(GLenum pname, GLfloat param)
{
	MYLOG("glLightModelf");
	tracer._glLightModelf(pname, param);
}
void glLightModelfv_Traced(GLenum pname, const GLfloat* params)
{
	MYLOG("glLightModelfv");
	tracer._glLightModelfv(pname, params);
}
void glLightModeli_Traced(GLenum pname, GLint param)
{
	MYLOG("glLightModeli");
	tracer._glLightModeli(pname, param);
}
void glLightModeliv_Traced(GLenum pname, const GLint* params)
{
	MYLOG("glLightModeliv");
	tracer._glLightModeliv(pname, params);
}
void glLineStipple_Traced(GLint factor, GLushort pattern)
{
	MYLOG("glLineStipple");
	tracer._glLineStipple(factor, pattern);
}
void glMaterialf_Traced(GLenum face, GLenum pname, GLfloat param)
{
	MYLOG("glMaterialf");
	tracer._glMaterialf(face, pname, param);
}
void glMaterialfv_Traced(GLenum face, GLenum pname, const GLfloat* params)
{
	MYLOG("glMaterialfv");
	tracer._glMaterialfv(face, pname, params);
}
void glMateriali_Traced(GLenum face, GLenum pname, GLint param)
{
	MYLOG("glMateriali");
	tracer._glMateriali(face, pname, param);
}
void glMaterialiv_Traced(GLenum face, GLenum pname, const GLint* params)
{
	MYLOG("glMaterialiv");
	tracer._glMaterialiv(face, pname, params);
}
void glPolygonStipple_Traced(const GLubyte* mask)
{
	MYLOG("glPolygonStipple");
	tracer._glPolygonStipple(mask);
}
void glShadeModel_Traced(GLenum mode)
{
	MYLOG("glShadeModel");
	tracer._glShadeModel(mode);
}
void glTexEnvf_Traced(GLenum target, GLenum pname, GLfloat param)
{
	MYLOG("glTexEnvf");
	tracer._glTexEnvf(target, pname, param);
}
void glTexEnvfv_Traced(GLenum target, GLenum pname, const GLfloat* params)
{
	MYLOG("glTexEnvfv");
	tracer._glTexEnvfv(target, pname, params);
}
void glTexEnvi_Traced(GLenum target, GLenum pname, GLint param)
{
	MYLOG("glTexEnvi");
	tracer._glTexEnvi(target, pname, param);
}
void glTexEnviv_Traced(GLenum target, GLenum pname, const GLint* params)
{
	MYLOG("glTexEnviv");
	tracer._glTexEnviv(target, pname, params);
}
void glTexGend_Traced(GLenum coord, GLenum pname, GLdouble param)
{
	MYLOG("glTexGend");
	tracer._glTexGend(coord, pname, param);
}
void glTexGendv_Traced(GLenum coord, GLenum pname, const GLdouble* params)
{
	MYLOG("glTexGendv");
	tracer._glTexGendv(coord, pname, params);
}
void glTexGenf_Traced(GLenum coord, GLenum pname, GLfloat param)
{
	MYLOG("glTexGenf");
	tracer._glTexGenf(coord, pname, param);
}
void glTexGenfv_Traced(GLenum coord, GLenum pname, const GLfloat* params)
{
	MYLOG("glTexGenfv");
	tracer._glTexGenfv(coord, pname, params);
}
void glTexGeni_Traced(GLenum coord, GLenum pname, GLint param)
{
	MYLOG("glTexGeni");
	tracer._glTexGeni(coord, pname, param);
}
void glTexGeniv_Traced(GLenum coord, GLenum pname, const GLint* params)
{
	MYLOG("glTexGeniv");
	tracer._glTexGeniv(coord, pname, params);
}
void glFeedbackBuffer_Traced(GLsizei size, GLenum type, GLfloat* buffer)
{
	MYLOG("glFeedbackBuffer");
	tracer._glFeedbackBuffer(size, type, buffer);
}
void glSelectBuffer_Traced(GLsizei size, GLuint* buffer)
{
	MYLOG("glSelectBuffer");
	tracer._glSelectBuffer(size, buffer);
}
GLint glRenderMode_Traced(GLenum mode)
{
	MYLOG("glRenderMode");
	return tracer._glRenderMode(mode);
}
void glInitNames_Traced()
{
	MYLOG("glInitNames");
	tracer._glInitNames();
}
void glLoadName_Traced(GLuint name)
{
	MYLOG("glLoadName");
	tracer._glLoadName(name);
}
void glPassThrough_Traced(GLfloat token)
{
	MYLOG("glPassThrough");
	tracer._glPassThrough(token);
}
void glPopName_Traced()
{
	MYLOG("glPopName");
	tracer._glPopName();
}
void glPushName_Traced(GLuint name)
{
	MYLOG("glPushName");
	tracer._glPushName(name);
}
void glClearAccum_Traced(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	MYLOG("glClearAccum");
	tracer._glClearAccum(red, green, blue, alpha);
}
void glClearIndex_Traced(GLfloat c)
{
	MYLOG("glClearIndex");
	tracer._glClearIndex(c);
}
void glIndexMask_Traced(GLuint mask)
{
	MYLOG("glIndexMask");
	tracer._glIndexMask(mask);
}
void glAccum_Traced(GLenum op, GLfloat value)
{
	MYLOG("glAccum");
	tracer._glAccum(op, value);
}
void glPopAttrib_Traced()
{
	MYLOG("glPopAttrib");
	tracer._glPopAttrib();
}
void glPushAttrib_Traced(GLbitfield mask)
{
	MYLOG("glPushAttrib");
	tracer._glPushAttrib(mask);
}
void glMap1d_Traced(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points)
{
	MYLOG("glMap1d");
	tracer._glMap1d(target, u1, u2, stride, order, points);
}
void glMap1f_Traced(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points)
{
	MYLOG("glMap1f");
	tracer._glMap1f(target, u1, u2, stride, order, points);
}
void glMap2d_Traced(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points)
{
	MYLOG("glMap2d");
	tracer._glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void glMap2f_Traced(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points)
{
	MYLOG("glMap2f");
	tracer._glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
void glMapGrid1d_Traced(GLint un, GLdouble u1, GLdouble u2)
{
	MYLOG("glMapGrid1d");
	tracer._glMapGrid1d(un, u1, u2);
}
void glMapGrid1f_Traced(GLint un, GLfloat u1, GLfloat u2)
{
	MYLOG("glMapGrid1f");
	tracer._glMapGrid1f(un, u1, u2);
}
void glMapGrid2d_Traced(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
	MYLOG("glMapGrid2d");
	tracer._glMapGrid2d(un, u1, u2, vn, v1, v2);
}
void glMapGrid2f_Traced(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
	MYLOG("glMapGrid2f");
	tracer._glMapGrid2f(un, u1, u2, vn, v1, v2);
}
void glEvalCoord1d_Traced(GLdouble u)
{
	MYLOG("glEvalCoord1d");
	tracer._glEvalCoord1d(u);
}
void glEvalCoord1dv_Traced(const GLdouble* u)
{
	MYLOG("glEvalCoord1dv");
	tracer._glEvalCoord1dv(u);
}
void glEvalCoord1f_Traced(GLfloat u)
{
	MYLOG("glEvalCoord1f");
	tracer._glEvalCoord1f(u);
}
void glEvalCoord1fv_Traced(const GLfloat* u)
{
	MYLOG("glEvalCoord1fv");
	tracer._glEvalCoord1fv(u);
}
void glEvalCoord2d_Traced(GLdouble u, GLdouble v)
{
	MYLOG("glEvalCoord2d");
	tracer._glEvalCoord2d(u, v);
}
void glEvalCoord2dv_Traced(const GLdouble* u)
{
	MYLOG("glEvalCoord2dv");
	tracer._glEvalCoord2dv(u);
}
void glEvalCoord2f_Traced(GLfloat u, GLfloat v)
{
	MYLOG("glEvalCoord2f");
	tracer._glEvalCoord2f(u, v);
}
void glEvalCoord2fv_Traced(const GLfloat* u)
{
	MYLOG("glEvalCoord2fv");
	tracer._glEvalCoord2fv(u);
}
void glEvalMesh1_Traced(GLenum mode, GLint i1, GLint i2)
{
	MYLOG("glEvalMesh1");
	tracer._glEvalMesh1(mode, i1, i2);
}
void glEvalPoint1_Traced(GLint i)
{
	MYLOG("glEvalPoint1");
	tracer._glEvalPoint1(i);
}
void glEvalMesh2_Traced(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
	MYLOG("glEvalMesh2");
	tracer._glEvalMesh2(mode, i1, i2, j1, j2);
}
void glEvalPoint2_Traced(GLint i, GLint j)
{
	MYLOG("glEvalPoint2");
	tracer._glEvalPoint2(i, j);
}
void glAlphaFunc_Traced(GLenum func, GLfloat ref)
{
	MYLOG("glAlphaFunc");
	tracer._glAlphaFunc(func, ref);
}
void glPixelZoom_Traced(GLfloat xfactor, GLfloat yfactor)
{
	MYLOG("glPixelZoom");
	tracer._glPixelZoom(xfactor, yfactor);
}
void glPixelTransferf_Traced(GLenum pname, GLfloat param)
{
	MYLOG("glPixelTransferf");
	tracer._glPixelTransferf(pname, param);
}
void glPixelTransferi_Traced(GLenum pname, GLint param)
{
	MYLOG("glPixelTransferi");
	tracer._glPixelTransferi(pname, param);
}
void glPixelMapfv_Traced(GLenum map, GLsizei mapsize, const GLfloat* values)
{
	MYLOG("glPixelMapfv");
	tracer._glPixelMapfv(map, mapsize, values);
}
void glPixelMapuiv_Traced(GLenum map, GLsizei mapsize, const GLuint* values)
{
	MYLOG("glPixelMapuiv");
	tracer._glPixelMapuiv(map, mapsize, values);
}
void glPixelMapusv_Traced(GLenum map, GLsizei mapsize, const GLushort* values)
{
	MYLOG("glPixelMapusv");
	tracer._glPixelMapusv(map, mapsize, values);
}
void glCopyPixels_Traced(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
	MYLOG("glCopyPixels");
	tracer._glCopyPixels(x, y, width, height, type);
}
void glDrawPixels_Traced(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glDrawPixels");
	tracer._glDrawPixels(width, height, format, type, pixels);
}
void glGetClipPlane_Traced(GLenum plane, GLdouble* equation)
{
	MYLOG("glGetClipPlane");
	tracer._glGetClipPlane(plane, equation);
}
void glGetLightfv_Traced(GLenum light, GLenum pname, GLfloat* params)
{
	MYLOG("glGetLightfv");
	tracer._glGetLightfv(light, pname, params);
}
void glGetLightiv_Traced(GLenum light, GLenum pname, GLint* params)
{
	MYLOG("glGetLightiv");
	tracer._glGetLightiv(light, pname, params);
}
void glGetMapdv_Traced(GLenum target, GLenum query, GLdouble* v)
{
	MYLOG("glGetMapdv");
	tracer._glGetMapdv(target, query, v);
}
void glGetMapfv_Traced(GLenum target, GLenum query, GLfloat* v)
{
	MYLOG("glGetMapfv");
	tracer._glGetMapfv(target, query, v);
}
void glGetMapiv_Traced(GLenum target, GLenum query, GLint* v)
{
	MYLOG("glGetMapiv");
	tracer._glGetMapiv(target, query, v);
}
void glGetMaterialfv_Traced(GLenum face, GLenum pname, GLfloat* params)
{
	MYLOG("glGetMaterialfv");
	tracer._glGetMaterialfv(face, pname, params);
}
void glGetMaterialiv_Traced(GLenum face, GLenum pname, GLint* params)
{
	MYLOG("glGetMaterialiv");
	tracer._glGetMaterialiv(face, pname, params);
}
void glGetPixelMapfv_Traced(GLenum map, GLfloat* values)
{
	MYLOG("glGetPixelMapfv");
	tracer._glGetPixelMapfv(map, values);
}
void glGetPixelMapuiv_Traced(GLenum map, GLuint* values)
{
	MYLOG("glGetPixelMapuiv");
	tracer._glGetPixelMapuiv(map, values);
}
void glGetPixelMapusv_Traced(GLenum map, GLushort* values)
{
	MYLOG("glGetPixelMapusv");
	tracer._glGetPixelMapusv(map, values);
}
void glGetPolygonStipple_Traced(GLubyte* mask)
{
	MYLOG("glGetPolygonStipple");
	tracer._glGetPolygonStipple(mask);
}
void glGetTexEnvfv_Traced(GLenum target, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTexEnvfv");
	tracer._glGetTexEnvfv(target, pname, params);
}
void glGetTexEnviv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetTexEnviv");
	tracer._glGetTexEnviv(target, pname, params);
}
void glGetTexGendv_Traced(GLenum coord, GLenum pname, GLdouble* params)
{
	MYLOG("glGetTexGendv");
	tracer._glGetTexGendv(coord, pname, params);
}
void glGetTexGenfv_Traced(GLenum coord, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTexGenfv");
	tracer._glGetTexGenfv(coord, pname, params);
}
void glGetTexGeniv_Traced(GLenum coord, GLenum pname, GLint* params)
{
	MYLOG("glGetTexGeniv");
	tracer._glGetTexGeniv(coord, pname, params);
}
GLboolean glIsList_Traced(GLuint list)
{
	MYLOG("glIsList");
	return tracer._glIsList(list);
}
void glFrustum_Traced(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	MYLOG("glFrustum");
	tracer._glFrustum(left, right, bottom, top, zNear, zFar);
}
void glLoadIdentity_Traced()
{
	MYLOG("glLoadIdentity");
	tracer._glLoadIdentity();
}
void glLoadMatrixf_Traced(const GLfloat* m)
{
	MYLOG("glLoadMatrixf");
	tracer._glLoadMatrixf(m);
}
void glLoadMatrixd_Traced(const GLdouble* m)
{
	MYLOG("glLoadMatrixd");
	tracer._glLoadMatrixd(m);
}
void glMatrixMode_Traced(GLenum mode)
{
	MYLOG("glMatrixMode");
	tracer._glMatrixMode(mode);
}
void glMultMatrixf_Traced(const GLfloat* m)
{
	MYLOG("glMultMatrixf");
	tracer._glMultMatrixf(m);
}
void glMultMatrixd_Traced(const GLdouble* m)
{
	MYLOG("glMultMatrixd");
	tracer._glMultMatrixd(m);
}
void glOrtho_Traced(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
	MYLOG("glOrtho");
	tracer._glOrtho(left, right, bottom, top, zNear, zFar);
}
void glPopMatrix_Traced()
{
	MYLOG("glPopMatrix");
	tracer._glPopMatrix();
}
void glPushMatrix_Traced()
{
	MYLOG("glPushMatrix");
	tracer._glPushMatrix();
}
void glRotated_Traced(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glRotated");
	tracer._glRotated(angle, x, y, z);
}
void glRotatef_Traced(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glRotatef");
	tracer._glRotatef(angle, x, y, z);
}
void glScaled_Traced(GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glScaled");
	tracer._glScaled(x, y, z);
}
void glScalef_Traced(GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glScalef");
	tracer._glScalef(x, y, z);
}
void glTranslated_Traced(GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glTranslated");
	tracer._glTranslated(x, y, z);
}
void glTranslatef_Traced(GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glTranslatef");
	tracer._glTranslatef(x, y, z);
}
void glDrawArrays_Traced(GLenum mode, GLint first, GLsizei count)
{
	MYLOG("glDrawArrays");
	tracer._glDrawArrays(mode, first, count);
}
void glDrawElements_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices)
{
	MYLOG("glDrawElements");
	tracer._glDrawElements(mode, count, type, indices);
}
void glGetPointerv_Traced(GLenum pname, void** params)
{
	MYLOG("glGetPointerv");
	tracer._glGetPointerv(pname, params);
}
void glPolygonOffset_Traced(GLfloat factor, GLfloat units)
{
	MYLOG("glPolygonOffset");
	tracer._glPolygonOffset(factor, units);
}
void glCopyTexImage1D_Traced(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
	MYLOG("glCopyTexImage1D");
	tracer._glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}
void glCopyTexImage2D_Traced(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
	MYLOG("glCopyTexImage2D");
	tracer._glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}
void glCopyTexSubImage1D_Traced(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	MYLOG("glCopyTexSubImage1D");
	tracer._glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}
void glCopyTexSubImage2D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glCopyTexSubImage2D");
	tracer._glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}
void glTexSubImage1D_Traced(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexSubImage1D");
	tracer._glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}
void glTexSubImage2D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexSubImage2D");
	tracer._glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
void glBindTexture_Traced(GLenum target, GLuint texture)
{
	MYLOG("glBindTexture");
	tracer._glBindTexture(target, texture);
}
void glDeleteTextures_Traced(GLsizei n, const GLuint* textures)
{
	MYLOG("glDeleteTextures");
	tracer._glDeleteTextures(n, textures);
}
void glGenTextures_Traced(GLsizei n, GLuint* textures)
{
	MYLOG("glGenTextures");
	tracer._glGenTextures(n, textures);
}
GLboolean glIsTexture_Traced(GLuint texture)
{
	MYLOG("glIsTexture");
	return tracer._glIsTexture(texture);
}
void glArrayElement_Traced(GLint i)
{
	MYLOG("glArrayElement");
	tracer._glArrayElement(i);
}
void glColorPointer_Traced(GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glColorPointer");
	tracer._glColorPointer(size, type, stride, pointer);
}
void glDisableClientState_Traced(GLenum array)
{
	MYLOG("glDisableClientState");
	tracer._glDisableClientState(array);
}
void glEdgeFlagPointer_Traced(GLsizei stride, const void* pointer)
{
	MYLOG("glEdgeFlagPointer");
	tracer._glEdgeFlagPointer(stride, pointer);
}
void glEnableClientState_Traced(GLenum array)
{
	MYLOG("glEnableClientState");
	tracer._glEnableClientState(array);
}
void glIndexPointer_Traced(GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glIndexPointer");
	tracer._glIndexPointer(type, stride, pointer);
}
void glInterleavedArrays_Traced(GLenum format, GLsizei stride, const void* pointer)
{
	MYLOG("glInterleavedArrays");
	tracer._glInterleavedArrays(format, stride, pointer);
}
void glNormalPointer_Traced(GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glNormalPointer");
	tracer._glNormalPointer(type, stride, pointer);
}
void glTexCoordPointer_Traced(GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glTexCoordPointer");
	tracer._glTexCoordPointer(size, type, stride, pointer);
}
void glVertexPointer_Traced(GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glVertexPointer");
	tracer._glVertexPointer(size, type, stride, pointer);
}
GLboolean glAreTexturesResident_Traced(GLsizei n, const GLuint* textures, GLboolean* residences)
{
	MYLOG("glAreTexturesResident");
	return tracer._glAreTexturesResident(n, textures, residences);
}
void glPrioritizeTextures_Traced(GLsizei n, const GLuint* textures, const GLfloat* priorities)
{
	MYLOG("glPrioritizeTextures");
	tracer._glPrioritizeTextures(n, textures, priorities);
}
void glIndexub_Traced(GLubyte c)
{
	MYLOG("glIndexub");
	tracer._glIndexub(c);
}
void glIndexubv_Traced(const GLubyte* c)
{
	MYLOG("glIndexubv");
	tracer._glIndexubv(c);
}
void glPopClientAttrib_Traced()
{
	MYLOG("glPopClientAttrib");
	tracer._glPopClientAttrib();
}
void glPushClientAttrib_Traced(GLbitfield mask)
{
	MYLOG("glPushClientAttrib");
	tracer._glPushClientAttrib(mask);
}
void glDrawRangeElements_Traced(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices)
{
	MYLOG("glDrawRangeElements");
	tracer._glDrawRangeElements(mode, start, end, count, type, indices);
}
void glTexImage3D_Traced(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexImage3D");
	tracer._glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}
void glTexSubImage3D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTexSubImage3D");
	tracer._glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void glCopyTexSubImage3D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glCopyTexSubImage3D");
	tracer._glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void glActiveTexture_Traced(GLenum texture)
{
	MYLOG("glActiveTexture");
	tracer._glActiveTexture(texture);
}
void glSampleCoverage_Traced(GLfloat value, GLboolean invert)
{
	MYLOG("glSampleCoverage");
	tracer._glSampleCoverage(value, invert);
}
void glCompressedTexImage3D_Traced(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexImage3D");
	tracer._glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}
void glCompressedTexImage2D_Traced(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexImage2D");
	tracer._glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}
void glCompressedTexImage1D_Traced(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexImage1D");
	tracer._glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}
void glCompressedTexSubImage3D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexSubImage3D");
	tracer._glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void glCompressedTexSubImage2D_Traced(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexSubImage2D");
	tracer._glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void glCompressedTexSubImage1D_Traced(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTexSubImage1D");
	tracer._glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}
void glGetCompressedTexImage_Traced(GLenum target, GLint level, void* img)
{
	MYLOG("glGetCompressedTexImage");
	tracer._glGetCompressedTexImage(target, level, img);
}
void glClientActiveTexture_Traced(GLenum texture)
{
	MYLOG("glClientActiveTexture");
	tracer._glClientActiveTexture(texture);
}
void glMultiTexCoord1d_Traced(GLenum target, GLdouble s)
{
	MYLOG("glMultiTexCoord1d");
	tracer._glMultiTexCoord1d(target, s);
}
void glMultiTexCoord1dv_Traced(GLenum target, const GLdouble* v)
{
	MYLOG("glMultiTexCoord1dv");
	tracer._glMultiTexCoord1dv(target, v);
}
void glMultiTexCoord1f_Traced(GLenum target, GLfloat s)
{
	MYLOG("glMultiTexCoord1f");
	tracer._glMultiTexCoord1f(target, s);
}
void glMultiTexCoord1fv_Traced(GLenum target, const GLfloat* v)
{
	MYLOG("glMultiTexCoord1fv");
	tracer._glMultiTexCoord1fv(target, v);
}
void glMultiTexCoord1i_Traced(GLenum target, GLint s)
{
	MYLOG("glMultiTexCoord1i");
	tracer._glMultiTexCoord1i(target, s);
}
void glMultiTexCoord1iv_Traced(GLenum target, const GLint* v)
{
	MYLOG("glMultiTexCoord1iv");
	tracer._glMultiTexCoord1iv(target, v);
}
void glMultiTexCoord1s_Traced(GLenum target, GLshort s)
{
	MYLOG("glMultiTexCoord1s");
	tracer._glMultiTexCoord1s(target, s);
}
void glMultiTexCoord1sv_Traced(GLenum target, const GLshort* v)
{
	MYLOG("glMultiTexCoord1sv");
	tracer._glMultiTexCoord1sv(target, v);
}
void glMultiTexCoord2d_Traced(GLenum target, GLdouble s, GLdouble t)
{
	MYLOG("glMultiTexCoord2d");
	tracer._glMultiTexCoord2d(target, s, t);
}
void glMultiTexCoord2dv_Traced(GLenum target, const GLdouble* v)
{
	MYLOG("glMultiTexCoord2dv");
	tracer._glMultiTexCoord2dv(target, v);
}
void glMultiTexCoord2f_Traced(GLenum target, GLfloat s, GLfloat t)
{
	MYLOG("glMultiTexCoord2f");
	tracer._glMultiTexCoord2f(target, s, t);
}
void glMultiTexCoord2fv_Traced(GLenum target, const GLfloat* v)
{
	MYLOG("glMultiTexCoord2fv");
	tracer._glMultiTexCoord2fv(target, v);
}
void glMultiTexCoord2i_Traced(GLenum target, GLint s, GLint t)
{
	MYLOG("glMultiTexCoord2i");
	tracer._glMultiTexCoord2i(target, s, t);
}
void glMultiTexCoord2iv_Traced(GLenum target, const GLint* v)
{
	MYLOG("glMultiTexCoord2iv");
	tracer._glMultiTexCoord2iv(target, v);
}
void glMultiTexCoord2s_Traced(GLenum target, GLshort s, GLshort t)
{
	MYLOG("glMultiTexCoord2s");
	tracer._glMultiTexCoord2s(target, s, t);
}
void glMultiTexCoord2sv_Traced(GLenum target, const GLshort* v)
{
	MYLOG("glMultiTexCoord2sv");
	tracer._glMultiTexCoord2sv(target, v);
}
void glMultiTexCoord3d_Traced(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
	MYLOG("glMultiTexCoord3d");
	tracer._glMultiTexCoord3d(target, s, t, r);
}
void glMultiTexCoord3dv_Traced(GLenum target, const GLdouble* v)
{
	MYLOG("glMultiTexCoord3dv");
	tracer._glMultiTexCoord3dv(target, v);
}
void glMultiTexCoord3f_Traced(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
	MYLOG("glMultiTexCoord3f");
	tracer._glMultiTexCoord3f(target, s, t, r);
}
void glMultiTexCoord3fv_Traced(GLenum target, const GLfloat* v)
{
	MYLOG("glMultiTexCoord3fv");
	tracer._glMultiTexCoord3fv(target, v);
}
void glMultiTexCoord3i_Traced(GLenum target, GLint s, GLint t, GLint r)
{
	MYLOG("glMultiTexCoord3i");
	tracer._glMultiTexCoord3i(target, s, t, r);
}
void glMultiTexCoord3iv_Traced(GLenum target, const GLint* v)
{
	MYLOG("glMultiTexCoord3iv");
	tracer._glMultiTexCoord3iv(target, v);
}
void glMultiTexCoord3s_Traced(GLenum target, GLshort s, GLshort t, GLshort r)
{
	MYLOG("glMultiTexCoord3s");
	tracer._glMultiTexCoord3s(target, s, t, r);
}
void glMultiTexCoord3sv_Traced(GLenum target, const GLshort* v)
{
	MYLOG("glMultiTexCoord3sv");
	tracer._glMultiTexCoord3sv(target, v);
}
void glMultiTexCoord4d_Traced(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
	MYLOG("glMultiTexCoord4d");
	tracer._glMultiTexCoord4d(target, s, t, r, q);
}
void glMultiTexCoord4dv_Traced(GLenum target, const GLdouble* v)
{
	MYLOG("glMultiTexCoord4dv");
	tracer._glMultiTexCoord4dv(target, v);
}
void glMultiTexCoord4f_Traced(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
	MYLOG("glMultiTexCoord4f");
	tracer._glMultiTexCoord4f(target, s, t, r, q);
}
void glMultiTexCoord4fv_Traced(GLenum target, const GLfloat* v)
{
	MYLOG("glMultiTexCoord4fv");
	tracer._glMultiTexCoord4fv(target, v);
}
void glMultiTexCoord4i_Traced(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
	MYLOG("glMultiTexCoord4i");
	tracer._glMultiTexCoord4i(target, s, t, r, q);
}
void glMultiTexCoord4iv_Traced(GLenum target, const GLint* v)
{
	MYLOG("glMultiTexCoord4iv");
	tracer._glMultiTexCoord4iv(target, v);
}
void glMultiTexCoord4s_Traced(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
	MYLOG("glMultiTexCoord4s");
	tracer._glMultiTexCoord4s(target, s, t, r, q);
}
void glMultiTexCoord4sv_Traced(GLenum target, const GLshort* v)
{
	MYLOG("glMultiTexCoord4sv");
	tracer._glMultiTexCoord4sv(target, v);
}
void glLoadTransposeMatrixf_Traced(const GLfloat* m)
{
	MYLOG("glLoadTransposeMatrixf");
	tracer._glLoadTransposeMatrixf(m);
}
void glLoadTransposeMatrixd_Traced(const GLdouble* m)
{
	MYLOG("glLoadTransposeMatrixd");
	tracer._glLoadTransposeMatrixd(m);
}
void glMultTransposeMatrixf_Traced(const GLfloat* m)
{
	MYLOG("glMultTransposeMatrixf");
	tracer._glMultTransposeMatrixf(m);
}
void glMultTransposeMatrixd_Traced(const GLdouble* m)
{
	MYLOG("glMultTransposeMatrixd");
	tracer._glMultTransposeMatrixd(m);
}
void glBlendFuncSeparate_Traced(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
	MYLOG("glBlendFuncSeparate");
	tracer._glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}
void glMultiDrawArrays_Traced(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount)
{
	MYLOG("glMultiDrawArrays");
	tracer._glMultiDrawArrays(mode, first, count, drawcount);
}
void glMultiDrawElements_Traced(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount)
{
	MYLOG("glMultiDrawElements");
	tracer._glMultiDrawElements(mode, count, type, indices, drawcount);
}
void glPointParameterf_Traced(GLenum pname, GLfloat param)
{
	MYLOG("glPointParameterf");
	tracer._glPointParameterf(pname, param);
}
void glPointParameterfv_Traced(GLenum pname, const GLfloat* params)
{
	MYLOG("glPointParameterfv");
	tracer._glPointParameterfv(pname, params);
}
void glPointParameteri_Traced(GLenum pname, GLint param)
{
	MYLOG("glPointParameteri");
	tracer._glPointParameteri(pname, param);
}
void glPointParameteriv_Traced(GLenum pname, const GLint* params)
{
	MYLOG("glPointParameteriv");
	tracer._glPointParameteriv(pname, params);
}
void glFogCoordf_Traced(GLfloat coord)
{
	MYLOG("glFogCoordf");
	tracer._glFogCoordf(coord);
}
void glFogCoordfv_Traced(const GLfloat* coord)
{
	MYLOG("glFogCoordfv");
	tracer._glFogCoordfv(coord);
}
void glFogCoordd_Traced(GLdouble coord)
{
	MYLOG("glFogCoordd");
	tracer._glFogCoordd(coord);
}
void glFogCoorddv_Traced(const GLdouble* coord)
{
	MYLOG("glFogCoorddv");
	tracer._glFogCoorddv(coord);
}
void glFogCoordPointer_Traced(GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glFogCoordPointer");
	tracer._glFogCoordPointer(type, stride, pointer);
}
void glSecondaryColor3b_Traced(GLbyte red, GLbyte green, GLbyte blue)
{
	MYLOG("glSecondaryColor3b");
	tracer._glSecondaryColor3b(red, green, blue);
}
void glSecondaryColor3bv_Traced(const GLbyte* v)
{
	MYLOG("glSecondaryColor3bv");
	tracer._glSecondaryColor3bv(v);
}
void glSecondaryColor3d_Traced(GLdouble red, GLdouble green, GLdouble blue)
{
	MYLOG("glSecondaryColor3d");
	tracer._glSecondaryColor3d(red, green, blue);
}
void glSecondaryColor3dv_Traced(const GLdouble* v)
{
	MYLOG("glSecondaryColor3dv");
	tracer._glSecondaryColor3dv(v);
}
void glSecondaryColor3f_Traced(GLfloat red, GLfloat green, GLfloat blue)
{
	MYLOG("glSecondaryColor3f");
	tracer._glSecondaryColor3f(red, green, blue);
}
void glSecondaryColor3fv_Traced(const GLfloat* v)
{
	MYLOG("glSecondaryColor3fv");
	tracer._glSecondaryColor3fv(v);
}
void glSecondaryColor3i_Traced(GLint red, GLint green, GLint blue)
{
	MYLOG("glSecondaryColor3i");
	tracer._glSecondaryColor3i(red, green, blue);
}
void glSecondaryColor3iv_Traced(const GLint* v)
{
	MYLOG("glSecondaryColor3iv");
	tracer._glSecondaryColor3iv(v);
}
void glSecondaryColor3s_Traced(GLshort red, GLshort green, GLshort blue)
{
	MYLOG("glSecondaryColor3s");
	tracer._glSecondaryColor3s(red, green, blue);
}
void glSecondaryColor3sv_Traced(const GLshort* v)
{
	MYLOG("glSecondaryColor3sv");
	tracer._glSecondaryColor3sv(v);
}
void glSecondaryColor3ub_Traced(GLubyte red, GLubyte green, GLubyte blue)
{
	MYLOG("glSecondaryColor3ub");
	tracer._glSecondaryColor3ub(red, green, blue);
}
void glSecondaryColor3ubv_Traced(const GLubyte* v)
{
	MYLOG("glSecondaryColor3ubv");
	tracer._glSecondaryColor3ubv(v);
}
void glSecondaryColor3ui_Traced(GLuint red, GLuint green, GLuint blue)
{
	MYLOG("glSecondaryColor3ui");
	tracer._glSecondaryColor3ui(red, green, blue);
}
void glSecondaryColor3uiv_Traced(const GLuint* v)
{
	MYLOG("glSecondaryColor3uiv");
	tracer._glSecondaryColor3uiv(v);
}
void glSecondaryColor3us_Traced(GLushort red, GLushort green, GLushort blue)
{
	MYLOG("glSecondaryColor3us");
	tracer._glSecondaryColor3us(red, green, blue);
}
void glSecondaryColor3usv_Traced(const GLushort* v)
{
	MYLOG("glSecondaryColor3usv");
	tracer._glSecondaryColor3usv(v);
}
void glSecondaryColorPointer_Traced(GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glSecondaryColorPointer");
	tracer._glSecondaryColorPointer(size, type, stride, pointer);
}
void glWindowPos2d_Traced(GLdouble x, GLdouble y)
{
	MYLOG("glWindowPos2d");
	tracer._glWindowPos2d(x, y);
}
void glWindowPos2dv_Traced(const GLdouble* v)
{
	MYLOG("glWindowPos2dv");
	tracer._glWindowPos2dv(v);
}
void glWindowPos2f_Traced(GLfloat x, GLfloat y)
{
	MYLOG("glWindowPos2f");
	tracer._glWindowPos2f(x, y);
}
void glWindowPos2fv_Traced(const GLfloat* v)
{
	MYLOG("glWindowPos2fv");
	tracer._glWindowPos2fv(v);
}
void glWindowPos2i_Traced(GLint x, GLint y)
{
	MYLOG("glWindowPos2i");
	tracer._glWindowPos2i(x, y);
}
void glWindowPos2iv_Traced(const GLint* v)
{
	MYLOG("glWindowPos2iv");
	tracer._glWindowPos2iv(v);
}
void glWindowPos2s_Traced(GLshort x, GLshort y)
{
	MYLOG("glWindowPos2s");
	tracer._glWindowPos2s(x, y);
}
void glWindowPos2sv_Traced(const GLshort* v)
{
	MYLOG("glWindowPos2sv");
	tracer._glWindowPos2sv(v);
}
void glWindowPos3d_Traced(GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glWindowPos3d");
	tracer._glWindowPos3d(x, y, z);
}
void glWindowPos3dv_Traced(const GLdouble* v)
{
	MYLOG("glWindowPos3dv");
	tracer._glWindowPos3dv(v);
}
void glWindowPos3f_Traced(GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glWindowPos3f");
	tracer._glWindowPos3f(x, y, z);
}
void glWindowPos3fv_Traced(const GLfloat* v)
{
	MYLOG("glWindowPos3fv");
	tracer._glWindowPos3fv(v);
}
void glWindowPos3i_Traced(GLint x, GLint y, GLint z)
{
	MYLOG("glWindowPos3i");
	tracer._glWindowPos3i(x, y, z);
}
void glWindowPos3iv_Traced(const GLint* v)
{
	MYLOG("glWindowPos3iv");
	tracer._glWindowPos3iv(v);
}
void glWindowPos3s_Traced(GLshort x, GLshort y, GLshort z)
{
	MYLOG("glWindowPos3s");
	tracer._glWindowPos3s(x, y, z);
}
void glWindowPos3sv_Traced(const GLshort* v)
{
	MYLOG("glWindowPos3sv");
	tracer._glWindowPos3sv(v);
}
void glBlendColor_Traced(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
	MYLOG("glBlendColor");
	tracer._glBlendColor(red, green, blue, alpha);
}
void glBlendEquation_Traced(GLenum mode)
{
	MYLOG("glBlendEquation");
	tracer._glBlendEquation(mode);
}
void glGenQueries_Traced(GLsizei n, GLuint* ids)
{
	MYLOG("glGenQueries");
	tracer._glGenQueries(n, ids);
}
void glDeleteQueries_Traced(GLsizei n, const GLuint* ids)
{
	MYLOG("glDeleteQueries");
	tracer._glDeleteQueries(n, ids);
}
GLboolean glIsQuery_Traced(GLuint id)
{
	MYLOG("glIsQuery");
	return tracer._glIsQuery(id);
}
void glBeginQuery_Traced(GLenum target, GLuint id)
{
	MYLOG("glBeginQuery");
	tracer._glBeginQuery(target, id);
}
void glEndQuery_Traced(GLenum target)
{
	MYLOG("glEndQuery");
	tracer._glEndQuery(target);
}
void glGetQueryiv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetQueryiv");
	tracer._glGetQueryiv(target, pname, params);
}
void glGetQueryObjectiv_Traced(GLuint id, GLenum pname, GLint* params)
{
	MYLOG("glGetQueryObjectiv");
	tracer._glGetQueryObjectiv(id, pname, params);
}
void glGetQueryObjectuiv_Traced(GLuint id, GLenum pname, GLuint* params)
{
	MYLOG("glGetQueryObjectuiv");
	tracer._glGetQueryObjectuiv(id, pname, params);
}
void glBindBuffer_Traced(GLenum target, GLuint buffer)
{
	MYLOG("glBindBuffer");
	tracer._glBindBuffer(target, buffer);
}
void glDeleteBuffers_Traced(GLsizei n, const GLuint* buffers)
{
	MYLOG("glDeleteBuffers");
	tracer._glDeleteBuffers(n, buffers);
}
void glGenBuffers_Traced(GLsizei n, GLuint* buffers)
{
	MYLOG("glGenBuffers");
	tracer._glGenBuffers(n, buffers);
}
GLboolean glIsBuffer_Traced(GLuint buffer)
{
	MYLOG("glIsBuffer");
	return tracer._glIsBuffer(buffer);
}
void glBufferData_Traced(GLenum target, GLsizeiptr size, const void* data, GLenum usage)
{
	MYLOG("glBufferData");
	tracer._glBufferData(target, size, data, usage);
}
void glBufferSubData_Traced(GLenum target, GLintptr offset, GLsizeiptr size, const void* data)
{
	MYLOG("glBufferSubData");
	tracer._glBufferSubData(target, offset, size, data);
}
void glGetBufferSubData_Traced(GLenum target, GLintptr offset, GLsizeiptr size, void* data)
{
	MYLOG("glGetBufferSubData");
	tracer._glGetBufferSubData(target, offset, size, data);
}
void* glMapBuffer_Traced(GLenum target, GLenum access)
{
	MYLOG("glMapBuffer");
	return tracer._glMapBuffer(target, access);
}
GLboolean glUnmapBuffer_Traced(GLenum target)
{
	MYLOG("glUnmapBuffer");
	return tracer._glUnmapBuffer(target);
}
void glGetBufferParameteriv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetBufferParameteriv");
	tracer._glGetBufferParameteriv(target, pname, params);
}
void glGetBufferPointerv_Traced(GLenum target, GLenum pname, void** params)
{
	MYLOG("glGetBufferPointerv");
	tracer._glGetBufferPointerv(target, pname, params);
}
void glBlendEquationSeparate_Traced(GLenum modeRGB, GLenum modeAlpha)
{
	MYLOG("glBlendEquationSeparate");
	tracer._glBlendEquationSeparate(modeRGB, modeAlpha);
}
void glDrawBuffers_Traced(GLsizei n, const GLenum* bufs)
{
	MYLOG("glDrawBuffers");
	tracer._glDrawBuffers(n, bufs);
}
void glStencilOpSeparate_Traced(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
	MYLOG("glStencilOpSeparate");
	tracer._glStencilOpSeparate(face, sfail, dpfail, dppass);
}
void glStencilFuncSeparate_Traced(GLenum face, GLenum func, GLint ref, GLuint mask)
{
	MYLOG("glStencilFuncSeparate");
	tracer._glStencilFuncSeparate(face, func, ref, mask);
}
void glStencilMaskSeparate_Traced(GLenum face, GLuint mask)
{
	MYLOG("glStencilMaskSeparate");
	tracer._glStencilMaskSeparate(face, mask);
}
void glAttachShader_Traced(GLuint program, GLuint shader)
{
	MYLOG("glAttachShader");
	tracer._glAttachShader(program, shader);
}
void glBindAttribLocation_Traced(GLuint program, GLuint index, const GLchar* name)
{
	MYLOG("glBindAttribLocation");
	tracer._glBindAttribLocation(program, index, name);
}
void glCompileShader_Traced(GLuint shader)
{
	MYLOG("glCompileShader");
	tracer._glCompileShader(shader);
}
GLuint glCreateProgram_Traced()
{
	MYLOG("glCreateProgram");
	return tracer._glCreateProgram();
}
GLuint glCreateShader_Traced(GLenum type)
{
	MYLOG("glCreateShader");
	return tracer._glCreateShader(type);
}
void glDeleteProgram_Traced(GLuint program)
{
	MYLOG("glDeleteProgram");
	tracer._glDeleteProgram(program);
}
void glDeleteShader_Traced(GLuint shader)
{
	MYLOG("glDeleteShader");
	tracer._glDeleteShader(shader);
}
void glDetachShader_Traced(GLuint program, GLuint shader)
{
	MYLOG("glDetachShader");
	tracer._glDetachShader(program, shader);
}
void glDisableVertexAttribArray_Traced(GLuint index)
{
	MYLOG("glDisableVertexAttribArray");
	tracer._glDisableVertexAttribArray(index);
}
void glEnableVertexAttribArray_Traced(GLuint index)
{
	MYLOG("glEnableVertexAttribArray");
	tracer._glEnableVertexAttribArray(index);
}
void glGetActiveAttrib_Traced(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{
	MYLOG("glGetActiveAttrib");
	tracer._glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}
void glGetActiveUniform_Traced(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name)
{
	MYLOG("glGetActiveUniform");
	tracer._glGetActiveUniform(program, index, bufSize, length, size, type, name);
}
void glGetAttachedShaders_Traced(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders)
{
	MYLOG("glGetAttachedShaders");
	tracer._glGetAttachedShaders(program, maxCount, count, shaders);
}
GLint glGetAttribLocation_Traced(GLuint program, const GLchar* name)
{
	MYLOG("glGetAttribLocation");
	return tracer._glGetAttribLocation(program, name);
}
void glGetProgramiv_Traced(GLuint program, GLenum pname, GLint* params)
{
	MYLOG("glGetProgramiv");
	tracer._glGetProgramiv(program, pname, params);
}
void glGetProgramInfoLog_Traced(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
{
	MYLOG("glGetProgramInfoLog");
	tracer._glGetProgramInfoLog(program, bufSize, length, infoLog);
}
void glGetShaderiv_Traced(GLuint shader, GLenum pname, GLint* params)
{
	MYLOG("glGetShaderiv");
	tracer._glGetShaderiv(shader, pname, params);
}
void glGetShaderInfoLog_Traced(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
{
	MYLOG("glGetShaderInfoLog");
	tracer._glGetShaderInfoLog(shader, bufSize, length, infoLog);
}
void glGetShaderSource_Traced(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source)
{
	MYLOG("glGetShaderSource");
	tracer._glGetShaderSource(shader, bufSize, length, source);
}
GLint glGetUniformLocation_Traced(GLuint program, const GLchar* name)
{
	MYLOG("glGetUniformLocation");
	return tracer._glGetUniformLocation(program, name);
}
void glGetUniformfv_Traced(GLuint program, GLint location, GLfloat* params)
{
	MYLOG("glGetUniformfv");
	tracer._glGetUniformfv(program, location, params);
}
void glGetUniformiv_Traced(GLuint program, GLint location, GLint* params)
{
	MYLOG("glGetUniformiv");
	tracer._glGetUniformiv(program, location, params);
}
void glGetVertexAttribdv_Traced(GLuint index, GLenum pname, GLdouble* params)
{
	MYLOG("glGetVertexAttribdv");
	tracer._glGetVertexAttribdv(index, pname, params);
}
void glGetVertexAttribfv_Traced(GLuint index, GLenum pname, GLfloat* params)
{
	MYLOG("glGetVertexAttribfv");
	tracer._glGetVertexAttribfv(index, pname, params);
}
void glGetVertexAttribiv_Traced(GLuint index, GLenum pname, GLint* params)
{
	MYLOG("glGetVertexAttribiv");
	tracer._glGetVertexAttribiv(index, pname, params);
}
void glGetVertexAttribPointerv_Traced(GLuint index, GLenum pname, void** pointer)
{
	MYLOG("glGetVertexAttribPointerv");
	tracer._glGetVertexAttribPointerv(index, pname, pointer);
}
GLboolean glIsProgram_Traced(GLuint program)
{
	MYLOG("glIsProgram");
	return tracer._glIsProgram(program);
}
GLboolean glIsShader_Traced(GLuint shader)
{
	MYLOG("glIsShader");
	return tracer._glIsShader(shader);
}
void glLinkProgram_Traced(GLuint program)
{
	MYLOG("glLinkProgram");
	tracer._glLinkProgram(program);
}
void glShaderSource_Traced(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length)
{
	MYLOG("glShaderSource");
	tracer._glShaderSource(shader, count, string, length);
}
void glUseProgram_Traced(GLuint program)
{
	MYLOG("glUseProgram");
	tracer._glUseProgram(program);
}
void glUniform1f_Traced(GLint location, GLfloat v0)
{
	MYLOG("glUniform1f");
	tracer._glUniform1f(location, v0);
}
void glUniform2f_Traced(GLint location, GLfloat v0, GLfloat v1)
{
	MYLOG("glUniform2f");
	tracer._glUniform2f(location, v0, v1);
}
void glUniform3f_Traced(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	MYLOG("glUniform3f");
	tracer._glUniform3f(location, v0, v1, v2);
}
void glUniform4f_Traced(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	MYLOG("glUniform4f");
	tracer._glUniform4f(location, v0, v1, v2, v3);
}
void glUniform1i_Traced(GLint location, GLint v0)
{
	MYLOG("glUniform1i");
	tracer._glUniform1i(location, v0);
}
void glUniform2i_Traced(GLint location, GLint v0, GLint v1)
{
	MYLOG("glUniform2i");
	tracer._glUniform2i(location, v0, v1);
}
void glUniform3i_Traced(GLint location, GLint v0, GLint v1, GLint v2)
{
	MYLOG("glUniform3i");
	tracer._glUniform3i(location, v0, v1, v2);
}
void glUniform4i_Traced(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	MYLOG("glUniform4i");
	tracer._glUniform4i(location, v0, v1, v2, v3);
}
void glUniform1fv_Traced(GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glUniform1fv");
	tracer._glUniform1fv(location, count, value);
}
void glUniform2fv_Traced(GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glUniform2fv");
	tracer._glUniform2fv(location, count, value);
}
void glUniform3fv_Traced(GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glUniform3fv");
	tracer._glUniform3fv(location, count, value);
}
void glUniform4fv_Traced(GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glUniform4fv");
	tracer._glUniform4fv(location, count, value);
}
void glUniform1iv_Traced(GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glUniform1iv");
	tracer._glUniform1iv(location, count, value);
}
void glUniform2iv_Traced(GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glUniform2iv");
	tracer._glUniform2iv(location, count, value);
}
void glUniform3iv_Traced(GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glUniform3iv");
	tracer._glUniform3iv(location, count, value);
}
void glUniform4iv_Traced(GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glUniform4iv");
	tracer._glUniform4iv(location, count, value);
}
void glUniformMatrix2fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix2fv");
	tracer._glUniformMatrix2fv(location, count, transpose, value);
}
void glUniformMatrix3fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix3fv");
	tracer._glUniformMatrix3fv(location, count, transpose, value);
}
void glUniformMatrix4fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix4fv");
	tracer._glUniformMatrix4fv(location, count, transpose, value);
}
void glValidateProgram_Traced(GLuint program)
{
	MYLOG("glValidateProgram");
	tracer._glValidateProgram(program);
}
void glVertexAttrib1d_Traced(GLuint index, GLdouble x)
{
	MYLOG("glVertexAttrib1d");
	tracer._glVertexAttrib1d(index, x);
}
void glVertexAttrib1dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttrib1dv");
	tracer._glVertexAttrib1dv(index, v);
}
void glVertexAttrib1f_Traced(GLuint index, GLfloat x)
{
	MYLOG("glVertexAttrib1f");
	tracer._glVertexAttrib1f(index, x);
}
void glVertexAttrib1fv_Traced(GLuint index, const GLfloat* v)
{
	MYLOG("glVertexAttrib1fv");
	tracer._glVertexAttrib1fv(index, v);
}
void glVertexAttrib1s_Traced(GLuint index, GLshort x)
{
	MYLOG("glVertexAttrib1s");
	tracer._glVertexAttrib1s(index, x);
}
void glVertexAttrib1sv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttrib1sv");
	tracer._glVertexAttrib1sv(index, v);
}
void glVertexAttrib2d_Traced(GLuint index, GLdouble x, GLdouble y)
{
	MYLOG("glVertexAttrib2d");
	tracer._glVertexAttrib2d(index, x, y);
}
void glVertexAttrib2dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttrib2dv");
	tracer._glVertexAttrib2dv(index, v);
}
void glVertexAttrib2f_Traced(GLuint index, GLfloat x, GLfloat y)
{
	MYLOG("glVertexAttrib2f");
	tracer._glVertexAttrib2f(index, x, y);
}
void glVertexAttrib2fv_Traced(GLuint index, const GLfloat* v)
{
	MYLOG("glVertexAttrib2fv");
	tracer._glVertexAttrib2fv(index, v);
}
void glVertexAttrib2s_Traced(GLuint index, GLshort x, GLshort y)
{
	MYLOG("glVertexAttrib2s");
	tracer._glVertexAttrib2s(index, x, y);
}
void glVertexAttrib2sv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttrib2sv");
	tracer._glVertexAttrib2sv(index, v);
}
void glVertexAttrib3d_Traced(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glVertexAttrib3d");
	tracer._glVertexAttrib3d(index, x, y, z);
}
void glVertexAttrib3dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttrib3dv");
	tracer._glVertexAttrib3dv(index, v);
}
void glVertexAttrib3f_Traced(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
	MYLOG("glVertexAttrib3f");
	tracer._glVertexAttrib3f(index, x, y, z);
}
void glVertexAttrib3fv_Traced(GLuint index, const GLfloat* v)
{
	MYLOG("glVertexAttrib3fv");
	tracer._glVertexAttrib3fv(index, v);
}
void glVertexAttrib3s_Traced(GLuint index, GLshort x, GLshort y, GLshort z)
{
	MYLOG("glVertexAttrib3s");
	tracer._glVertexAttrib3s(index, x, y, z);
}
void glVertexAttrib3sv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttrib3sv");
	tracer._glVertexAttrib3sv(index, v);
}
void glVertexAttrib4Nbv_Traced(GLuint index, const GLbyte* v)
{
	MYLOG("glVertexAttrib4Nbv");
	tracer._glVertexAttrib4Nbv(index, v);
}
void glVertexAttrib4Niv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttrib4Niv");
	tracer._glVertexAttrib4Niv(index, v);
}
void glVertexAttrib4Nsv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttrib4Nsv");
	tracer._glVertexAttrib4Nsv(index, v);
}
void glVertexAttrib4Nub_Traced(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
	MYLOG("glVertexAttrib4Nub");
	tracer._glVertexAttrib4Nub(index, x, y, z, w);
}
void glVertexAttrib4Nubv_Traced(GLuint index, const GLubyte* v)
{
	MYLOG("glVertexAttrib4Nubv");
	tracer._glVertexAttrib4Nubv(index, v);
}
void glVertexAttrib4Nuiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttrib4Nuiv");
	tracer._glVertexAttrib4Nuiv(index, v);
}
void glVertexAttrib4Nusv_Traced(GLuint index, const GLushort* v)
{
	MYLOG("glVertexAttrib4Nusv");
	tracer._glVertexAttrib4Nusv(index, v);
}
void glVertexAttrib4bv_Traced(GLuint index, const GLbyte* v)
{
	MYLOG("glVertexAttrib4bv");
	tracer._glVertexAttrib4bv(index, v);
}
void glVertexAttrib4d_Traced(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	MYLOG("glVertexAttrib4d");
	tracer._glVertexAttrib4d(index, x, y, z, w);
}
void glVertexAttrib4dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttrib4dv");
	tracer._glVertexAttrib4dv(index, v);
}
void glVertexAttrib4f_Traced(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
	MYLOG("glVertexAttrib4f");
	tracer._glVertexAttrib4f(index, x, y, z, w);
}
void glVertexAttrib4fv_Traced(GLuint index, const GLfloat* v)
{
	MYLOG("glVertexAttrib4fv");
	tracer._glVertexAttrib4fv(index, v);
}
void glVertexAttrib4iv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttrib4iv");
	tracer._glVertexAttrib4iv(index, v);
}
void glVertexAttrib4s_Traced(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
	MYLOG("glVertexAttrib4s");
	tracer._glVertexAttrib4s(index, x, y, z, w);
}
void glVertexAttrib4sv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttrib4sv");
	tracer._glVertexAttrib4sv(index, v);
}
void glVertexAttrib4ubv_Traced(GLuint index, const GLubyte* v)
{
	MYLOG("glVertexAttrib4ubv");
	tracer._glVertexAttrib4ubv(index, v);
}
void glVertexAttrib4uiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttrib4uiv");
	tracer._glVertexAttrib4uiv(index, v);
}
void glVertexAttrib4usv_Traced(GLuint index, const GLushort* v)
{
	MYLOG("glVertexAttrib4usv");
	tracer._glVertexAttrib4usv(index, v);
}
void glVertexAttribPointer_Traced(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer)
{
	MYLOG("glVertexAttribPointer");
	tracer._glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}
void glUniformMatrix2x3fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix2x3fv");
	tracer._glUniformMatrix2x3fv(location, count, transpose, value);
}
void glUniformMatrix3x2fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix3x2fv");
	tracer._glUniformMatrix3x2fv(location, count, transpose, value);
}
void glUniformMatrix2x4fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix2x4fv");
	tracer._glUniformMatrix2x4fv(location, count, transpose, value);
}
void glUniformMatrix4x2fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix4x2fv");
	tracer._glUniformMatrix4x2fv(location, count, transpose, value);
}
void glUniformMatrix3x4fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix3x4fv");
	tracer._glUniformMatrix3x4fv(location, count, transpose, value);
}
void glUniformMatrix4x3fv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glUniformMatrix4x3fv");
	tracer._glUniformMatrix4x3fv(location, count, transpose, value);
}
void glColorMaski_Traced(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
	MYLOG("glColorMaski");
	tracer._glColorMaski(index, r, g, b, a);
}
void glGetBooleani_v_Traced(GLenum target, GLuint index, GLboolean* data)
{
	MYLOG("glGetBooleani_v");
	tracer._glGetBooleani_v(target, index, data);
}
void glGetIntegeri_v_Traced(GLenum target, GLuint index, GLint* data)
{
	MYLOG("glGetIntegeri_v");
	tracer._glGetIntegeri_v(target, index, data);
}
void glEnablei_Traced(GLenum target, GLuint index)
{
	MYLOG("glEnablei");
	tracer._glEnablei(target, index);
}
void glDisablei_Traced(GLenum target, GLuint index)
{
	MYLOG("glDisablei");
	tracer._glDisablei(target, index);
}
GLboolean glIsEnabledi_Traced(GLenum target, GLuint index)
{
	MYLOG("glIsEnabledi");
	return tracer._glIsEnabledi(target, index);
}
void glBeginTransformFeedback_Traced(GLenum primitiveMode)
{
	MYLOG("glBeginTransformFeedback");
	tracer._glBeginTransformFeedback(primitiveMode);
}
void glEndTransformFeedback_Traced()
{
	MYLOG("glEndTransformFeedback");
	tracer._glEndTransformFeedback();
}
void glBindBufferRange_Traced(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	MYLOG("glBindBufferRange");
	tracer._glBindBufferRange(target, index, buffer, offset, size);
}
void glBindBufferBase_Traced(GLenum target, GLuint index, GLuint buffer)
{
	MYLOG("glBindBufferBase");
	tracer._glBindBufferBase(target, index, buffer);
}
void glTransformFeedbackVaryings_Traced(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode)
{
	MYLOG("glTransformFeedbackVaryings");
	tracer._glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}
void glGetTransformFeedbackVarying_Traced(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name)
{
	MYLOG("glGetTransformFeedbackVarying");
	tracer._glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}
void glClampColor_Traced(GLenum target, GLenum clamp)
{
	MYLOG("glClampColor");
	tracer._glClampColor(target, clamp);
}
void glBeginConditionalRender_Traced(GLuint id, GLenum mode)
{
	MYLOG("glBeginConditionalRender");
	tracer._glBeginConditionalRender(id, mode);
}
void glEndConditionalRender_Traced()
{
	MYLOG("glEndConditionalRender");
	tracer._glEndConditionalRender();
}
void glVertexAttribIPointer_Traced(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glVertexAttribIPointer");
	tracer._glVertexAttribIPointer(index, size, type, stride, pointer);
}
void glGetVertexAttribIiv_Traced(GLuint index, GLenum pname, GLint* params)
{
	MYLOG("glGetVertexAttribIiv");
	tracer._glGetVertexAttribIiv(index, pname, params);
}
void glGetVertexAttribIuiv_Traced(GLuint index, GLenum pname, GLuint* params)
{
	MYLOG("glGetVertexAttribIuiv");
	tracer._glGetVertexAttribIuiv(index, pname, params);
}
void glVertexAttribI1i_Traced(GLuint index, GLint x)
{
	MYLOG("glVertexAttribI1i");
	tracer._glVertexAttribI1i(index, x);
}
void glVertexAttribI2i_Traced(GLuint index, GLint x, GLint y)
{
	MYLOG("glVertexAttribI2i");
	tracer._glVertexAttribI2i(index, x, y);
}
void glVertexAttribI3i_Traced(GLuint index, GLint x, GLint y, GLint z)
{
	MYLOG("glVertexAttribI3i");
	tracer._glVertexAttribI3i(index, x, y, z);
}
void glVertexAttribI4i_Traced(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
	MYLOG("glVertexAttribI4i");
	tracer._glVertexAttribI4i(index, x, y, z, w);
}
void glVertexAttribI1ui_Traced(GLuint index, GLuint x)
{
	MYLOG("glVertexAttribI1ui");
	tracer._glVertexAttribI1ui(index, x);
}
void glVertexAttribI2ui_Traced(GLuint index, GLuint x, GLuint y)
{
	MYLOG("glVertexAttribI2ui");
	tracer._glVertexAttribI2ui(index, x, y);
}
void glVertexAttribI3ui_Traced(GLuint index, GLuint x, GLuint y, GLuint z)
{
	MYLOG("glVertexAttribI3ui");
	tracer._glVertexAttribI3ui(index, x, y, z);
}
void glVertexAttribI4ui_Traced(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
	MYLOG("glVertexAttribI4ui");
	tracer._glVertexAttribI4ui(index, x, y, z, w);
}
void glVertexAttribI1iv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttribI1iv");
	tracer._glVertexAttribI1iv(index, v);
}
void glVertexAttribI2iv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttribI2iv");
	tracer._glVertexAttribI2iv(index, v);
}
void glVertexAttribI3iv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttribI3iv");
	tracer._glVertexAttribI3iv(index, v);
}
void glVertexAttribI4iv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glVertexAttribI4iv");
	tracer._glVertexAttribI4iv(index, v);
}
void glVertexAttribI1uiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttribI1uiv");
	tracer._glVertexAttribI1uiv(index, v);
}
void glVertexAttribI2uiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttribI2uiv");
	tracer._glVertexAttribI2uiv(index, v);
}
void glVertexAttribI3uiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttribI3uiv");
	tracer._glVertexAttribI3uiv(index, v);
}
void glVertexAttribI4uiv_Traced(GLuint index, const GLuint* v)
{
	MYLOG("glVertexAttribI4uiv");
	tracer._glVertexAttribI4uiv(index, v);
}
void glVertexAttribI4bv_Traced(GLuint index, const GLbyte* v)
{
	MYLOG("glVertexAttribI4bv");
	tracer._glVertexAttribI4bv(index, v);
}
void glVertexAttribI4sv_Traced(GLuint index, const GLshort* v)
{
	MYLOG("glVertexAttribI4sv");
	tracer._glVertexAttribI4sv(index, v);
}
void glVertexAttribI4ubv_Traced(GLuint index, const GLubyte* v)
{
	MYLOG("glVertexAttribI4ubv");
	tracer._glVertexAttribI4ubv(index, v);
}
void glVertexAttribI4usv_Traced(GLuint index, const GLushort* v)
{
	MYLOG("glVertexAttribI4usv");
	tracer._glVertexAttribI4usv(index, v);
}
void glGetUniformuiv_Traced(GLuint program, GLint location, GLuint* params)
{
	MYLOG("glGetUniformuiv");
	tracer._glGetUniformuiv(program, location, params);
}
void glBindFragDataLocation_Traced(GLuint program, GLuint color, const GLchar* name)
{
	MYLOG("glBindFragDataLocation");
	tracer._glBindFragDataLocation(program, color, name);
}
GLint glGetFragDataLocation_Traced(GLuint program, const GLchar* name)
{
	MYLOG("glGetFragDataLocation");
	return tracer._glGetFragDataLocation(program, name);
}
void glUniform1ui_Traced(GLint location, GLuint v0)
{
	MYLOG("glUniform1ui");
	tracer._glUniform1ui(location, v0);
}
void glUniform2ui_Traced(GLint location, GLuint v0, GLuint v1)
{
	MYLOG("glUniform2ui");
	tracer._glUniform2ui(location, v0, v1);
}
void glUniform3ui_Traced(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	MYLOG("glUniform3ui");
	tracer._glUniform3ui(location, v0, v1, v2);
}
void glUniform4ui_Traced(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	MYLOG("glUniform4ui");
	tracer._glUniform4ui(location, v0, v1, v2, v3);
}
void glUniform1uiv_Traced(GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glUniform1uiv");
	tracer._glUniform1uiv(location, count, value);
}
void glUniform2uiv_Traced(GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glUniform2uiv");
	tracer._glUniform2uiv(location, count, value);
}
void glUniform3uiv_Traced(GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glUniform3uiv");
	tracer._glUniform3uiv(location, count, value);
}
void glUniform4uiv_Traced(GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glUniform4uiv");
	tracer._glUniform4uiv(location, count, value);
}
void glTexParameterIiv_Traced(GLenum target, GLenum pname, const GLint* params)
{
	MYLOG("glTexParameterIiv");
	tracer._glTexParameterIiv(target, pname, params);
}
void glTexParameterIuiv_Traced(GLenum target, GLenum pname, const GLuint* params)
{
	MYLOG("glTexParameterIuiv");
	tracer._glTexParameterIuiv(target, pname, params);
}
void glGetTexParameterIiv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetTexParameterIiv");
	tracer._glGetTexParameterIiv(target, pname, params);
}
void glGetTexParameterIuiv_Traced(GLenum target, GLenum pname, GLuint* params)
{
	MYLOG("glGetTexParameterIuiv");
	tracer._glGetTexParameterIuiv(target, pname, params);
}
void glClearBufferiv_Traced(GLenum buffer, GLint drawbuffer, const GLint* value)
{
	MYLOG("glClearBufferiv");
	tracer._glClearBufferiv(buffer, drawbuffer, value);
}
void glClearBufferuiv_Traced(GLenum buffer, GLint drawbuffer, const GLuint* value)
{
	MYLOG("glClearBufferuiv");
	tracer._glClearBufferuiv(buffer, drawbuffer, value);
}
void glClearBufferfv_Traced(GLenum buffer, GLint drawbuffer, const GLfloat* value)
{
	MYLOG("glClearBufferfv");
	tracer._glClearBufferfv(buffer, drawbuffer, value);
}
void glClearBufferfi_Traced(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
	MYLOG("glClearBufferfi");
	tracer._glClearBufferfi(buffer, drawbuffer, depth, stencil);
}
const GLubyte* glGetStringi_Traced(GLenum name, GLuint index)
{
	MYLOG("glGetStringi");
	return tracer._glGetStringi(name, index);
}
GLboolean glIsRenderbuffer_Traced(GLuint renderbuffer)
{
	MYLOG("glIsRenderbuffer");
	return tracer._glIsRenderbuffer(renderbuffer);
}
void glBindRenderbuffer_Traced(GLenum target, GLuint renderbuffer)
{
	MYLOG("glBindRenderbuffer");
	tracer._glBindRenderbuffer(target, renderbuffer);
}
void glDeleteRenderbuffers_Traced(GLsizei n, const GLuint* renderbuffers)
{
	MYLOG("glDeleteRenderbuffers");
	tracer._glDeleteRenderbuffers(n, renderbuffers);
}
void glGenRenderbuffers_Traced(GLsizei n, GLuint* renderbuffers)
{
	MYLOG("glGenRenderbuffers");
	tracer._glGenRenderbuffers(n, renderbuffers);
}
void glRenderbufferStorage_Traced(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glRenderbufferStorage");
	tracer._glRenderbufferStorage(target, internalformat, width, height);
}
void glGetRenderbufferParameteriv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetRenderbufferParameteriv");
	tracer._glGetRenderbufferParameteriv(target, pname, params);
}
GLboolean glIsFramebuffer_Traced(GLuint framebuffer)
{
	MYLOG("glIsFramebuffer");
	return tracer._glIsFramebuffer(framebuffer);
}
void glBindFramebuffer_Traced(GLenum target, GLuint framebuffer)
{
	MYLOG("glBindFramebuffer");
	tracer._glBindFramebuffer(target, framebuffer);
}
void glDeleteFramebuffers_Traced(GLsizei n, const GLuint* framebuffers)
{
	MYLOG("glDeleteFramebuffers");
	tracer._glDeleteFramebuffers(n, framebuffers);
}
void glGenFramebuffers_Traced(GLsizei n, GLuint* framebuffers)
{
	MYLOG("glGenFramebuffers");
	tracer._glGenFramebuffers(n, framebuffers);
}
GLenum glCheckFramebufferStatus_Traced(GLenum target)
{
	MYLOG("glCheckFramebufferStatus");
	return tracer._glCheckFramebufferStatus(target);
}
void glFramebufferTexture1D_Traced(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	MYLOG("glFramebufferTexture1D");
	tracer._glFramebufferTexture1D(target, attachment, textarget, texture, level);
}
void glFramebufferTexture2D_Traced(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
	MYLOG("glFramebufferTexture2D");
	tracer._glFramebufferTexture2D(target, attachment, textarget, texture, level);
}
void glFramebufferTexture3D_Traced(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
	MYLOG("glFramebufferTexture3D");
	tracer._glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
}
void glFramebufferRenderbuffer_Traced(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	MYLOG("glFramebufferRenderbuffer");
	tracer._glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}
void glGetFramebufferAttachmentParameteriv_Traced(GLenum target, GLenum attachment, GLenum pname, GLint* params)
{
	MYLOG("glGetFramebufferAttachmentParameteriv");
	tracer._glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}
void glGenerateMipmap_Traced(GLenum target)
{
	MYLOG("glGenerateMipmap");
	tracer._glGenerateMipmap(target);
}
void glBlitFramebuffer_Traced(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	MYLOG("glBlitFramebuffer");
	tracer._glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
void glRenderbufferStorageMultisample_Traced(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glRenderbufferStorageMultisample");
	tracer._glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}
void glFramebufferTextureLayer_Traced(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	MYLOG("glFramebufferTextureLayer");
	tracer._glFramebufferTextureLayer(target, attachment, texture, level, layer);
}
void* glMapBufferRange_Traced(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	MYLOG("glMapBufferRange");
	return tracer._glMapBufferRange(target, offset, length, access);
}
void glFlushMappedBufferRange_Traced(GLenum target, GLintptr offset, GLsizeiptr length)
{
	MYLOG("glFlushMappedBufferRange");
	tracer._glFlushMappedBufferRange(target, offset, length);
}
void glBindVertexArray_Traced(GLuint array)
{
	MYLOG("glBindVertexArray");
	tracer._glBindVertexArray(array);
}
void glDeleteVertexArrays_Traced(GLsizei n, const GLuint* arrays)
{
	MYLOG("glDeleteVertexArrays");
	tracer._glDeleteVertexArrays(n, arrays);
}
void glGenVertexArrays_Traced(GLsizei n, GLuint* arrays)
{
	MYLOG("glGenVertexArrays");
	tracer._glGenVertexArrays(n, arrays);
}
GLboolean glIsVertexArray_Traced(GLuint array)
{
	MYLOG("glIsVertexArray");
	return tracer._glIsVertexArray(array);
}
void glDrawArraysInstanced_Traced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
{
	MYLOG("glDrawArraysInstanced");
	tracer._glDrawArraysInstanced(mode, first, count, instancecount);
}
void glDrawElementsInstanced_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount)
{
	MYLOG("glDrawElementsInstanced");
	tracer._glDrawElementsInstanced(mode, count, type, indices, instancecount);
}
void glTexBuffer_Traced(GLenum target, GLenum internalformat, GLuint buffer)
{
	MYLOG("glTexBuffer");
	tracer._glTexBuffer(target, internalformat, buffer);
}
void glPrimitiveRestartIndex_Traced(GLuint index)
{
	MYLOG("glPrimitiveRestartIndex");
	tracer._glPrimitiveRestartIndex(index);
}
void glCopyBufferSubData_Traced(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	MYLOG("glCopyBufferSubData");
	tracer._glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}
void glGetUniformIndices_Traced(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices)
{
	MYLOG("glGetUniformIndices");
	tracer._glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}
void glGetActiveUniformsiv_Traced(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params)
{
	MYLOG("glGetActiveUniformsiv");
	tracer._glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}
void glGetActiveUniformName_Traced(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName)
{
	MYLOG("glGetActiveUniformName");
	tracer._glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}
GLuint glGetUniformBlockIndex_Traced(GLuint program, const GLchar* uniformBlockName)
{
	MYLOG("glGetUniformBlockIndex");
	return tracer._glGetUniformBlockIndex(program, uniformBlockName);
}
void glGetActiveUniformBlockiv_Traced(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params)
{
	MYLOG("glGetActiveUniformBlockiv");
	tracer._glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}
void glGetActiveUniformBlockName_Traced(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName)
{
	MYLOG("glGetActiveUniformBlockName");
	tracer._glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}
void glUniformBlockBinding_Traced(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
	MYLOG("glUniformBlockBinding");
	tracer._glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}
void glDrawElementsBaseVertex_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex)
{
	MYLOG("glDrawElementsBaseVertex");
	tracer._glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}
void glDrawRangeElementsBaseVertex_Traced(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex)
{
	MYLOG("glDrawRangeElementsBaseVertex");
	tracer._glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}
void glDrawElementsInstancedBaseVertex_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex)
{
	MYLOG("glDrawElementsInstancedBaseVertex");
	tracer._glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}
void glMultiDrawElementsBaseVertex_Traced(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex)
{
	MYLOG("glMultiDrawElementsBaseVertex");
	tracer._glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
}
void glProvokingVertex_Traced(GLenum mode)
{
	MYLOG("glProvokingVertex");
	tracer._glProvokingVertex(mode);
}
GLsync glFenceSync_Traced(GLenum condition, GLbitfield flags)
{
	MYLOG("glFenceSync");
	return tracer._glFenceSync(condition, flags);
}
GLboolean glIsSync_Traced(GLsync sync)
{
	MYLOG("glIsSync");
	return tracer._glIsSync(sync);
}
void glDeleteSync_Traced(GLsync sync)
{
	MYLOG("glDeleteSync");
	tracer._glDeleteSync(sync);
}
GLenum glClientWaitSync_Traced(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
	MYLOG("glClientWaitSync");
	return tracer._glClientWaitSync(sync, flags, timeout);
}
void glWaitSync_Traced(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
	MYLOG("glWaitSync");
	tracer._glWaitSync(sync, flags, timeout);
}
void glGetInteger64v_Traced(GLenum pname, GLint64* data)
{
	MYLOG("glGetInteger64v");
	tracer._glGetInteger64v(pname, data);
}
void glGetSynciv_Traced(GLsync sync, GLenum pname, GLsizei count, GLsizei* length, GLint* values)
{
	MYLOG("glGetSynciv");
	tracer._glGetSynciv(sync, pname, count, length, values);
}
void glGetInteger64i_v_Traced(GLenum target, GLuint index, GLint64* data)
{
	MYLOG("glGetInteger64i_v");
	tracer._glGetInteger64i_v(target, index, data);
}
void glGetBufferParameteri64v_Traced(GLenum target, GLenum pname, GLint64* params)
{
	MYLOG("glGetBufferParameteri64v");
	tracer._glGetBufferParameteri64v(target, pname, params);
}
void glFramebufferTexture_Traced(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
	MYLOG("glFramebufferTexture");
	tracer._glFramebufferTexture(target, attachment, texture, level);
}
void glTexImage2DMultisample_Traced(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	MYLOG("glTexImage2DMultisample");
	tracer._glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
void glTexImage3DMultisample_Traced(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	MYLOG("glTexImage3DMultisample");
	tracer._glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void glGetMultisamplefv_Traced(GLenum pname, GLuint index, GLfloat* val)
{
	MYLOG("glGetMultisamplefv");
	tracer._glGetMultisamplefv(pname, index, val);
}
void glSampleMaski_Traced(GLuint maskNumber, GLbitfield mask)
{
	MYLOG("glSampleMaski");
	tracer._glSampleMaski(maskNumber, mask);
}
void glBindFragDataLocationIndexed_Traced(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name)
{
	MYLOG("glBindFragDataLocationIndexed");
	tracer._glBindFragDataLocationIndexed(program, colorNumber, index, name);
}
GLint glGetFragDataIndex_Traced(GLuint program, const GLchar* name)
{
	MYLOG("glGetFragDataIndex");
	return tracer._glGetFragDataIndex(program, name);
}
void glGenSamplers_Traced(GLsizei count, GLuint* samplers)
{
	MYLOG("glGenSamplers");
	tracer._glGenSamplers(count, samplers);
}
void glDeleteSamplers_Traced(GLsizei count, const GLuint* samplers)
{
	MYLOG("glDeleteSamplers");
	tracer._glDeleteSamplers(count, samplers);
}
GLboolean glIsSampler_Traced(GLuint sampler)
{
	MYLOG("glIsSampler");
	return tracer._glIsSampler(sampler);
}
void glBindSampler_Traced(GLuint unit, GLuint sampler)
{
	MYLOG("glBindSampler");
	tracer._glBindSampler(unit, sampler);
}
void glSamplerParameteri_Traced(GLuint sampler, GLenum pname, GLint param)
{
	MYLOG("glSamplerParameteri");
	tracer._glSamplerParameteri(sampler, pname, param);
}
void glSamplerParameteriv_Traced(GLuint sampler, GLenum pname, const GLint* param)
{
	MYLOG("glSamplerParameteriv");
	tracer._glSamplerParameteriv(sampler, pname, param);
}
void glSamplerParameterf_Traced(GLuint sampler, GLenum pname, GLfloat param)
{
	MYLOG("glSamplerParameterf");
	tracer._glSamplerParameterf(sampler, pname, param);
}
void glSamplerParameterfv_Traced(GLuint sampler, GLenum pname, const GLfloat* param)
{
	MYLOG("glSamplerParameterfv");
	tracer._glSamplerParameterfv(sampler, pname, param);
}
void glSamplerParameterIiv_Traced(GLuint sampler, GLenum pname, const GLint* param)
{
	MYLOG("glSamplerParameterIiv");
	tracer._glSamplerParameterIiv(sampler, pname, param);
}
void glSamplerParameterIuiv_Traced(GLuint sampler, GLenum pname, const GLuint* param)
{
	MYLOG("glSamplerParameterIuiv");
	tracer._glSamplerParameterIuiv(sampler, pname, param);
}
void glGetSamplerParameteriv_Traced(GLuint sampler, GLenum pname, GLint* params)
{
	MYLOG("glGetSamplerParameteriv");
	tracer._glGetSamplerParameteriv(sampler, pname, params);
}
void glGetSamplerParameterIiv_Traced(GLuint sampler, GLenum pname, GLint* params)
{
	MYLOG("glGetSamplerParameterIiv");
	tracer._glGetSamplerParameterIiv(sampler, pname, params);
}
void glGetSamplerParameterfv_Traced(GLuint sampler, GLenum pname, GLfloat* params)
{
	MYLOG("glGetSamplerParameterfv");
	tracer._glGetSamplerParameterfv(sampler, pname, params);
}
void glGetSamplerParameterIuiv_Traced(GLuint sampler, GLenum pname, GLuint* params)
{
	MYLOG("glGetSamplerParameterIuiv");
	tracer._glGetSamplerParameterIuiv(sampler, pname, params);
}
void glQueryCounter_Traced(GLuint id, GLenum target)
{
	MYLOG("glQueryCounter");
	tracer._glQueryCounter(id, target);
}
void glGetQueryObjecti64v_Traced(GLuint id, GLenum pname, GLint64* params)
{
	MYLOG("glGetQueryObjecti64v");
	tracer._glGetQueryObjecti64v(id, pname, params);
}
void glGetQueryObjectui64v_Traced(GLuint id, GLenum pname, GLuint64* params)
{
	MYLOG("glGetQueryObjectui64v");
	tracer._glGetQueryObjectui64v(id, pname, params);
}
void glVertexAttribDivisor_Traced(GLuint index, GLuint divisor)
{
	MYLOG("glVertexAttribDivisor");
	tracer._glVertexAttribDivisor(index, divisor);
}
void glVertexAttribP1ui_Traced(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	MYLOG("glVertexAttribP1ui");
	tracer._glVertexAttribP1ui(index, type, normalized, value);
}
void glVertexAttribP1uiv_Traced(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
{
	MYLOG("glVertexAttribP1uiv");
	tracer._glVertexAttribP1uiv(index, type, normalized, value);
}
void glVertexAttribP2ui_Traced(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	MYLOG("glVertexAttribP2ui");
	tracer._glVertexAttribP2ui(index, type, normalized, value);
}
void glVertexAttribP2uiv_Traced(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
{
	MYLOG("glVertexAttribP2uiv");
	tracer._glVertexAttribP2uiv(index, type, normalized, value);
}
void glVertexAttribP3ui_Traced(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	MYLOG("glVertexAttribP3ui");
	tracer._glVertexAttribP3ui(index, type, normalized, value);
}
void glVertexAttribP3uiv_Traced(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
{
	MYLOG("glVertexAttribP3uiv");
	tracer._glVertexAttribP3uiv(index, type, normalized, value);
}
void glVertexAttribP4ui_Traced(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
	MYLOG("glVertexAttribP4ui");
	tracer._glVertexAttribP4ui(index, type, normalized, value);
}
void glVertexAttribP4uiv_Traced(GLuint index, GLenum type, GLboolean normalized, const GLuint* value)
{
	MYLOG("glVertexAttribP4uiv");
	tracer._glVertexAttribP4uiv(index, type, normalized, value);
}
void glVertexP2ui_Traced(GLenum type, GLuint value)
{
	MYLOG("glVertexP2ui");
	tracer._glVertexP2ui(type, value);
}
void glVertexP2uiv_Traced(GLenum type, const GLuint* value)
{
	MYLOG("glVertexP2uiv");
	tracer._glVertexP2uiv(type, value);
}
void glVertexP3ui_Traced(GLenum type, GLuint value)
{
	MYLOG("glVertexP3ui");
	tracer._glVertexP3ui(type, value);
}
void glVertexP3uiv_Traced(GLenum type, const GLuint* value)
{
	MYLOG("glVertexP3uiv");
	tracer._glVertexP3uiv(type, value);
}
void glVertexP4ui_Traced(GLenum type, GLuint value)
{
	MYLOG("glVertexP4ui");
	tracer._glVertexP4ui(type, value);
}
void glVertexP4uiv_Traced(GLenum type, const GLuint* value)
{
	MYLOG("glVertexP4uiv");
	tracer._glVertexP4uiv(type, value);
}
void glTexCoordP1ui_Traced(GLenum type, GLuint coords)
{
	MYLOG("glTexCoordP1ui");
	tracer._glTexCoordP1ui(type, coords);
}
void glTexCoordP1uiv_Traced(GLenum type, const GLuint* coords)
{
	MYLOG("glTexCoordP1uiv");
	tracer._glTexCoordP1uiv(type, coords);
}
void glTexCoordP2ui_Traced(GLenum type, GLuint coords)
{
	MYLOG("glTexCoordP2ui");
	tracer._glTexCoordP2ui(type, coords);
}
void glTexCoordP2uiv_Traced(GLenum type, const GLuint* coords)
{
	MYLOG("glTexCoordP2uiv");
	tracer._glTexCoordP2uiv(type, coords);
}
void glTexCoordP3ui_Traced(GLenum type, GLuint coords)
{
	MYLOG("glTexCoordP3ui");
	tracer._glTexCoordP3ui(type, coords);
}
void glTexCoordP3uiv_Traced(GLenum type, const GLuint* coords)
{
	MYLOG("glTexCoordP3uiv");
	tracer._glTexCoordP3uiv(type, coords);
}
void glTexCoordP4ui_Traced(GLenum type, GLuint coords)
{
	MYLOG("glTexCoordP4ui");
	tracer._glTexCoordP4ui(type, coords);
}
void glTexCoordP4uiv_Traced(GLenum type, const GLuint* coords)
{
	MYLOG("glTexCoordP4uiv");
	tracer._glTexCoordP4uiv(type, coords);
}
void glMultiTexCoordP1ui_Traced(GLenum texture, GLenum type, GLuint coords)
{
	MYLOG("glMultiTexCoordP1ui");
	tracer._glMultiTexCoordP1ui(texture, type, coords);
}
void glMultiTexCoordP1uiv_Traced(GLenum texture, GLenum type, const GLuint* coords)
{
	MYLOG("glMultiTexCoordP1uiv");
	tracer._glMultiTexCoordP1uiv(texture, type, coords);
}
void glMultiTexCoordP2ui_Traced(GLenum texture, GLenum type, GLuint coords)
{
	MYLOG("glMultiTexCoordP2ui");
	tracer._glMultiTexCoordP2ui(texture, type, coords);
}
void glMultiTexCoordP2uiv_Traced(GLenum texture, GLenum type, const GLuint* coords)
{
	MYLOG("glMultiTexCoordP2uiv");
	tracer._glMultiTexCoordP2uiv(texture, type, coords);
}
void glMultiTexCoordP3ui_Traced(GLenum texture, GLenum type, GLuint coords)
{
	MYLOG("glMultiTexCoordP3ui");
	tracer._glMultiTexCoordP3ui(texture, type, coords);
}
void glMultiTexCoordP3uiv_Traced(GLenum texture, GLenum type, const GLuint* coords)
{
	MYLOG("glMultiTexCoordP3uiv");
	tracer._glMultiTexCoordP3uiv(texture, type, coords);
}
void glMultiTexCoordP4ui_Traced(GLenum texture, GLenum type, GLuint coords)
{
	MYLOG("glMultiTexCoordP4ui");
	tracer._glMultiTexCoordP4ui(texture, type, coords);
}
void glMultiTexCoordP4uiv_Traced(GLenum texture, GLenum type, const GLuint* coords)
{
	MYLOG("glMultiTexCoordP4uiv");
	tracer._glMultiTexCoordP4uiv(texture, type, coords);
}
void glNormalP3ui_Traced(GLenum type, GLuint coords)
{
	MYLOG("glNormalP3ui");
	tracer._glNormalP3ui(type, coords);
}
void glNormalP3uiv_Traced(GLenum type, const GLuint* coords)
{
	MYLOG("glNormalP3uiv");
	tracer._glNormalP3uiv(type, coords);
}
void glColorP3ui_Traced(GLenum type, GLuint color)
{
	MYLOG("glColorP3ui");
	tracer._glColorP3ui(type, color);
}
void glColorP3uiv_Traced(GLenum type, const GLuint* color)
{
	MYLOG("glColorP3uiv");
	tracer._glColorP3uiv(type, color);
}
void glColorP4ui_Traced(GLenum type, GLuint color)
{
	MYLOG("glColorP4ui");
	tracer._glColorP4ui(type, color);
}
void glColorP4uiv_Traced(GLenum type, const GLuint* color)
{
	MYLOG("glColorP4uiv");
	tracer._glColorP4uiv(type, color);
}
void glSecondaryColorP3ui_Traced(GLenum type, GLuint color)
{
	MYLOG("glSecondaryColorP3ui");
	tracer._glSecondaryColorP3ui(type, color);
}
void glSecondaryColorP3uiv_Traced(GLenum type, const GLuint* color)
{
	MYLOG("glSecondaryColorP3uiv");
	tracer._glSecondaryColorP3uiv(type, color);
}
void glMinSampleShading_Traced(GLfloat value)
{
	MYLOG("glMinSampleShading");
	tracer._glMinSampleShading(value);
}
void glBlendEquationi_Traced(GLuint buf, GLenum mode)
{
	MYLOG("glBlendEquationi");
	tracer._glBlendEquationi(buf, mode);
}
void glBlendEquationSeparatei_Traced(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
	MYLOG("glBlendEquationSeparatei");
	tracer._glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
void glBlendFunci_Traced(GLuint buf, GLenum src, GLenum dst)
{
	MYLOG("glBlendFunci");
	tracer._glBlendFunci(buf, src, dst);
}
void glBlendFuncSeparatei_Traced(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	MYLOG("glBlendFuncSeparatei");
	tracer._glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
void glDrawArraysIndirect_Traced(GLenum mode, const void* indirect)
{
	MYLOG("glDrawArraysIndirect");
	tracer._glDrawArraysIndirect(mode, indirect);
}
void glDrawElementsIndirect_Traced(GLenum mode, GLenum type, const void* indirect)
{
	MYLOG("glDrawElementsIndirect");
	tracer._glDrawElementsIndirect(mode, type, indirect);
}
void glUniform1d_Traced(GLint location, GLdouble x)
{
	MYLOG("glUniform1d");
	tracer._glUniform1d(location, x);
}
void glUniform2d_Traced(GLint location, GLdouble x, GLdouble y)
{
	MYLOG("glUniform2d");
	tracer._glUniform2d(location, x, y);
}
void glUniform3d_Traced(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glUniform3d");
	tracer._glUniform3d(location, x, y, z);
}
void glUniform4d_Traced(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	MYLOG("glUniform4d");
	tracer._glUniform4d(location, x, y, z, w);
}
void glUniform1dv_Traced(GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glUniform1dv");
	tracer._glUniform1dv(location, count, value);
}
void glUniform2dv_Traced(GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glUniform2dv");
	tracer._glUniform2dv(location, count, value);
}
void glUniform3dv_Traced(GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glUniform3dv");
	tracer._glUniform3dv(location, count, value);
}
void glUniform4dv_Traced(GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glUniform4dv");
	tracer._glUniform4dv(location, count, value);
}
void glUniformMatrix2dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix2dv");
	tracer._glUniformMatrix2dv(location, count, transpose, value);
}
void glUniformMatrix3dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix3dv");
	tracer._glUniformMatrix3dv(location, count, transpose, value);
}
void glUniformMatrix4dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix4dv");
	tracer._glUniformMatrix4dv(location, count, transpose, value);
}
void glUniformMatrix2x3dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix2x3dv");
	tracer._glUniformMatrix2x3dv(location, count, transpose, value);
}
void glUniformMatrix2x4dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix2x4dv");
	tracer._glUniformMatrix2x4dv(location, count, transpose, value);
}
void glUniformMatrix3x2dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix3x2dv");
	tracer._glUniformMatrix3x2dv(location, count, transpose, value);
}
void glUniformMatrix3x4dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix3x4dv");
	tracer._glUniformMatrix3x4dv(location, count, transpose, value);
}
void glUniformMatrix4x2dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix4x2dv");
	tracer._glUniformMatrix4x2dv(location, count, transpose, value);
}
void glUniformMatrix4x3dv_Traced(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glUniformMatrix4x3dv");
	tracer._glUniformMatrix4x3dv(location, count, transpose, value);
}
void glGetUniformdv_Traced(GLuint program, GLint location, GLdouble* params)
{
	MYLOG("glGetUniformdv");
	tracer._glGetUniformdv(program, location, params);
}
GLint glGetSubroutineUniformLocation_Traced(GLuint program, GLenum shadertype, const GLchar* name)
{
	MYLOG("glGetSubroutineUniformLocation");
	return tracer._glGetSubroutineUniformLocation(program, shadertype, name);
}
GLuint glGetSubroutineIndex_Traced(GLuint program, GLenum shadertype, const GLchar* name)
{
	MYLOG("glGetSubroutineIndex");
	return tracer._glGetSubroutineIndex(program, shadertype, name);
}
void glGetActiveSubroutineUniformiv_Traced(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values)
{
	MYLOG("glGetActiveSubroutineUniformiv");
	tracer._glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
void glGetActiveSubroutineUniformName_Traced(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)
{
	MYLOG("glGetActiveSubroutineUniformName");
	tracer._glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name);
}
void glGetActiveSubroutineName_Traced(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)
{
	MYLOG("glGetActiveSubroutineName");
	tracer._glGetActiveSubroutineName(program, shadertype, index, bufSize, length, name);
}
void glUniformSubroutinesuiv_Traced(GLenum shadertype, GLsizei count, const GLuint* indices)
{
	MYLOG("glUniformSubroutinesuiv");
	tracer._glUniformSubroutinesuiv(shadertype, count, indices);
}
void glGetUniformSubroutineuiv_Traced(GLenum shadertype, GLint location, GLuint* params)
{
	MYLOG("glGetUniformSubroutineuiv");
	tracer._glGetUniformSubroutineuiv(shadertype, location, params);
}
void glGetProgramStageiv_Traced(GLuint program, GLenum shadertype, GLenum pname, GLint* values)
{
	MYLOG("glGetProgramStageiv");
	tracer._glGetProgramStageiv(program, shadertype, pname, values);
}
void glPatchParameteri_Traced(GLenum pname, GLint value)
{
	MYLOG("glPatchParameteri");
	tracer._glPatchParameteri(pname, value);
}
void glPatchParameterfv_Traced(GLenum pname, const GLfloat* values)
{
	MYLOG("glPatchParameterfv");
	tracer._glPatchParameterfv(pname, values);
}
void glBindTransformFeedback_Traced(GLenum target, GLuint id)
{
	MYLOG("glBindTransformFeedback");
	tracer._glBindTransformFeedback(target, id);
}
void glDeleteTransformFeedbacks_Traced(GLsizei n, const GLuint* ids)
{
	MYLOG("glDeleteTransformFeedbacks");
	tracer._glDeleteTransformFeedbacks(n, ids);
}
void glGenTransformFeedbacks_Traced(GLsizei n, GLuint* ids)
{
	MYLOG("glGenTransformFeedbacks");
	tracer._glGenTransformFeedbacks(n, ids);
}
GLboolean glIsTransformFeedback_Traced(GLuint id)
{
	MYLOG("glIsTransformFeedback");
	return tracer._glIsTransformFeedback(id);
}
void glPauseTransformFeedback_Traced()
{
	MYLOG("glPauseTransformFeedback");
	tracer._glPauseTransformFeedback();
}
void glResumeTransformFeedback_Traced()
{
	MYLOG("glResumeTransformFeedback");
	tracer._glResumeTransformFeedback();
}
void glDrawTransformFeedback_Traced(GLenum mode, GLuint id)
{
	MYLOG("glDrawTransformFeedback");
	tracer._glDrawTransformFeedback(mode, id);
}
void glDrawTransformFeedbackStream_Traced(GLenum mode, GLuint id, GLuint stream)
{
	MYLOG("glDrawTransformFeedbackStream");
	tracer._glDrawTransformFeedbackStream(mode, id, stream);
}
void glBeginQueryIndexed_Traced(GLenum target, GLuint index, GLuint id)
{
	MYLOG("glBeginQueryIndexed");
	tracer._glBeginQueryIndexed(target, index, id);
}
void glEndQueryIndexed_Traced(GLenum target, GLuint index)
{
	MYLOG("glEndQueryIndexed");
	tracer._glEndQueryIndexed(target, index);
}
void glGetQueryIndexediv_Traced(GLenum target, GLuint index, GLenum pname, GLint* params)
{
	MYLOG("glGetQueryIndexediv");
	tracer._glGetQueryIndexediv(target, index, pname, params);
}
void glReleaseShaderCompiler_Traced()
{
	MYLOG("glReleaseShaderCompiler");
	tracer._glReleaseShaderCompiler();
}
void glShaderBinary_Traced(GLsizei count, const GLuint* shaders, GLenum binaryFormat, const void* binary, GLsizei length)
{
	MYLOG("glShaderBinary");
	tracer._glShaderBinary(count, shaders, binaryFormat, binary, length);
}
void glGetShaderPrecisionFormat_Traced(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)
{
	MYLOG("glGetShaderPrecisionFormat");
	tracer._glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
void glDepthRangef_Traced(GLfloat n, GLfloat f)
{
	MYLOG("glDepthRangef");
	tracer._glDepthRangef(n, f);
}
void glClearDepthf_Traced(GLfloat d)
{
	MYLOG("glClearDepthf");
	tracer._glClearDepthf(d);
}
void glGetProgramBinary_Traced(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary)
{
	MYLOG("glGetProgramBinary");
	tracer._glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
void glProgramBinary_Traced(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length)
{
	MYLOG("glProgramBinary");
	tracer._glProgramBinary(program, binaryFormat, binary, length);
}
void glProgramParameteri_Traced(GLuint program, GLenum pname, GLint value)
{
	MYLOG("glProgramParameteri");
	tracer._glProgramParameteri(program, pname, value);
}
void glUseProgramStages_Traced(GLuint pipeline, GLbitfield stages, GLuint program)
{
	MYLOG("glUseProgramStages");
	tracer._glUseProgramStages(pipeline, stages, program);
}
void glActiveShaderProgram_Traced(GLuint pipeline, GLuint program)
{
	MYLOG("glActiveShaderProgram");
	tracer._glActiveShaderProgram(pipeline, program);
}
GLuint glCreateShaderProgramv_Traced(GLenum type, GLsizei count, const GLchar* const* strings)
{
	MYLOG("glCreateShaderProgramv");
	return tracer._glCreateShaderProgramv(type, count, strings);
}
void glBindProgramPipeline_Traced(GLuint pipeline)
{
	MYLOG("glBindProgramPipeline");
	tracer._glBindProgramPipeline(pipeline);
}
void glDeleteProgramPipelines_Traced(GLsizei n, const GLuint* pipelines)
{
	MYLOG("glDeleteProgramPipelines");
	tracer._glDeleteProgramPipelines(n, pipelines);
}
void glGenProgramPipelines_Traced(GLsizei n, GLuint* pipelines)
{
	MYLOG("glGenProgramPipelines");
	tracer._glGenProgramPipelines(n, pipelines);
}
GLboolean glIsProgramPipeline_Traced(GLuint pipeline)
{
	MYLOG("glIsProgramPipeline");
	return tracer._glIsProgramPipeline(pipeline);
}
void glGetProgramPipelineiv_Traced(GLuint pipeline, GLenum pname, GLint* params)
{
	MYLOG("glGetProgramPipelineiv");
	tracer._glGetProgramPipelineiv(pipeline, pname, params);
}
void glProgramUniform1i_Traced(GLuint program, GLint location, GLint v0)
{
	MYLOG("glProgramUniform1i");
	tracer._glProgramUniform1i(program, location, v0);
}
void glProgramUniform1iv_Traced(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glProgramUniform1iv");
	tracer._glProgramUniform1iv(program, location, count, value);
}
void glProgramUniform1f_Traced(GLuint program, GLint location, GLfloat v0)
{
	MYLOG("glProgramUniform1f");
	tracer._glProgramUniform1f(program, location, v0);
}
void glProgramUniform1fv_Traced(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glProgramUniform1fv");
	tracer._glProgramUniform1fv(program, location, count, value);
}
void glProgramUniform1d_Traced(GLuint program, GLint location, GLdouble v0)
{
	MYLOG("glProgramUniform1d");
	tracer._glProgramUniform1d(program, location, v0);
}
void glProgramUniform1dv_Traced(GLuint program, GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glProgramUniform1dv");
	tracer._glProgramUniform1dv(program, location, count, value);
}
void glProgramUniform1ui_Traced(GLuint program, GLint location, GLuint v0)
{
	MYLOG("glProgramUniform1ui");
	tracer._glProgramUniform1ui(program, location, v0);
}
void glProgramUniform1uiv_Traced(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glProgramUniform1uiv");
	tracer._glProgramUniform1uiv(program, location, count, value);
}
void glProgramUniform2i_Traced(GLuint program, GLint location, GLint v0, GLint v1)
{
	MYLOG("glProgramUniform2i");
	tracer._glProgramUniform2i(program, location, v0, v1);
}
void glProgramUniform2iv_Traced(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glProgramUniform2iv");
	tracer._glProgramUniform2iv(program, location, count, value);
}
void glProgramUniform2f_Traced(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
	MYLOG("glProgramUniform2f");
	tracer._glProgramUniform2f(program, location, v0, v1);
}
void glProgramUniform2fv_Traced(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glProgramUniform2fv");
	tracer._glProgramUniform2fv(program, location, count, value);
}
void glProgramUniform2d_Traced(GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
	MYLOG("glProgramUniform2d");
	tracer._glProgramUniform2d(program, location, v0, v1);
}
void glProgramUniform2dv_Traced(GLuint program, GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glProgramUniform2dv");
	tracer._glProgramUniform2dv(program, location, count, value);
}
void glProgramUniform2ui_Traced(GLuint program, GLint location, GLuint v0, GLuint v1)
{
	MYLOG("glProgramUniform2ui");
	tracer._glProgramUniform2ui(program, location, v0, v1);
}
void glProgramUniform2uiv_Traced(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glProgramUniform2uiv");
	tracer._glProgramUniform2uiv(program, location, count, value);
}
void glProgramUniform3i_Traced(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
	MYLOG("glProgramUniform3i");
	tracer._glProgramUniform3i(program, location, v0, v1, v2);
}
void glProgramUniform3iv_Traced(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glProgramUniform3iv");
	tracer._glProgramUniform3iv(program, location, count, value);
}
void glProgramUniform3f_Traced(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	MYLOG("glProgramUniform3f");
	tracer._glProgramUniform3f(program, location, v0, v1, v2);
}
void glProgramUniform3fv_Traced(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glProgramUniform3fv");
	tracer._glProgramUniform3fv(program, location, count, value);
}
void glProgramUniform3d_Traced(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
	MYLOG("glProgramUniform3d");
	tracer._glProgramUniform3d(program, location, v0, v1, v2);
}
void glProgramUniform3dv_Traced(GLuint program, GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glProgramUniform3dv");
	tracer._glProgramUniform3dv(program, location, count, value);
}
void glProgramUniform3ui_Traced(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	MYLOG("glProgramUniform3ui");
	tracer._glProgramUniform3ui(program, location, v0, v1, v2);
}
void glProgramUniform3uiv_Traced(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glProgramUniform3uiv");
	tracer._glProgramUniform3uiv(program, location, count, value);
}
void glProgramUniform4i_Traced(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	MYLOG("glProgramUniform4i");
	tracer._glProgramUniform4i(program, location, v0, v1, v2, v3);
}
void glProgramUniform4iv_Traced(GLuint program, GLint location, GLsizei count, const GLint* value)
{
	MYLOG("glProgramUniform4iv");
	tracer._glProgramUniform4iv(program, location, count, value);
}
void glProgramUniform4f_Traced(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	MYLOG("glProgramUniform4f");
	tracer._glProgramUniform4f(program, location, v0, v1, v2, v3);
}
void glProgramUniform4fv_Traced(GLuint program, GLint location, GLsizei count, const GLfloat* value)
{
	MYLOG("glProgramUniform4fv");
	tracer._glProgramUniform4fv(program, location, count, value);
}
void glProgramUniform4d_Traced(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
	MYLOG("glProgramUniform4d");
	tracer._glProgramUniform4d(program, location, v0, v1, v2, v3);
}
void glProgramUniform4dv_Traced(GLuint program, GLint location, GLsizei count, const GLdouble* value)
{
	MYLOG("glProgramUniform4dv");
	tracer._glProgramUniform4dv(program, location, count, value);
}
void glProgramUniform4ui_Traced(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	MYLOG("glProgramUniform4ui");
	tracer._glProgramUniform4ui(program, location, v0, v1, v2, v3);
}
void glProgramUniform4uiv_Traced(GLuint program, GLint location, GLsizei count, const GLuint* value)
{
	MYLOG("glProgramUniform4uiv");
	tracer._glProgramUniform4uiv(program, location, count, value);
}
void glProgramUniformMatrix2fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix2fv");
	tracer._glProgramUniformMatrix2fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix3fv");
	tracer._glProgramUniformMatrix3fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix4fv");
	tracer._glProgramUniformMatrix4fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix2dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix2dv");
	tracer._glProgramUniformMatrix2dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix3dv");
	tracer._glProgramUniformMatrix3dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix4dv");
	tracer._glProgramUniformMatrix4dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix2x3fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix2x3fv");
	tracer._glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3x2fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix3x2fv");
	tracer._glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix2x4fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix2x4fv");
	tracer._glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4x2fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix4x2fv");
	tracer._glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3x4fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix3x4fv");
	tracer._glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4x3fv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)
{
	MYLOG("glProgramUniformMatrix4x3fv");
	tracer._glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
void glProgramUniformMatrix2x3dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix2x3dv");
	tracer._glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3x2dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix3x2dv");
	tracer._glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix2x4dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix2x4dv");
	tracer._glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4x2dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix4x2dv");
	tracer._glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix3x4dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix3x4dv");
	tracer._glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
void glProgramUniformMatrix4x3dv_Traced(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value)
{
	MYLOG("glProgramUniformMatrix4x3dv");
	tracer._glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
void glValidateProgramPipeline_Traced(GLuint pipeline)
{
	MYLOG("glValidateProgramPipeline");
	tracer._glValidateProgramPipeline(pipeline);
}
void glGetProgramPipelineInfoLog_Traced(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog)
{
	MYLOG("glGetProgramPipelineInfoLog");
	tracer._glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
void glVertexAttribL1d_Traced(GLuint index, GLdouble x)
{
	MYLOG("glVertexAttribL1d");
	tracer._glVertexAttribL1d(index, x);
}
void glVertexAttribL2d_Traced(GLuint index, GLdouble x, GLdouble y)
{
	MYLOG("glVertexAttribL2d");
	tracer._glVertexAttribL2d(index, x, y);
}
void glVertexAttribL3d_Traced(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	MYLOG("glVertexAttribL3d");
	tracer._glVertexAttribL3d(index, x, y, z);
}
void glVertexAttribL4d_Traced(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	MYLOG("glVertexAttribL4d");
	tracer._glVertexAttribL4d(index, x, y, z, w);
}
void glVertexAttribL1dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttribL1dv");
	tracer._glVertexAttribL1dv(index, v);
}
void glVertexAttribL2dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttribL2dv");
	tracer._glVertexAttribL2dv(index, v);
}
void glVertexAttribL3dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttribL3dv");
	tracer._glVertexAttribL3dv(index, v);
}
void glVertexAttribL4dv_Traced(GLuint index, const GLdouble* v)
{
	MYLOG("glVertexAttribL4dv");
	tracer._glVertexAttribL4dv(index, v);
}
void glVertexAttribLPointer_Traced(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer)
{
	MYLOG("glVertexAttribLPointer");
	tracer._glVertexAttribLPointer(index, size, type, stride, pointer);
}
void glGetVertexAttribLdv_Traced(GLuint index, GLenum pname, GLdouble* params)
{
	MYLOG("glGetVertexAttribLdv");
	tracer._glGetVertexAttribLdv(index, pname, params);
}
void glViewportArrayv_Traced(GLuint first, GLsizei count, const GLfloat* v)
{
	MYLOG("glViewportArrayv");
	tracer._glViewportArrayv(first, count, v);
}
void glViewportIndexedf_Traced(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
	MYLOG("glViewportIndexedf");
	tracer._glViewportIndexedf(index, x, y, w, h);
}
void glViewportIndexedfv_Traced(GLuint index, const GLfloat* v)
{
	MYLOG("glViewportIndexedfv");
	tracer._glViewportIndexedfv(index, v);
}
void glScissorArrayv_Traced(GLuint first, GLsizei count, const GLint* v)
{
	MYLOG("glScissorArrayv");
	tracer._glScissorArrayv(first, count, v);
}
void glScissorIndexed_Traced(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
	MYLOG("glScissorIndexed");
	tracer._glScissorIndexed(index, left, bottom, width, height);
}
void glScissorIndexedv_Traced(GLuint index, const GLint* v)
{
	MYLOG("glScissorIndexedv");
	tracer._glScissorIndexedv(index, v);
}
void glDepthRangeArrayv_Traced(GLuint first, GLsizei count, const GLdouble* v)
{
	MYLOG("glDepthRangeArrayv");
	tracer._glDepthRangeArrayv(first, count, v);
}
void glDepthRangeIndexed_Traced(GLuint index, GLdouble n, GLdouble f)
{
	MYLOG("glDepthRangeIndexed");
	tracer._glDepthRangeIndexed(index, n, f);
}
void glGetFloati_v_Traced(GLenum target, GLuint index, GLfloat* data)
{
	MYLOG("glGetFloati_v");
	tracer._glGetFloati_v(target, index, data);
}
void glGetDoublei_v_Traced(GLenum target, GLuint index, GLdouble* data)
{
	MYLOG("glGetDoublei_v");
	tracer._glGetDoublei_v(target, index, data);
}
void glDrawArraysInstancedBaseInstance_Traced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
	MYLOG("glDrawArraysInstancedBaseInstance");
	tracer._glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
void glDrawElementsInstancedBaseInstance_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance)
{
	MYLOG("glDrawElementsInstancedBaseInstance");
	tracer._glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}
void glDrawElementsInstancedBaseVertexBaseInstance_Traced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
	MYLOG("glDrawElementsInstancedBaseVertexBaseInstance");
	tracer._glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
void glGetInternalformativ_Traced(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint* params)
{
	MYLOG("glGetInternalformativ");
	tracer._glGetInternalformativ(target, internalformat, pname, count, params);
}
void glGetActiveAtomicCounterBufferiv_Traced(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params)
{
	MYLOG("glGetActiveAtomicCounterBufferiv");
	tracer._glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
void glBindImageTexture_Traced(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
	MYLOG("glBindImageTexture");
	tracer._glBindImageTexture(unit, texture, level, layered, layer, access, format);
}
void glMemoryBarrier_Traced(GLbitfield barriers)
{
	MYLOG("glMemoryBarrier");
	tracer._glMemoryBarrier(barriers);
}
void glTexStorage1D_Traced(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
	MYLOG("glTexStorage1D");
	tracer._glTexStorage1D(target, levels, internalformat, width);
}
void glTexStorage2D_Traced(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glTexStorage2D");
	tracer._glTexStorage2D(target, levels, internalformat, width, height);
}
void glTexStorage3D_Traced(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	MYLOG("glTexStorage3D");
	tracer._glTexStorage3D(target, levels, internalformat, width, height, depth);
}
void glDrawTransformFeedbackInstanced_Traced(GLenum mode, GLuint id, GLsizei instancecount)
{
	MYLOG("glDrawTransformFeedbackInstanced");
	tracer._glDrawTransformFeedbackInstanced(mode, id, instancecount);
}
void glDrawTransformFeedbackStreamInstanced_Traced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
	MYLOG("glDrawTransformFeedbackStreamInstanced");
	tracer._glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
void glClearBufferData_Traced(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearBufferData");
	tracer._glClearBufferData(target, internalformat, format, type, data);
}
void glClearBufferSubData_Traced(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearBufferSubData");
	tracer._glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}
void glDispatchCompute_Traced(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
	MYLOG("glDispatchCompute");
	tracer._glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
void glDispatchComputeIndirect_Traced(GLintptr indirect)
{
	MYLOG("glDispatchComputeIndirect");
	tracer._glDispatchComputeIndirect(indirect);
}
void glCopyImageSubData_Traced(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
	MYLOG("glCopyImageSubData");
	tracer._glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
void glFramebufferParameteri_Traced(GLenum target, GLenum pname, GLint param)
{
	MYLOG("glFramebufferParameteri");
	tracer._glFramebufferParameteri(target, pname, param);
}
void glGetFramebufferParameteriv_Traced(GLenum target, GLenum pname, GLint* params)
{
	MYLOG("glGetFramebufferParameteriv");
	tracer._glGetFramebufferParameteriv(target, pname, params);
}
void glGetInternalformati64v_Traced(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64* params)
{
	MYLOG("glGetInternalformati64v");
	tracer._glGetInternalformati64v(target, internalformat, pname, count, params);
}
void glInvalidateTexSubImage_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
	MYLOG("glInvalidateTexSubImage");
	tracer._glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
void glInvalidateTexImage_Traced(GLuint texture, GLint level)
{
	MYLOG("glInvalidateTexImage");
	tracer._glInvalidateTexImage(texture, level);
}
void glInvalidateBufferSubData_Traced(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	MYLOG("glInvalidateBufferSubData");
	tracer._glInvalidateBufferSubData(buffer, offset, length);
}
void glInvalidateBufferData_Traced(GLuint buffer)
{
	MYLOG("glInvalidateBufferData");
	tracer._glInvalidateBufferData(buffer);
}
void glInvalidateFramebuffer_Traced(GLenum target, GLsizei numAttachments, const GLenum* attachments)
{
	MYLOG("glInvalidateFramebuffer");
	tracer._glInvalidateFramebuffer(target, numAttachments, attachments);
}
void glInvalidateSubFramebuffer_Traced(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glInvalidateSubFramebuffer");
	tracer._glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
void glMultiDrawArraysIndirect_Traced(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride)
{
	MYLOG("glMultiDrawArraysIndirect");
	tracer._glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
void glMultiDrawElementsIndirect_Traced(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride)
{
	MYLOG("glMultiDrawElementsIndirect");
	tracer._glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}
void glGetProgramInterfaceiv_Traced(GLuint program, GLenum programInterface, GLenum pname, GLint* params)
{
	MYLOG("glGetProgramInterfaceiv");
	tracer._glGetProgramInterfaceiv(program, programInterface, pname, params);
}
GLuint glGetProgramResourceIndex_Traced(GLuint program, GLenum programInterface, const GLchar* name)
{
	MYLOG("glGetProgramResourceIndex");
	return tracer._glGetProgramResourceIndex(program, programInterface, name);
}
void glGetProgramResourceName_Traced(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name)
{
	MYLOG("glGetProgramResourceName");
	tracer._glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
void glGetProgramResourceiv_Traced(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei count, GLsizei* length, GLint* params)
{
	MYLOG("glGetProgramResourceiv");
	tracer._glGetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params);
}
GLint glGetProgramResourceLocation_Traced(GLuint program, GLenum programInterface, const GLchar* name)
{
	MYLOG("glGetProgramResourceLocation");
	return tracer._glGetProgramResourceLocation(program, programInterface, name);
}
GLint glGetProgramResourceLocationIndex_Traced(GLuint program, GLenum programInterface, const GLchar* name)
{
	MYLOG("glGetProgramResourceLocationIndex");
	return tracer._glGetProgramResourceLocationIndex(program, programInterface, name);
}
void glShaderStorageBlockBinding_Traced(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
	MYLOG("glShaderStorageBlockBinding");
	tracer._glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
void glTexBufferRange_Traced(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	MYLOG("glTexBufferRange");
	tracer._glTexBufferRange(target, internalformat, buffer, offset, size);
}
void glTexStorage2DMultisample_Traced(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	MYLOG("glTexStorage2DMultisample");
	tracer._glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
void glTexStorage3DMultisample_Traced(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	MYLOG("glTexStorage3DMultisample");
	tracer._glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void glTextureView_Traced(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
	MYLOG("glTextureView");
	tracer._glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
void glBindVertexBuffer_Traced(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	MYLOG("glBindVertexBuffer");
	tracer._glBindVertexBuffer(bindingindex, buffer, offset, stride);
}
void glVertexAttribFormat_Traced(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	MYLOG("glVertexAttribFormat");
	tracer._glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}
void glVertexAttribIFormat_Traced(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	MYLOG("glVertexAttribIFormat");
	tracer._glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}
void glVertexAttribLFormat_Traced(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	MYLOG("glVertexAttribLFormat");
	tracer._glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}
void glVertexAttribBinding_Traced(GLuint attribindex, GLuint bindingindex)
{
	MYLOG("glVertexAttribBinding");
	tracer._glVertexAttribBinding(attribindex, bindingindex);
}
void glVertexBindingDivisor_Traced(GLuint bindingindex, GLuint divisor)
{
	MYLOG("glVertexBindingDivisor");
	tracer._glVertexBindingDivisor(bindingindex, divisor);
}
void glDebugMessageControl_Traced(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)
{
	MYLOG("glDebugMessageControl");
	tracer._glDebugMessageControl(source, type, severity, count, ids, enabled);
}
void glDebugMessageInsert_Traced(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf)
{
	MYLOG("glDebugMessageInsert");
	tracer._glDebugMessageInsert(source, type, id, severity, length, buf);
}
void glDebugMessageCallback_Traced(GLDEBUGPROC callback, const void* userParam)
{
	MYLOG("glDebugMessageCallback");
	tracer._glDebugMessageCallback(callback, userParam);
}
GLuint glGetDebugMessageLog_Traced(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog)
{
	MYLOG("glGetDebugMessageLog");
	return tracer._glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
void glPushDebugGroup_Traced(GLenum source, GLuint id, GLsizei length, const GLchar* message)
{
	MYLOG("glPushDebugGroup");
	tracer._glPushDebugGroup(source, id, length, message);
}
void glPopDebugGroup_Traced()
{
	MYLOG("glPopDebugGroup");
	tracer._glPopDebugGroup();
}
void glObjectLabel_Traced(GLenum identifier, GLuint name, GLsizei length, const GLchar* label)
{
	MYLOG("glObjectLabel");
	tracer._glObjectLabel(identifier, name, length, label);
}
void glGetObjectLabel_Traced(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label)
{
	MYLOG("glGetObjectLabel");
	tracer._glGetObjectLabel(identifier, name, bufSize, length, label);
}
void glObjectPtrLabel_Traced(const void* ptr, GLsizei length, const GLchar* label)
{
	MYLOG("glObjectPtrLabel");
	tracer._glObjectPtrLabel(ptr, length, label);
}
void glGetObjectPtrLabel_Traced(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label)
{
	MYLOG("glGetObjectPtrLabel");
	tracer._glGetObjectPtrLabel(ptr, bufSize, length, label);
}
void glBufferStorage_Traced(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags)
{
	MYLOG("glBufferStorage");
	tracer._glBufferStorage(target, size, data, flags);
}
void glClearTexImage_Traced(GLuint texture, GLint level, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearTexImage");
	tracer._glClearTexImage(texture, level, format, type, data);
}
void glClearTexSubImage_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearTexSubImage");
	tracer._glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}
void glBindBuffersBase_Traced(GLenum target, GLuint first, GLsizei count, const GLuint* buffers)
{
	MYLOG("glBindBuffersBase");
	tracer._glBindBuffersBase(target, first, count, buffers);
}
void glBindBuffersRange_Traced(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes)
{
	MYLOG("glBindBuffersRange");
	tracer._glBindBuffersRange(target, first, count, buffers, offsets, sizes);
}
void glBindTextures_Traced(GLuint first, GLsizei count, const GLuint* textures)
{
	MYLOG("glBindTextures");
	tracer._glBindTextures(first, count, textures);
}
void glBindSamplers_Traced(GLuint first, GLsizei count, const GLuint* samplers)
{
	MYLOG("glBindSamplers");
	tracer._glBindSamplers(first, count, samplers);
}
void glBindImageTextures_Traced(GLuint first, GLsizei count, const GLuint* textures)
{
	MYLOG("glBindImageTextures");
	tracer._glBindImageTextures(first, count, textures);
}
void glBindVertexBuffers_Traced(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
{
	MYLOG("glBindVertexBuffers");
	tracer._glBindVertexBuffers(first, count, buffers, offsets, strides);
}
void glClipControl_Traced(GLenum origin, GLenum depth)
{
	MYLOG("glClipControl");
	tracer._glClipControl(origin, depth);
}
void glCreateTransformFeedbacks_Traced(GLsizei n, GLuint* ids)
{
	MYLOG("glCreateTransformFeedbacks");
	tracer._glCreateTransformFeedbacks(n, ids);
}
void glTransformFeedbackBufferBase_Traced(GLuint xfb, GLuint index, GLuint buffer)
{
	MYLOG("glTransformFeedbackBufferBase");
	tracer._glTransformFeedbackBufferBase(xfb, index, buffer);
}
void glTransformFeedbackBufferRange_Traced(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	MYLOG("glTransformFeedbackBufferRange");
	tracer._glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}
void glGetTransformFeedbackiv_Traced(GLuint xfb, GLenum pname, GLint* param)
{
	MYLOG("glGetTransformFeedbackiv");
	tracer._glGetTransformFeedbackiv(xfb, pname, param);
}
void glGetTransformFeedbacki_v_Traced(GLuint xfb, GLenum pname, GLuint index, GLint* param)
{
	MYLOG("glGetTransformFeedbacki_v");
	tracer._glGetTransformFeedbacki_v(xfb, pname, index, param);
}
void glGetTransformFeedbacki64_v_Traced(GLuint xfb, GLenum pname, GLuint index, GLint64* param)
{
	MYLOG("glGetTransformFeedbacki64_v");
	tracer._glGetTransformFeedbacki64_v(xfb, pname, index, param);
}
void glCreateBuffers_Traced(GLsizei n, GLuint* buffers)
{
	MYLOG("glCreateBuffers");
	tracer._glCreateBuffers(n, buffers);
}
void glNamedBufferStorage_Traced(GLuint buffer, GLsizeiptr size, const void* data, GLbitfield flags)
{
	MYLOG("glNamedBufferStorage");
	tracer._glNamedBufferStorage(buffer, size, data, flags);
}
void glNamedBufferData_Traced(GLuint buffer, GLsizeiptr size, const void* data, GLenum usage)
{
	MYLOG("glNamedBufferData");
	tracer._glNamedBufferData(buffer, size, data, usage);
}
void glNamedBufferSubData_Traced(GLuint buffer, GLintptr offset, GLsizeiptr size, const void* data)
{
	MYLOG("glNamedBufferSubData");
	tracer._glNamedBufferSubData(buffer, offset, size, data);
}
void glCopyNamedBufferSubData_Traced(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	MYLOG("glCopyNamedBufferSubData");
	tracer._glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
void glClearNamedBufferData_Traced(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearNamedBufferData");
	tracer._glClearNamedBufferData(buffer, internalformat, format, type, data);
}
void glClearNamedBufferSubData_Traced(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data)
{
	MYLOG("glClearNamedBufferSubData");
	tracer._glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}
void* glMapNamedBuffer_Traced(GLuint buffer, GLenum access)
{
	MYLOG("glMapNamedBuffer");
	return tracer._glMapNamedBuffer(buffer, access);
}
void* glMapNamedBufferRange_Traced(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	MYLOG("glMapNamedBufferRange");
	return tracer._glMapNamedBufferRange(buffer, offset, length, access);
}
GLboolean glUnmapNamedBuffer_Traced(GLuint buffer)
{
	MYLOG("glUnmapNamedBuffer");
	return tracer._glUnmapNamedBuffer(buffer);
}
void glFlushMappedNamedBufferRange_Traced(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	MYLOG("glFlushMappedNamedBufferRange");
	tracer._glFlushMappedNamedBufferRange(buffer, offset, length);
}
void glGetNamedBufferParameteriv_Traced(GLuint buffer, GLenum pname, GLint* params)
{
	MYLOG("glGetNamedBufferParameteriv");
	tracer._glGetNamedBufferParameteriv(buffer, pname, params);
}
void glGetNamedBufferParameteri64v_Traced(GLuint buffer, GLenum pname, GLint64* params)
{
	MYLOG("glGetNamedBufferParameteri64v");
	tracer._glGetNamedBufferParameteri64v(buffer, pname, params);
}
void glGetNamedBufferPointerv_Traced(GLuint buffer, GLenum pname, void** params)
{
	MYLOG("glGetNamedBufferPointerv");
	tracer._glGetNamedBufferPointerv(buffer, pname, params);
}
void glGetNamedBufferSubData_Traced(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data)
{
	MYLOG("glGetNamedBufferSubData");
	tracer._glGetNamedBufferSubData(buffer, offset, size, data);
}
void glCreateFramebuffers_Traced(GLsizei n, GLuint* framebuffers)
{
	MYLOG("glCreateFramebuffers");
	tracer._glCreateFramebuffers(n, framebuffers);
}
void glNamedFramebufferRenderbuffer_Traced(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	MYLOG("glNamedFramebufferRenderbuffer");
	tracer._glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
void glNamedFramebufferParameteri_Traced(GLuint framebuffer, GLenum pname, GLint param)
{
	MYLOG("glNamedFramebufferParameteri");
	tracer._glNamedFramebufferParameteri(framebuffer, pname, param);
}
void glNamedFramebufferTexture_Traced(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
	MYLOG("glNamedFramebufferTexture");
	tracer._glNamedFramebufferTexture(framebuffer, attachment, texture, level);
}
void glNamedFramebufferTextureLayer_Traced(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	MYLOG("glNamedFramebufferTextureLayer");
	tracer._glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}
void glNamedFramebufferDrawBuffer_Traced(GLuint framebuffer, GLenum buf)
{
	MYLOG("glNamedFramebufferDrawBuffer");
	tracer._glNamedFramebufferDrawBuffer(framebuffer, buf);
}
void glNamedFramebufferDrawBuffers_Traced(GLuint framebuffer, GLsizei n, const GLenum* bufs)
{
	MYLOG("glNamedFramebufferDrawBuffers");
	tracer._glNamedFramebufferDrawBuffers(framebuffer, n, bufs);
}
void glNamedFramebufferReadBuffer_Traced(GLuint framebuffer, GLenum src)
{
	MYLOG("glNamedFramebufferReadBuffer");
	tracer._glNamedFramebufferReadBuffer(framebuffer, src);
}
void glInvalidateNamedFramebufferData_Traced(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments)
{
	MYLOG("glInvalidateNamedFramebufferData");
	tracer._glInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}
void glInvalidateNamedFramebufferSubData_Traced(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glInvalidateNamedFramebufferSubData");
	tracer._glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}
void glClearNamedFramebufferiv_Traced(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value)
{
	MYLOG("glClearNamedFramebufferiv");
	tracer._glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}
void glClearNamedFramebufferuiv_Traced(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value)
{
	MYLOG("glClearNamedFramebufferuiv");
	tracer._glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}
void glClearNamedFramebufferfv_Traced(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value)
{
	MYLOG("glClearNamedFramebufferfv");
	tracer._glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}
void glClearNamedFramebufferfi_Traced(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
	MYLOG("glClearNamedFramebufferfi");
	tracer._glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}
void glBlitNamedFramebuffer_Traced(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	MYLOG("glBlitNamedFramebuffer");
	tracer._glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
GLenum glCheckNamedFramebufferStatus_Traced(GLuint framebuffer, GLenum target)
{
	MYLOG("glCheckNamedFramebufferStatus");
	return tracer._glCheckNamedFramebufferStatus(framebuffer, target);
}
void glGetNamedFramebufferParameteriv_Traced(GLuint framebuffer, GLenum pname, GLint* param)
{
	MYLOG("glGetNamedFramebufferParameteriv");
	tracer._glGetNamedFramebufferParameteriv(framebuffer, pname, param);
}
void glGetNamedFramebufferAttachmentParameteriv_Traced(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params)
{
	MYLOG("glGetNamedFramebufferAttachmentParameteriv");
	tracer._glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}
void glCreateRenderbuffers_Traced(GLsizei n, GLuint* renderbuffers)
{
	MYLOG("glCreateRenderbuffers");
	tracer._glCreateRenderbuffers(n, renderbuffers);
}
void glNamedRenderbufferStorage_Traced(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glNamedRenderbufferStorage");
	tracer._glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}
void glNamedRenderbufferStorageMultisample_Traced(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glNamedRenderbufferStorageMultisample");
	tracer._glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}
void glGetNamedRenderbufferParameteriv_Traced(GLuint renderbuffer, GLenum pname, GLint* params)
{
	MYLOG("glGetNamedRenderbufferParameteriv");
	tracer._glGetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}
void glCreateTextures_Traced(GLenum target, GLsizei n, GLuint* textures)
{
	MYLOG("glCreateTextures");
	tracer._glCreateTextures(target, n, textures);
}
void glTextureBuffer_Traced(GLuint texture, GLenum internalformat, GLuint buffer)
{
	MYLOG("glTextureBuffer");
	tracer._glTextureBuffer(texture, internalformat, buffer);
}
void glTextureBufferRange_Traced(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	MYLOG("glTextureBufferRange");
	tracer._glTextureBufferRange(texture, internalformat, buffer, offset, size);
}
void glTextureStorage1D_Traced(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
	MYLOG("glTextureStorage1D");
	tracer._glTextureStorage1D(texture, levels, internalformat, width);
}
void glTextureStorage2D_Traced(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	MYLOG("glTextureStorage2D");
	tracer._glTextureStorage2D(texture, levels, internalformat, width, height);
}
void glTextureStorage3D_Traced(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	MYLOG("glTextureStorage3D");
	tracer._glTextureStorage3D(texture, levels, internalformat, width, height, depth);
}
void glTextureStorage2DMultisample_Traced(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	MYLOG("glTextureStorage2DMultisample");
	tracer._glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}
void glTextureStorage3DMultisample_Traced(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	MYLOG("glTextureStorage3DMultisample");
	tracer._glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
void glTextureSubImage1D_Traced(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTextureSubImage1D");
	tracer._glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}
void glTextureSubImage2D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTextureSubImage2D");
	tracer._glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
void glTextureSubImage3D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels)
{
	MYLOG("glTextureSubImage3D");
	tracer._glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
void glCompressedTextureSubImage1D_Traced(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTextureSubImage1D");
	tracer._glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}
void glCompressedTextureSubImage2D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTextureSubImage2D");
	tracer._glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
void glCompressedTextureSubImage3D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data)
{
	MYLOG("glCompressedTextureSubImage3D");
	tracer._glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
void glCopyTextureSubImage1D_Traced(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	MYLOG("glCopyTextureSubImage1D");
	tracer._glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}
void glCopyTextureSubImage2D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glCopyTextureSubImage2D");
	tracer._glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}
void glCopyTextureSubImage3D_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	MYLOG("glCopyTextureSubImage3D");
	tracer._glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
void glTextureParameterf_Traced(GLuint texture, GLenum pname, GLfloat param)
{
	MYLOG("glTextureParameterf");
	tracer._glTextureParameterf(texture, pname, param);
}
void glTextureParameterfv_Traced(GLuint texture, GLenum pname, const GLfloat* param)
{
	MYLOG("glTextureParameterfv");
	tracer._glTextureParameterfv(texture, pname, param);
}
void glTextureParameteri_Traced(GLuint texture, GLenum pname, GLint param)
{
	MYLOG("glTextureParameteri");
	tracer._glTextureParameteri(texture, pname, param);
}
void glTextureParameterIiv_Traced(GLuint texture, GLenum pname, const GLint* params)
{
	MYLOG("glTextureParameterIiv");
	tracer._glTextureParameterIiv(texture, pname, params);
}
void glTextureParameterIuiv_Traced(GLuint texture, GLenum pname, const GLuint* params)
{
	MYLOG("glTextureParameterIuiv");
	tracer._glTextureParameterIuiv(texture, pname, params);
}
void glTextureParameteriv_Traced(GLuint texture, GLenum pname, const GLint* param)
{
	MYLOG("glTextureParameteriv");
	tracer._glTextureParameteriv(texture, pname, param);
}
void glGenerateTextureMipmap_Traced(GLuint texture)
{
	MYLOG("glGenerateTextureMipmap");
	tracer._glGenerateTextureMipmap(texture);
}
void glBindTextureUnit_Traced(GLuint unit, GLuint texture)
{
	MYLOG("glBindTextureUnit");
	tracer._glBindTextureUnit(unit, texture);
}
void glGetTextureImage_Traced(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetTextureImage");
	tracer._glGetTextureImage(texture, level, format, type, bufSize, pixels);
}
void glGetCompressedTextureImage_Traced(GLuint texture, GLint level, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetCompressedTextureImage");
	tracer._glGetCompressedTextureImage(texture, level, bufSize, pixels);
}
void glGetTextureLevelParameterfv_Traced(GLuint texture, GLint level, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTextureLevelParameterfv");
	tracer._glGetTextureLevelParameterfv(texture, level, pname, params);
}
void glGetTextureLevelParameteriv_Traced(GLuint texture, GLint level, GLenum pname, GLint* params)
{
	MYLOG("glGetTextureLevelParameteriv");
	tracer._glGetTextureLevelParameteriv(texture, level, pname, params);
}
void glGetTextureParameterfv_Traced(GLuint texture, GLenum pname, GLfloat* params)
{
	MYLOG("glGetTextureParameterfv");
	tracer._glGetTextureParameterfv(texture, pname, params);
}
void glGetTextureParameterIiv_Traced(GLuint texture, GLenum pname, GLint* params)
{
	MYLOG("glGetTextureParameterIiv");
	tracer._glGetTextureParameterIiv(texture, pname, params);
}
void glGetTextureParameterIuiv_Traced(GLuint texture, GLenum pname, GLuint* params)
{
	MYLOG("glGetTextureParameterIuiv");
	tracer._glGetTextureParameterIuiv(texture, pname, params);
}
void glGetTextureParameteriv_Traced(GLuint texture, GLenum pname, GLint* params)
{
	MYLOG("glGetTextureParameteriv");
	tracer._glGetTextureParameteriv(texture, pname, params);
}
void glCreateVertexArrays_Traced(GLsizei n, GLuint* arrays)
{
	MYLOG("glCreateVertexArrays");
	tracer._glCreateVertexArrays(n, arrays);
}
void glDisableVertexArrayAttrib_Traced(GLuint vaobj, GLuint index)
{
	MYLOG("glDisableVertexArrayAttrib");
	tracer._glDisableVertexArrayAttrib(vaobj, index);
}
void glEnableVertexArrayAttrib_Traced(GLuint vaobj, GLuint index)
{
	MYLOG("glEnableVertexArrayAttrib");
	tracer._glEnableVertexArrayAttrib(vaobj, index);
}
void glVertexArrayElementBuffer_Traced(GLuint vaobj, GLuint buffer)
{
	MYLOG("glVertexArrayElementBuffer");
	tracer._glVertexArrayElementBuffer(vaobj, buffer);
}
void glVertexArrayVertexBuffer_Traced(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	MYLOG("glVertexArrayVertexBuffer");
	tracer._glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}
void glVertexArrayVertexBuffers_Traced(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides)
{
	MYLOG("glVertexArrayVertexBuffers");
	tracer._glVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}
void glVertexArrayAttribBinding_Traced(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
	MYLOG("glVertexArrayAttribBinding");
	tracer._glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}
void glVertexArrayAttribFormat_Traced(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	MYLOG("glVertexArrayAttribFormat");
	tracer._glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}
void glVertexArrayAttribIFormat_Traced(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	MYLOG("glVertexArrayAttribIFormat");
	tracer._glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}
void glVertexArrayAttribLFormat_Traced(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	MYLOG("glVertexArrayAttribLFormat");
	tracer._glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}
void glVertexArrayBindingDivisor_Traced(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
	MYLOG("glVertexArrayBindingDivisor");
	tracer._glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}
void glGetVertexArrayiv_Traced(GLuint vaobj, GLenum pname, GLint* param)
{
	MYLOG("glGetVertexArrayiv");
	tracer._glGetVertexArrayiv(vaobj, pname, param);
}
void glGetVertexArrayIndexediv_Traced(GLuint vaobj, GLuint index, GLenum pname, GLint* param)
{
	MYLOG("glGetVertexArrayIndexediv");
	tracer._glGetVertexArrayIndexediv(vaobj, index, pname, param);
}
void glGetVertexArrayIndexed64iv_Traced(GLuint vaobj, GLuint index, GLenum pname, GLint64* param)
{
	MYLOG("glGetVertexArrayIndexed64iv");
	tracer._glGetVertexArrayIndexed64iv(vaobj, index, pname, param);
}
void glCreateSamplers_Traced(GLsizei n, GLuint* samplers)
{
	MYLOG("glCreateSamplers");
	tracer._glCreateSamplers(n, samplers);
}
void glCreateProgramPipelines_Traced(GLsizei n, GLuint* pipelines)
{
	MYLOG("glCreateProgramPipelines");
	tracer._glCreateProgramPipelines(n, pipelines);
}
void glCreateQueries_Traced(GLenum target, GLsizei n, GLuint* ids)
{
	MYLOG("glCreateQueries");
	tracer._glCreateQueries(target, n, ids);
}
void glGetQueryBufferObjecti64v_Traced(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	MYLOG("glGetQueryBufferObjecti64v");
	tracer._glGetQueryBufferObjecti64v(id, buffer, pname, offset);
}
void glGetQueryBufferObjectiv_Traced(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	MYLOG("glGetQueryBufferObjectiv");
	tracer._glGetQueryBufferObjectiv(id, buffer, pname, offset);
}
void glGetQueryBufferObjectui64v_Traced(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	MYLOG("glGetQueryBufferObjectui64v");
	tracer._glGetQueryBufferObjectui64v(id, buffer, pname, offset);
}
void glGetQueryBufferObjectuiv_Traced(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	MYLOG("glGetQueryBufferObjectuiv");
	tracer._glGetQueryBufferObjectuiv(id, buffer, pname, offset);
}
void glMemoryBarrierByRegion_Traced(GLbitfield barriers)
{
	MYLOG("glMemoryBarrierByRegion");
	tracer._glMemoryBarrierByRegion(barriers);
}
void glGetTextureSubImage_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetTextureSubImage");
	tracer._glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
void glGetCompressedTextureSubImage_Traced(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetCompressedTextureSubImage");
	tracer._glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
GLenum glGetGraphicsResetStatus_Traced()
{
	MYLOG("glGetGraphicsResetStatus");
	return tracer._glGetGraphicsResetStatus();
}
void glGetnCompressedTexImage_Traced(GLenum target, GLint lod, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetnCompressedTexImage");
	tracer._glGetnCompressedTexImage(target, lod, bufSize, pixels);
}
void glGetnTexImage_Traced(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels)
{
	MYLOG("glGetnTexImage");
	tracer._glGetnTexImage(target, level, format, type, bufSize, pixels);
}
void glGetnUniformdv_Traced(GLuint program, GLint location, GLsizei bufSize, GLdouble* params)
{
	MYLOG("glGetnUniformdv");
	tracer._glGetnUniformdv(program, location, bufSize, params);
}
void glGetnUniformfv_Traced(GLuint program, GLint location, GLsizei bufSize, GLfloat* params)
{
	MYLOG("glGetnUniformfv");
	tracer._glGetnUniformfv(program, location, bufSize, params);
}
void glGetnUniformiv_Traced(GLuint program, GLint location, GLsizei bufSize, GLint* params)
{
	MYLOG("glGetnUniformiv");
	tracer._glGetnUniformiv(program, location, bufSize, params);
}
void glGetnUniformuiv_Traced(GLuint program, GLint location, GLsizei bufSize, GLuint* params)
{
	MYLOG("glGetnUniformuiv");
	tracer._glGetnUniformuiv(program, location, bufSize, params);
}
void glReadnPixels_Traced(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data)
{
	MYLOG("glReadnPixels");
	tracer._glReadnPixels(x, y, width, height, format, type, bufSize, data);
}
void glGetnMapdv_Traced(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v)
{
	MYLOG("glGetnMapdv");
	tracer._glGetnMapdv(target, query, bufSize, v);
}
void glGetnMapfv_Traced(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v)
{
	MYLOG("glGetnMapfv");
	tracer._glGetnMapfv(target, query, bufSize, v);
}
void glGetnMapiv_Traced(GLenum target, GLenum query, GLsizei bufSize, GLint* v)
{
	MYLOG("glGetnMapiv");
	tracer._glGetnMapiv(target, query, bufSize, v);
}
void glGetnPixelMapfv_Traced(GLenum map, GLsizei bufSize, GLfloat* values)
{
	MYLOG("glGetnPixelMapfv");
	tracer._glGetnPixelMapfv(map, bufSize, values);
}
void glGetnPixelMapuiv_Traced(GLenum map, GLsizei bufSize, GLuint* values)
{
	MYLOG("glGetnPixelMapuiv");
	tracer._glGetnPixelMapuiv(map, bufSize, values);
}
void glGetnPixelMapusv_Traced(GLenum map, GLsizei bufSize, GLushort* values)
{
	MYLOG("glGetnPixelMapusv");
	tracer._glGetnPixelMapusv(map, bufSize, values);
}
void glGetnPolygonStipple_Traced(GLsizei bufSize, GLubyte* pattern)
{
	MYLOG("glGetnPolygonStipple");
	tracer._glGetnPolygonStipple(bufSize, pattern);
}
void glGetnColorTable_Traced(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table)
{
	MYLOG("glGetnColorTable");
	tracer._glGetnColorTable(target, format, type, bufSize, table);
}
void glGetnConvolutionFilter_Traced(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image)
{
	MYLOG("glGetnConvolutionFilter");
	tracer._glGetnConvolutionFilter(target, format, type, bufSize, image);
}
void glGetnSeparableFilter_Traced(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span)
{
	MYLOG("glGetnSeparableFilter");
	tracer._glGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span);
}
void glGetnHistogram_Traced(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
{
	MYLOG("glGetnHistogram");
	tracer._glGetnHistogram(target, reset, format, type, bufSize, values);
}
void glGetnMinmax_Traced(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values)
{
	MYLOG("glGetnMinmax");
	tracer._glGetnMinmax(target, reset, format, type, bufSize, values);
}
void glTextureBarrier_Traced()
{
	MYLOG("glTextureBarrier");
	tracer._glTextureBarrier();
}
void glSpecializeShader_Traced(GLuint shader, const GLchar* pEntryPoint, GLuint numSpecializationConstants, const GLuint* pConstantIndex, const GLuint* pConstantValue)
{
	MYLOG("glSpecializeShader");
	tracer._glSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}
void glMultiDrawArraysIndirectCount_Traced(GLenum mode, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
	MYLOG("glMultiDrawArraysIndirectCount");
	tracer._glMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride);
}
void glMultiDrawElementsIndirectCount_Traced(GLenum mode, GLenum type, const void* indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
	MYLOG("glMultiDrawElementsIndirectCount");
	tracer._glMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride);
}
void glPolygonOffsetClamp_Traced(GLfloat factor, GLfloat units, GLfloat clamp)
{
	MYLOG("glPolygonOffsetClamp");
	tracer._glPolygonOffsetClamp(factor, units, clamp);
}


void HookGLTrace()
{
	HOOK_GL_FUNC(glCullFace);
	HOOK_GL_FUNC(glFrontFace);
	HOOK_GL_FUNC(glHint);
	HOOK_GL_FUNC(glLineWidth);
	HOOK_GL_FUNC(glPointSize);
	HOOK_GL_FUNC(glPolygonMode);
	HOOK_GL_FUNC(glScissor);
	HOOK_GL_FUNC(glTexParameterf);
	HOOK_GL_FUNC(glTexParameterfv);
	HOOK_GL_FUNC(glTexParameteri);
	HOOK_GL_FUNC(glTexParameteriv);
	HOOK_GL_FUNC(glTexImage1D);
	HOOK_GL_FUNC(glTexImage2D);
	HOOK_GL_FUNC(glDrawBuffer);
	HOOK_GL_FUNC(glClear);
	HOOK_GL_FUNC(glClearColor);
	HOOK_GL_FUNC(glClearStencil);
	HOOK_GL_FUNC(glClearDepth);
	HOOK_GL_FUNC(glStencilMask);
	HOOK_GL_FUNC(glColorMask);
	HOOK_GL_FUNC(glDepthMask);
	HOOK_GL_FUNC(glDisable);
	HOOK_GL_FUNC(glEnable);
	HOOK_GL_FUNC(glFinish);
	HOOK_GL_FUNC(glFlush);
	HOOK_GL_FUNC(glBlendFunc);
	HOOK_GL_FUNC(glLogicOp);
	HOOK_GL_FUNC(glStencilFunc);
	HOOK_GL_FUNC(glStencilOp);
	HOOK_GL_FUNC(glDepthFunc);
	HOOK_GL_FUNC(glPixelStoref);
	HOOK_GL_FUNC(glPixelStorei);
	HOOK_GL_FUNC(glReadBuffer);
	HOOK_GL_FUNC(glReadPixels);
	HOOK_GL_FUNC(glGetBooleanv);
	HOOK_GL_FUNC(glGetDoublev);
	HOOK_GL_FUNC(glGetError);
	HOOK_GL_FUNC(glGetFloatv);
	HOOK_GL_FUNC(glGetIntegerv);
	HOOK_GL_FUNC(glGetString);
	HOOK_GL_FUNC(glGetTexImage);
	HOOK_GL_FUNC(glGetTexParameterfv);
	HOOK_GL_FUNC(glGetTexParameteriv);
	HOOK_GL_FUNC(glGetTexLevelParameterfv);
	HOOK_GL_FUNC(glGetTexLevelParameteriv);
	HOOK_GL_FUNC(glIsEnabled);
	HOOK_GL_FUNC(glDepthRange);
	HOOK_GL_FUNC(glViewport);
	HOOK_GL_FUNC(glNewList);
	HOOK_GL_FUNC(glEndList);
	HOOK_GL_FUNC(glCallList);
	HOOK_GL_FUNC(glCallLists);
	HOOK_GL_FUNC(glDeleteLists);
	HOOK_GL_FUNC(glGenLists);
	HOOK_GL_FUNC(glListBase);
	HOOK_GL_FUNC(glBegin);
	HOOK_GL_FUNC(glBitmap);
	HOOK_GL_FUNC(glColor3b);
	HOOK_GL_FUNC(glColor3bv);
	HOOK_GL_FUNC(glColor3d);
	HOOK_GL_FUNC(glColor3dv);
	HOOK_GL_FUNC(glColor3f);
	HOOK_GL_FUNC(glColor3fv);
	HOOK_GL_FUNC(glColor3i);
	HOOK_GL_FUNC(glColor3iv);
	HOOK_GL_FUNC(glColor3s);
	HOOK_GL_FUNC(glColor3sv);
	HOOK_GL_FUNC(glColor3ub);
	HOOK_GL_FUNC(glColor3ubv);
	HOOK_GL_FUNC(glColor3ui);
	HOOK_GL_FUNC(glColor3uiv);
	HOOK_GL_FUNC(glColor3us);
	HOOK_GL_FUNC(glColor3usv);
	HOOK_GL_FUNC(glColor4b);
	HOOK_GL_FUNC(glColor4bv);
	HOOK_GL_FUNC(glColor4d);
	HOOK_GL_FUNC(glColor4dv);
	HOOK_GL_FUNC(glColor4f);
	HOOK_GL_FUNC(glColor4fv);
	HOOK_GL_FUNC(glColor4i);
	HOOK_GL_FUNC(glColor4iv);
	HOOK_GL_FUNC(glColor4s);
	HOOK_GL_FUNC(glColor4sv);
	HOOK_GL_FUNC(glColor4ub);
	HOOK_GL_FUNC(glColor4ubv);
	HOOK_GL_FUNC(glColor4ui);
	HOOK_GL_FUNC(glColor4uiv);
	HOOK_GL_FUNC(glColor4us);
	HOOK_GL_FUNC(glColor4usv);
	HOOK_GL_FUNC(glEdgeFlag);
	HOOK_GL_FUNC(glEdgeFlagv);
	HOOK_GL_FUNC(glEnd);
	HOOK_GL_FUNC(glIndexd);
	HOOK_GL_FUNC(glIndexdv);
	HOOK_GL_FUNC(glIndexf);
	HOOK_GL_FUNC(glIndexfv);
	HOOK_GL_FUNC(glIndexi);
	HOOK_GL_FUNC(glIndexiv);
	HOOK_GL_FUNC(glIndexs);
	HOOK_GL_FUNC(glIndexsv);
	HOOK_GL_FUNC(glNormal3b);
	HOOK_GL_FUNC(glNormal3bv);
	HOOK_GL_FUNC(glNormal3d);
	HOOK_GL_FUNC(glNormal3dv);
	HOOK_GL_FUNC(glNormal3f);
	HOOK_GL_FUNC(glNormal3fv);
	HOOK_GL_FUNC(glNormal3i);
	HOOK_GL_FUNC(glNormal3iv);
	HOOK_GL_FUNC(glNormal3s);
	HOOK_GL_FUNC(glNormal3sv);
	HOOK_GL_FUNC(glRasterPos2d);
	HOOK_GL_FUNC(glRasterPos2dv);
	HOOK_GL_FUNC(glRasterPos2f);
	HOOK_GL_FUNC(glRasterPos2fv);
	HOOK_GL_FUNC(glRasterPos2i);
	HOOK_GL_FUNC(glRasterPos2iv);
	HOOK_GL_FUNC(glRasterPos2s);
	HOOK_GL_FUNC(glRasterPos2sv);
	HOOK_GL_FUNC(glRasterPos3d);
	HOOK_GL_FUNC(glRasterPos3dv);
	HOOK_GL_FUNC(glRasterPos3f);
	HOOK_GL_FUNC(glRasterPos3fv);
	HOOK_GL_FUNC(glRasterPos3i);
	HOOK_GL_FUNC(glRasterPos3iv);
	HOOK_GL_FUNC(glRasterPos3s);
	HOOK_GL_FUNC(glRasterPos3sv);
	HOOK_GL_FUNC(glRasterPos4d);
	HOOK_GL_FUNC(glRasterPos4dv);
	HOOK_GL_FUNC(glRasterPos4f);
	HOOK_GL_FUNC(glRasterPos4fv);
	HOOK_GL_FUNC(glRasterPos4i);
	HOOK_GL_FUNC(glRasterPos4iv);
	HOOK_GL_FUNC(glRasterPos4s);
	HOOK_GL_FUNC(glRasterPos4sv);
	HOOK_GL_FUNC(glRectd);
	HOOK_GL_FUNC(glRectdv);
	HOOK_GL_FUNC(glRectf);
	HOOK_GL_FUNC(glRectfv);
	HOOK_GL_FUNC(glRecti);
	HOOK_GL_FUNC(glRectiv);
	HOOK_GL_FUNC(glRects);
	HOOK_GL_FUNC(glRectsv);
	HOOK_GL_FUNC(glTexCoord1d);
	HOOK_GL_FUNC(glTexCoord1dv);
	HOOK_GL_FUNC(glTexCoord1f);
	HOOK_GL_FUNC(glTexCoord1fv);
	HOOK_GL_FUNC(glTexCoord1i);
	HOOK_GL_FUNC(glTexCoord1iv);
	HOOK_GL_FUNC(glTexCoord1s);
	HOOK_GL_FUNC(glTexCoord1sv);
	HOOK_GL_FUNC(glTexCoord2d);
	HOOK_GL_FUNC(glTexCoord2dv);
	HOOK_GL_FUNC(glTexCoord2f);
	HOOK_GL_FUNC(glTexCoord2fv);
	HOOK_GL_FUNC(glTexCoord2i);
	HOOK_GL_FUNC(glTexCoord2iv);
	HOOK_GL_FUNC(glTexCoord2s);
	HOOK_GL_FUNC(glTexCoord2sv);
	HOOK_GL_FUNC(glTexCoord3d);
	HOOK_GL_FUNC(glTexCoord3dv);
	HOOK_GL_FUNC(glTexCoord3f);
	HOOK_GL_FUNC(glTexCoord3fv);
	HOOK_GL_FUNC(glTexCoord3i);
	HOOK_GL_FUNC(glTexCoord3iv);
	HOOK_GL_FUNC(glTexCoord3s);
	HOOK_GL_FUNC(glTexCoord3sv);
	HOOK_GL_FUNC(glTexCoord4d);
	HOOK_GL_FUNC(glTexCoord4dv);
	HOOK_GL_FUNC(glTexCoord4f);
	HOOK_GL_FUNC(glTexCoord4fv);
	HOOK_GL_FUNC(glTexCoord4i);
	HOOK_GL_FUNC(glTexCoord4iv);
	HOOK_GL_FUNC(glTexCoord4s);
	HOOK_GL_FUNC(glTexCoord4sv);
	HOOK_GL_FUNC(glVertex2d);
	HOOK_GL_FUNC(glVertex2dv);
	HOOK_GL_FUNC(glVertex2f);
	HOOK_GL_FUNC(glVertex2fv);
	HOOK_GL_FUNC(glVertex2i);
	HOOK_GL_FUNC(glVertex2iv);
	HOOK_GL_FUNC(glVertex2s);
	HOOK_GL_FUNC(glVertex2sv);
	HOOK_GL_FUNC(glVertex3d);
	HOOK_GL_FUNC(glVertex3dv);
	HOOK_GL_FUNC(glVertex3f);
	HOOK_GL_FUNC(glVertex3fv);
	HOOK_GL_FUNC(glVertex3i);
	HOOK_GL_FUNC(glVertex3iv);
	HOOK_GL_FUNC(glVertex3s);
	HOOK_GL_FUNC(glVertex3sv);
	HOOK_GL_FUNC(glVertex4d);
	HOOK_GL_FUNC(glVertex4dv);
	HOOK_GL_FUNC(glVertex4f);
	HOOK_GL_FUNC(glVertex4fv);
	HOOK_GL_FUNC(glVertex4i);
	HOOK_GL_FUNC(glVertex4iv);
	HOOK_GL_FUNC(glVertex4s);
	HOOK_GL_FUNC(glVertex4sv);
	HOOK_GL_FUNC(glClipPlane);
	HOOK_GL_FUNC(glColorMaterial);
	HOOK_GL_FUNC(glFogf);
	HOOK_GL_FUNC(glFogfv);
	HOOK_GL_FUNC(glFogi);
	HOOK_GL_FUNC(glFogiv);
	HOOK_GL_FUNC(glLightf);
	HOOK_GL_FUNC(glLightfv);
	HOOK_GL_FUNC(glLighti);
	HOOK_GL_FUNC(glLightiv);
	HOOK_GL_FUNC(glLightModelf);
	HOOK_GL_FUNC(glLightModelfv);
	HOOK_GL_FUNC(glLightModeli);
	HOOK_GL_FUNC(glLightModeliv);
	HOOK_GL_FUNC(glLineStipple);
	HOOK_GL_FUNC(glMaterialf);
	HOOK_GL_FUNC(glMaterialfv);
	HOOK_GL_FUNC(glMateriali);
	HOOK_GL_FUNC(glMaterialiv);
	HOOK_GL_FUNC(glPolygonStipple);
	HOOK_GL_FUNC(glShadeModel);
	HOOK_GL_FUNC(glTexEnvf);
	HOOK_GL_FUNC(glTexEnvfv);
	HOOK_GL_FUNC(glTexEnvi);
	HOOK_GL_FUNC(glTexEnviv);
	HOOK_GL_FUNC(glTexGend);
	HOOK_GL_FUNC(glTexGendv);
	HOOK_GL_FUNC(glTexGenf);
	HOOK_GL_FUNC(glTexGenfv);
	HOOK_GL_FUNC(glTexGeni);
	HOOK_GL_FUNC(glTexGeniv);
	HOOK_GL_FUNC(glFeedbackBuffer);
	HOOK_GL_FUNC(glSelectBuffer);
	HOOK_GL_FUNC(glRenderMode);
	HOOK_GL_FUNC(glInitNames);
	HOOK_GL_FUNC(glLoadName);
	HOOK_GL_FUNC(glPassThrough);
	HOOK_GL_FUNC(glPopName);
	HOOK_GL_FUNC(glPushName);
	HOOK_GL_FUNC(glClearAccum);
	HOOK_GL_FUNC(glClearIndex);
	HOOK_GL_FUNC(glIndexMask);
	HOOK_GL_FUNC(glAccum);
	HOOK_GL_FUNC(glPopAttrib);
	HOOK_GL_FUNC(glPushAttrib);
	HOOK_GL_FUNC(glMap1d);
	HOOK_GL_FUNC(glMap1f);
	HOOK_GL_FUNC(glMap2d);
	HOOK_GL_FUNC(glMap2f);
	HOOK_GL_FUNC(glMapGrid1d);
	HOOK_GL_FUNC(glMapGrid1f);
	HOOK_GL_FUNC(glMapGrid2d);
	HOOK_GL_FUNC(glMapGrid2f);
	HOOK_GL_FUNC(glEvalCoord1d);
	HOOK_GL_FUNC(glEvalCoord1dv);
	HOOK_GL_FUNC(glEvalCoord1f);
	HOOK_GL_FUNC(glEvalCoord1fv);
	HOOK_GL_FUNC(glEvalCoord2d);
	HOOK_GL_FUNC(glEvalCoord2dv);
	HOOK_GL_FUNC(glEvalCoord2f);
	HOOK_GL_FUNC(glEvalCoord2fv);
	HOOK_GL_FUNC(glEvalMesh1);
	HOOK_GL_FUNC(glEvalPoint1);
	HOOK_GL_FUNC(glEvalMesh2);
	HOOK_GL_FUNC(glEvalPoint2);
	HOOK_GL_FUNC(glAlphaFunc);
	HOOK_GL_FUNC(glPixelZoom);
	HOOK_GL_FUNC(glPixelTransferf);
	HOOK_GL_FUNC(glPixelTransferi);
	HOOK_GL_FUNC(glPixelMapfv);
	HOOK_GL_FUNC(glPixelMapuiv);
	HOOK_GL_FUNC(glPixelMapusv);
	HOOK_GL_FUNC(glCopyPixels);
	HOOK_GL_FUNC(glDrawPixels);
	HOOK_GL_FUNC(glGetClipPlane);
	HOOK_GL_FUNC(glGetLightfv);
	HOOK_GL_FUNC(glGetLightiv);
	HOOK_GL_FUNC(glGetMapdv);
	HOOK_GL_FUNC(glGetMapfv);
	HOOK_GL_FUNC(glGetMapiv);
	HOOK_GL_FUNC(glGetMaterialfv);
	HOOK_GL_FUNC(glGetMaterialiv);
	HOOK_GL_FUNC(glGetPixelMapfv);
	HOOK_GL_FUNC(glGetPixelMapuiv);
	HOOK_GL_FUNC(glGetPixelMapusv);
	HOOK_GL_FUNC(glGetPolygonStipple);
	HOOK_GL_FUNC(glGetTexEnvfv);
	HOOK_GL_FUNC(glGetTexEnviv);
	HOOK_GL_FUNC(glGetTexGendv);
	HOOK_GL_FUNC(glGetTexGenfv);
	HOOK_GL_FUNC(glGetTexGeniv);
	HOOK_GL_FUNC(glIsList);
	HOOK_GL_FUNC(glFrustum);
	HOOK_GL_FUNC(glLoadIdentity);
	HOOK_GL_FUNC(glLoadMatrixf);
	HOOK_GL_FUNC(glLoadMatrixd);
	HOOK_GL_FUNC(glMatrixMode);
	HOOK_GL_FUNC(glMultMatrixf);
	HOOK_GL_FUNC(glMultMatrixd);
	HOOK_GL_FUNC(glOrtho);
	HOOK_GL_FUNC(glPopMatrix);
	HOOK_GL_FUNC(glPushMatrix);
	HOOK_GL_FUNC(glRotated);
	HOOK_GL_FUNC(glRotatef);
	HOOK_GL_FUNC(glScaled);
	HOOK_GL_FUNC(glScalef);
	HOOK_GL_FUNC(glTranslated);
	HOOK_GL_FUNC(glTranslatef);
	HOOK_GL_FUNC(glDrawArrays);
	HOOK_GL_FUNC(glDrawElements);
	HOOK_GL_FUNC(glGetPointerv);
	HOOK_GL_FUNC(glPolygonOffset);
	HOOK_GL_FUNC(glCopyTexImage1D);
	HOOK_GL_FUNC(glCopyTexImage2D);
	HOOK_GL_FUNC(glCopyTexSubImage1D);
	HOOK_GL_FUNC(glCopyTexSubImage2D);
	HOOK_GL_FUNC(glTexSubImage1D);
	HOOK_GL_FUNC(glTexSubImage2D);
	HOOK_GL_FUNC(glBindTexture);
	HOOK_GL_FUNC(glDeleteTextures);
	HOOK_GL_FUNC(glGenTextures);
	HOOK_GL_FUNC(glIsTexture);
	HOOK_GL_FUNC(glArrayElement);
	HOOK_GL_FUNC(glColorPointer);
	HOOK_GL_FUNC(glDisableClientState);
	HOOK_GL_FUNC(glEdgeFlagPointer);
	HOOK_GL_FUNC(glEnableClientState);
	HOOK_GL_FUNC(glIndexPointer);
	HOOK_GL_FUNC(glInterleavedArrays);
	HOOK_GL_FUNC(glNormalPointer);
	HOOK_GL_FUNC(glTexCoordPointer);
	HOOK_GL_FUNC(glVertexPointer);
	HOOK_GL_FUNC(glAreTexturesResident);
	HOOK_GL_FUNC(glPrioritizeTextures);
	HOOK_GL_FUNC(glIndexub);
	HOOK_GL_FUNC(glIndexubv);
	HOOK_GL_FUNC(glPopClientAttrib);
	HOOK_GL_FUNC(glPushClientAttrib);
	HOOK_GL_FUNC(glDrawRangeElements);
	HOOK_GL_FUNC(glTexImage3D);
	HOOK_GL_FUNC(glTexSubImage3D);
	HOOK_GL_FUNC(glCopyTexSubImage3D);
	HOOK_GL_FUNC(glActiveTexture);
	HOOK_GL_FUNC(glSampleCoverage);
	HOOK_GL_FUNC(glCompressedTexImage3D);
	HOOK_GL_FUNC(glCompressedTexImage2D);
	HOOK_GL_FUNC(glCompressedTexImage1D);
	HOOK_GL_FUNC(glCompressedTexSubImage3D);
	HOOK_GL_FUNC(glCompressedTexSubImage2D);
	HOOK_GL_FUNC(glCompressedTexSubImage1D);
	HOOK_GL_FUNC(glGetCompressedTexImage);
	HOOK_GL_FUNC(glClientActiveTexture);
	HOOK_GL_FUNC(glMultiTexCoord1d);
	HOOK_GL_FUNC(glMultiTexCoord1dv);
	HOOK_GL_FUNC(glMultiTexCoord1f);
	HOOK_GL_FUNC(glMultiTexCoord1fv);
	HOOK_GL_FUNC(glMultiTexCoord1i);
	HOOK_GL_FUNC(glMultiTexCoord1iv);
	HOOK_GL_FUNC(glMultiTexCoord1s);
	HOOK_GL_FUNC(glMultiTexCoord1sv);
	HOOK_GL_FUNC(glMultiTexCoord2d);
	HOOK_GL_FUNC(glMultiTexCoord2dv);
	HOOK_GL_FUNC(glMultiTexCoord2f);
	HOOK_GL_FUNC(glMultiTexCoord2fv);
	HOOK_GL_FUNC(glMultiTexCoord2i);
	HOOK_GL_FUNC(glMultiTexCoord2iv);
	HOOK_GL_FUNC(glMultiTexCoord2s);
	HOOK_GL_FUNC(glMultiTexCoord2sv);
	HOOK_GL_FUNC(glMultiTexCoord3d);
	HOOK_GL_FUNC(glMultiTexCoord3dv);
	HOOK_GL_FUNC(glMultiTexCoord3f);
	HOOK_GL_FUNC(glMultiTexCoord3fv);
	HOOK_GL_FUNC(glMultiTexCoord3i);
	HOOK_GL_FUNC(glMultiTexCoord3iv);
	HOOK_GL_FUNC(glMultiTexCoord3s);
	HOOK_GL_FUNC(glMultiTexCoord3sv);
	HOOK_GL_FUNC(glMultiTexCoord4d);
	HOOK_GL_FUNC(glMultiTexCoord4dv);
	HOOK_GL_FUNC(glMultiTexCoord4f);
	HOOK_GL_FUNC(glMultiTexCoord4fv);
	HOOK_GL_FUNC(glMultiTexCoord4i);
	HOOK_GL_FUNC(glMultiTexCoord4iv);
	HOOK_GL_FUNC(glMultiTexCoord4s);
	HOOK_GL_FUNC(glMultiTexCoord4sv);
	HOOK_GL_FUNC(glLoadTransposeMatrixf);
	HOOK_GL_FUNC(glLoadTransposeMatrixd);
	HOOK_GL_FUNC(glMultTransposeMatrixf);
	HOOK_GL_FUNC(glMultTransposeMatrixd);
	HOOK_GL_FUNC(glBlendFuncSeparate);
	HOOK_GL_FUNC(glMultiDrawArrays);
	HOOK_GL_FUNC(glMultiDrawElements);
	HOOK_GL_FUNC(glPointParameterf);
	HOOK_GL_FUNC(glPointParameterfv);
	HOOK_GL_FUNC(glPointParameteri);
	HOOK_GL_FUNC(glPointParameteriv);
	HOOK_GL_FUNC(glFogCoordf);
	HOOK_GL_FUNC(glFogCoordfv);
	HOOK_GL_FUNC(glFogCoordd);
	HOOK_GL_FUNC(glFogCoorddv);
	HOOK_GL_FUNC(glFogCoordPointer);
	HOOK_GL_FUNC(glSecondaryColor3b);
	HOOK_GL_FUNC(glSecondaryColor3bv);
	HOOK_GL_FUNC(glSecondaryColor3d);
	HOOK_GL_FUNC(glSecondaryColor3dv);
	HOOK_GL_FUNC(glSecondaryColor3f);
	HOOK_GL_FUNC(glSecondaryColor3fv);
	HOOK_GL_FUNC(glSecondaryColor3i);
	HOOK_GL_FUNC(glSecondaryColor3iv);
	HOOK_GL_FUNC(glSecondaryColor3s);
	HOOK_GL_FUNC(glSecondaryColor3sv);
	HOOK_GL_FUNC(glSecondaryColor3ub);
	HOOK_GL_FUNC(glSecondaryColor3ubv);
	HOOK_GL_FUNC(glSecondaryColor3ui);
	HOOK_GL_FUNC(glSecondaryColor3uiv);
	HOOK_GL_FUNC(glSecondaryColor3us);
	HOOK_GL_FUNC(glSecondaryColor3usv);
	HOOK_GL_FUNC(glSecondaryColorPointer);
	HOOK_GL_FUNC(glWindowPos2d);
	HOOK_GL_FUNC(glWindowPos2dv);
	HOOK_GL_FUNC(glWindowPos2f);
	HOOK_GL_FUNC(glWindowPos2fv);
	HOOK_GL_FUNC(glWindowPos2i);
	HOOK_GL_FUNC(glWindowPos2iv);
	HOOK_GL_FUNC(glWindowPos2s);
	HOOK_GL_FUNC(glWindowPos2sv);
	HOOK_GL_FUNC(glWindowPos3d);
	HOOK_GL_FUNC(glWindowPos3dv);
	HOOK_GL_FUNC(glWindowPos3f);
	HOOK_GL_FUNC(glWindowPos3fv);
	HOOK_GL_FUNC(glWindowPos3i);
	HOOK_GL_FUNC(glWindowPos3iv);
	HOOK_GL_FUNC(glWindowPos3s);
	HOOK_GL_FUNC(glWindowPos3sv);
	HOOK_GL_FUNC(glBlendColor);
	HOOK_GL_FUNC(glBlendEquation);
	HOOK_GL_FUNC(glGenQueries);
	HOOK_GL_FUNC(glDeleteQueries);
	HOOK_GL_FUNC(glIsQuery);
	HOOK_GL_FUNC(glBeginQuery);
	HOOK_GL_FUNC(glEndQuery);
	HOOK_GL_FUNC(glGetQueryiv);
	HOOK_GL_FUNC(glGetQueryObjectiv);
	HOOK_GL_FUNC(glGetQueryObjectuiv);
	HOOK_GL_FUNC(glBindBuffer);
	HOOK_GL_FUNC(glDeleteBuffers);
	HOOK_GL_FUNC(glGenBuffers);
	HOOK_GL_FUNC(glIsBuffer);
	HOOK_GL_FUNC(glBufferData);
	HOOK_GL_FUNC(glBufferSubData);
	HOOK_GL_FUNC(glGetBufferSubData);
	HOOK_GL_FUNC(glMapBuffer);
	HOOK_GL_FUNC(glUnmapBuffer);
	HOOK_GL_FUNC(glGetBufferParameteriv);
	HOOK_GL_FUNC(glGetBufferPointerv);
	HOOK_GL_FUNC(glBlendEquationSeparate);
	HOOK_GL_FUNC(glDrawBuffers);
	HOOK_GL_FUNC(glStencilOpSeparate);
	HOOK_GL_FUNC(glStencilFuncSeparate);
	HOOK_GL_FUNC(glStencilMaskSeparate);
	HOOK_GL_FUNC(glAttachShader);
	HOOK_GL_FUNC(glBindAttribLocation);
	HOOK_GL_FUNC(glCompileShader);
	HOOK_GL_FUNC(glCreateProgram);
	HOOK_GL_FUNC(glCreateShader);
	HOOK_GL_FUNC(glDeleteProgram);
	HOOK_GL_FUNC(glDeleteShader);
	HOOK_GL_FUNC(glDetachShader);
	HOOK_GL_FUNC(glDisableVertexAttribArray);
	HOOK_GL_FUNC(glEnableVertexAttribArray);
	HOOK_GL_FUNC(glGetActiveAttrib);
	HOOK_GL_FUNC(glGetActiveUniform);
	HOOK_GL_FUNC(glGetAttachedShaders);
	HOOK_GL_FUNC(glGetAttribLocation);
	HOOK_GL_FUNC(glGetProgramiv);
	HOOK_GL_FUNC(glGetProgramInfoLog);
	HOOK_GL_FUNC(glGetShaderiv);
	HOOK_GL_FUNC(glGetShaderInfoLog);
	HOOK_GL_FUNC(glGetShaderSource);
	HOOK_GL_FUNC(glGetUniformLocation);
	HOOK_GL_FUNC(glGetUniformfv);
	HOOK_GL_FUNC(glGetUniformiv);
	HOOK_GL_FUNC(glGetVertexAttribdv);
	HOOK_GL_FUNC(glGetVertexAttribfv);
	HOOK_GL_FUNC(glGetVertexAttribiv);
	HOOK_GL_FUNC(glGetVertexAttribPointerv);
	HOOK_GL_FUNC(glIsProgram);
	HOOK_GL_FUNC(glIsShader);
	HOOK_GL_FUNC(glLinkProgram);
	HOOK_GL_FUNC(glShaderSource);
	HOOK_GL_FUNC(glUseProgram);
	HOOK_GL_FUNC(glUniform1f);
	HOOK_GL_FUNC(glUniform2f);
	HOOK_GL_FUNC(glUniform3f);
	HOOK_GL_FUNC(glUniform4f);
	HOOK_GL_FUNC(glUniform1i);
	HOOK_GL_FUNC(glUniform2i);
	HOOK_GL_FUNC(glUniform3i);
	HOOK_GL_FUNC(glUniform4i);
	HOOK_GL_FUNC(glUniform1fv);
	HOOK_GL_FUNC(glUniform2fv);
	HOOK_GL_FUNC(glUniform3fv);
	HOOK_GL_FUNC(glUniform4fv);
	HOOK_GL_FUNC(glUniform1iv);
	HOOK_GL_FUNC(glUniform2iv);
	HOOK_GL_FUNC(glUniform3iv);
	HOOK_GL_FUNC(glUniform4iv);
	HOOK_GL_FUNC(glUniformMatrix2fv);
	HOOK_GL_FUNC(glUniformMatrix3fv);
	HOOK_GL_FUNC(glUniformMatrix4fv);
	HOOK_GL_FUNC(glValidateProgram);
	HOOK_GL_FUNC(glVertexAttrib1d);
	HOOK_GL_FUNC(glVertexAttrib1dv);
	HOOK_GL_FUNC(glVertexAttrib1f);
	HOOK_GL_FUNC(glVertexAttrib1fv);
	HOOK_GL_FUNC(glVertexAttrib1s);
	HOOK_GL_FUNC(glVertexAttrib1sv);
	HOOK_GL_FUNC(glVertexAttrib2d);
	HOOK_GL_FUNC(glVertexAttrib2dv);
	HOOK_GL_FUNC(glVertexAttrib2f);
	HOOK_GL_FUNC(glVertexAttrib2fv);
	HOOK_GL_FUNC(glVertexAttrib2s);
	HOOK_GL_FUNC(glVertexAttrib2sv);
	HOOK_GL_FUNC(glVertexAttrib3d);
	HOOK_GL_FUNC(glVertexAttrib3dv);
	HOOK_GL_FUNC(glVertexAttrib3f);
	HOOK_GL_FUNC(glVertexAttrib3fv);
	HOOK_GL_FUNC(glVertexAttrib3s);
	HOOK_GL_FUNC(glVertexAttrib3sv);
	HOOK_GL_FUNC(glVertexAttrib4Nbv);
	HOOK_GL_FUNC(glVertexAttrib4Niv);
	HOOK_GL_FUNC(glVertexAttrib4Nsv);
	HOOK_GL_FUNC(glVertexAttrib4Nub);
	HOOK_GL_FUNC(glVertexAttrib4Nubv);
	HOOK_GL_FUNC(glVertexAttrib4Nuiv);
	HOOK_GL_FUNC(glVertexAttrib4Nusv);
	HOOK_GL_FUNC(glVertexAttrib4bv);
	HOOK_GL_FUNC(glVertexAttrib4d);
	HOOK_GL_FUNC(glVertexAttrib4dv);
	HOOK_GL_FUNC(glVertexAttrib4f);
	HOOK_GL_FUNC(glVertexAttrib4fv);
	HOOK_GL_FUNC(glVertexAttrib4iv);
	HOOK_GL_FUNC(glVertexAttrib4s);
	HOOK_GL_FUNC(glVertexAttrib4sv);
	HOOK_GL_FUNC(glVertexAttrib4ubv);
	HOOK_GL_FUNC(glVertexAttrib4uiv);
	HOOK_GL_FUNC(glVertexAttrib4usv);
	HOOK_GL_FUNC(glVertexAttribPointer);
	HOOK_GL_FUNC(glUniformMatrix2x3fv);
	HOOK_GL_FUNC(glUniformMatrix3x2fv);
	HOOK_GL_FUNC(glUniformMatrix2x4fv);
	HOOK_GL_FUNC(glUniformMatrix4x2fv);
	HOOK_GL_FUNC(glUniformMatrix3x4fv);
	HOOK_GL_FUNC(glUniformMatrix4x3fv);
	HOOK_GL_FUNC(glColorMaski);
	HOOK_GL_FUNC(glGetBooleani_v);
	HOOK_GL_FUNC(glGetIntegeri_v);
	HOOK_GL_FUNC(glEnablei);
	HOOK_GL_FUNC(glDisablei);
	HOOK_GL_FUNC(glIsEnabledi);
	HOOK_GL_FUNC(glBeginTransformFeedback);
	HOOK_GL_FUNC(glEndTransformFeedback);
	HOOK_GL_FUNC(glBindBufferRange);
	HOOK_GL_FUNC(glBindBufferBase);
	HOOK_GL_FUNC(glTransformFeedbackVaryings);
	HOOK_GL_FUNC(glGetTransformFeedbackVarying);
	HOOK_GL_FUNC(glClampColor);
	HOOK_GL_FUNC(glBeginConditionalRender);
	HOOK_GL_FUNC(glEndConditionalRender);
	HOOK_GL_FUNC(glVertexAttribIPointer);
	HOOK_GL_FUNC(glGetVertexAttribIiv);
	HOOK_GL_FUNC(glGetVertexAttribIuiv);
	HOOK_GL_FUNC(glVertexAttribI1i);
	HOOK_GL_FUNC(glVertexAttribI2i);
	HOOK_GL_FUNC(glVertexAttribI3i);
	HOOK_GL_FUNC(glVertexAttribI4i);
	HOOK_GL_FUNC(glVertexAttribI1ui);
	HOOK_GL_FUNC(glVertexAttribI2ui);
	HOOK_GL_FUNC(glVertexAttribI3ui);
	HOOK_GL_FUNC(glVertexAttribI4ui);
	HOOK_GL_FUNC(glVertexAttribI1iv);
	HOOK_GL_FUNC(glVertexAttribI2iv);
	HOOK_GL_FUNC(glVertexAttribI3iv);
	HOOK_GL_FUNC(glVertexAttribI4iv);
	HOOK_GL_FUNC(glVertexAttribI1uiv);
	HOOK_GL_FUNC(glVertexAttribI2uiv);
	HOOK_GL_FUNC(glVertexAttribI3uiv);
	HOOK_GL_FUNC(glVertexAttribI4uiv);
	HOOK_GL_FUNC(glVertexAttribI4bv);
	HOOK_GL_FUNC(glVertexAttribI4sv);
	HOOK_GL_FUNC(glVertexAttribI4ubv);
	HOOK_GL_FUNC(glVertexAttribI4usv);
	HOOK_GL_FUNC(glGetUniformuiv);
	HOOK_GL_FUNC(glBindFragDataLocation);
	HOOK_GL_FUNC(glGetFragDataLocation);
	HOOK_GL_FUNC(glUniform1ui);
	HOOK_GL_FUNC(glUniform2ui);
	HOOK_GL_FUNC(glUniform3ui);
	HOOK_GL_FUNC(glUniform4ui);
	HOOK_GL_FUNC(glUniform1uiv);
	HOOK_GL_FUNC(glUniform2uiv);
	HOOK_GL_FUNC(glUniform3uiv);
	HOOK_GL_FUNC(glUniform4uiv);
	HOOK_GL_FUNC(glTexParameterIiv);
	HOOK_GL_FUNC(glTexParameterIuiv);
	HOOK_GL_FUNC(glGetTexParameterIiv);
	HOOK_GL_FUNC(glGetTexParameterIuiv);
	HOOK_GL_FUNC(glClearBufferiv);
	HOOK_GL_FUNC(glClearBufferuiv);
	HOOK_GL_FUNC(glClearBufferfv);
	HOOK_GL_FUNC(glClearBufferfi);
	HOOK_GL_FUNC(glGetStringi);
	HOOK_GL_FUNC(glIsRenderbuffer);
	HOOK_GL_FUNC(glBindRenderbuffer);
	HOOK_GL_FUNC(glDeleteRenderbuffers);
	HOOK_GL_FUNC(glGenRenderbuffers);
	HOOK_GL_FUNC(glRenderbufferStorage);
	HOOK_GL_FUNC(glGetRenderbufferParameteriv);
	HOOK_GL_FUNC(glIsFramebuffer);
	HOOK_GL_FUNC(glBindFramebuffer);
	HOOK_GL_FUNC(glDeleteFramebuffers);
	HOOK_GL_FUNC(glGenFramebuffers);
	HOOK_GL_FUNC(glCheckFramebufferStatus);
	HOOK_GL_FUNC(glFramebufferTexture1D);
	HOOK_GL_FUNC(glFramebufferTexture2D);
	HOOK_GL_FUNC(glFramebufferTexture3D);
	HOOK_GL_FUNC(glFramebufferRenderbuffer);
	HOOK_GL_FUNC(glGetFramebufferAttachmentParameteriv);
	HOOK_GL_FUNC(glGenerateMipmap);
	HOOK_GL_FUNC(glBlitFramebuffer);
	HOOK_GL_FUNC(glRenderbufferStorageMultisample);
	HOOK_GL_FUNC(glFramebufferTextureLayer);
	HOOK_GL_FUNC(glMapBufferRange);
	HOOK_GL_FUNC(glFlushMappedBufferRange);
	HOOK_GL_FUNC(glBindVertexArray);
	HOOK_GL_FUNC(glDeleteVertexArrays);
	HOOK_GL_FUNC(glGenVertexArrays);
	HOOK_GL_FUNC(glIsVertexArray);
	HOOK_GL_FUNC(glDrawArraysInstanced);
	HOOK_GL_FUNC(glDrawElementsInstanced);
	HOOK_GL_FUNC(glTexBuffer);
	HOOK_GL_FUNC(glPrimitiveRestartIndex);
	HOOK_GL_FUNC(glCopyBufferSubData);
	HOOK_GL_FUNC(glGetUniformIndices);
	HOOK_GL_FUNC(glGetActiveUniformsiv);
	HOOK_GL_FUNC(glGetActiveUniformName);
	HOOK_GL_FUNC(glGetUniformBlockIndex);
	HOOK_GL_FUNC(glGetActiveUniformBlockiv);
	HOOK_GL_FUNC(glGetActiveUniformBlockName);
	HOOK_GL_FUNC(glUniformBlockBinding);
	HOOK_GL_FUNC(glDrawElementsBaseVertex);
	HOOK_GL_FUNC(glDrawRangeElementsBaseVertex);
	HOOK_GL_FUNC(glDrawElementsInstancedBaseVertex);
	HOOK_GL_FUNC(glMultiDrawElementsBaseVertex);
	HOOK_GL_FUNC(glProvokingVertex);
	HOOK_GL_FUNC(glFenceSync);
	HOOK_GL_FUNC(glIsSync);
	HOOK_GL_FUNC(glDeleteSync);
	HOOK_GL_FUNC(glClientWaitSync);
	HOOK_GL_FUNC(glWaitSync);
	HOOK_GL_FUNC(glGetInteger64v);
	HOOK_GL_FUNC(glGetSynciv);
	HOOK_GL_FUNC(glGetInteger64i_v);
	HOOK_GL_FUNC(glGetBufferParameteri64v);
	HOOK_GL_FUNC(glFramebufferTexture);
	HOOK_GL_FUNC(glTexImage2DMultisample);
	HOOK_GL_FUNC(glTexImage3DMultisample);
	HOOK_GL_FUNC(glGetMultisamplefv);
	HOOK_GL_FUNC(glSampleMaski);
	HOOK_GL_FUNC(glBindFragDataLocationIndexed);
	HOOK_GL_FUNC(glGetFragDataIndex);
	HOOK_GL_FUNC(glGenSamplers);
	HOOK_GL_FUNC(glDeleteSamplers);
	HOOK_GL_FUNC(glIsSampler);
	HOOK_GL_FUNC(glBindSampler);
	HOOK_GL_FUNC(glSamplerParameteri);
	HOOK_GL_FUNC(glSamplerParameteriv);
	HOOK_GL_FUNC(glSamplerParameterf);
	HOOK_GL_FUNC(glSamplerParameterfv);
	HOOK_GL_FUNC(glSamplerParameterIiv);
	HOOK_GL_FUNC(glSamplerParameterIuiv);
	HOOK_GL_FUNC(glGetSamplerParameteriv);
	HOOK_GL_FUNC(glGetSamplerParameterIiv);
	HOOK_GL_FUNC(glGetSamplerParameterfv);
	HOOK_GL_FUNC(glGetSamplerParameterIuiv);
	HOOK_GL_FUNC(glQueryCounter);
	HOOK_GL_FUNC(glGetQueryObjecti64v);
	HOOK_GL_FUNC(glGetQueryObjectui64v);
	HOOK_GL_FUNC(glVertexAttribDivisor);
	HOOK_GL_FUNC(glVertexAttribP1ui);
	HOOK_GL_FUNC(glVertexAttribP1uiv);
	HOOK_GL_FUNC(glVertexAttribP2ui);
	HOOK_GL_FUNC(glVertexAttribP2uiv);
	HOOK_GL_FUNC(glVertexAttribP3ui);
	HOOK_GL_FUNC(glVertexAttribP3uiv);
	HOOK_GL_FUNC(glVertexAttribP4ui);
	HOOK_GL_FUNC(glVertexAttribP4uiv);
	HOOK_GL_FUNC(glVertexP2ui);
	HOOK_GL_FUNC(glVertexP2uiv);
	HOOK_GL_FUNC(glVertexP3ui);
	HOOK_GL_FUNC(glVertexP3uiv);
	HOOK_GL_FUNC(glVertexP4ui);
	HOOK_GL_FUNC(glVertexP4uiv);
	HOOK_GL_FUNC(glTexCoordP1ui);
	HOOK_GL_FUNC(glTexCoordP1uiv);
	HOOK_GL_FUNC(glTexCoordP2ui);
	HOOK_GL_FUNC(glTexCoordP2uiv);
	HOOK_GL_FUNC(glTexCoordP3ui);
	HOOK_GL_FUNC(glTexCoordP3uiv);
	HOOK_GL_FUNC(glTexCoordP4ui);
	HOOK_GL_FUNC(glTexCoordP4uiv);
	HOOK_GL_FUNC(glMultiTexCoordP1ui);
	HOOK_GL_FUNC(glMultiTexCoordP1uiv);
	HOOK_GL_FUNC(glMultiTexCoordP2ui);
	HOOK_GL_FUNC(glMultiTexCoordP2uiv);
	HOOK_GL_FUNC(glMultiTexCoordP3ui);
	HOOK_GL_FUNC(glMultiTexCoordP3uiv);
	HOOK_GL_FUNC(glMultiTexCoordP4ui);
	HOOK_GL_FUNC(glMultiTexCoordP4uiv);
	HOOK_GL_FUNC(glNormalP3ui);
	HOOK_GL_FUNC(glNormalP3uiv);
	HOOK_GL_FUNC(glColorP3ui);
	HOOK_GL_FUNC(glColorP3uiv);
	HOOK_GL_FUNC(glColorP4ui);
	HOOK_GL_FUNC(glColorP4uiv);
	HOOK_GL_FUNC(glSecondaryColorP3ui);
	HOOK_GL_FUNC(glSecondaryColorP3uiv);
	HOOK_GL_FUNC(glMinSampleShading);
	HOOK_GL_FUNC(glBlendEquationi);
	HOOK_GL_FUNC(glBlendEquationSeparatei);
	HOOK_GL_FUNC(glBlendFunci);
	HOOK_GL_FUNC(glBlendFuncSeparatei);
	HOOK_GL_FUNC(glDrawArraysIndirect);
	HOOK_GL_FUNC(glDrawElementsIndirect);
	HOOK_GL_FUNC(glUniform1d);
	HOOK_GL_FUNC(glUniform2d);
	HOOK_GL_FUNC(glUniform3d);
	HOOK_GL_FUNC(glUniform4d);
	HOOK_GL_FUNC(glUniform1dv);
	HOOK_GL_FUNC(glUniform2dv);
	HOOK_GL_FUNC(glUniform3dv);
	HOOK_GL_FUNC(glUniform4dv);
	HOOK_GL_FUNC(glUniformMatrix2dv);
	HOOK_GL_FUNC(glUniformMatrix3dv);
	HOOK_GL_FUNC(glUniformMatrix4dv);
	HOOK_GL_FUNC(glUniformMatrix2x3dv);
	HOOK_GL_FUNC(glUniformMatrix2x4dv);
	HOOK_GL_FUNC(glUniformMatrix3x2dv);
	HOOK_GL_FUNC(glUniformMatrix3x4dv);
	HOOK_GL_FUNC(glUniformMatrix4x2dv);
	HOOK_GL_FUNC(glUniformMatrix4x3dv);
	HOOK_GL_FUNC(glGetUniformdv);
	HOOK_GL_FUNC(glGetSubroutineUniformLocation);
	HOOK_GL_FUNC(glGetSubroutineIndex);
	HOOK_GL_FUNC(glGetActiveSubroutineUniformiv);
	HOOK_GL_FUNC(glGetActiveSubroutineUniformName);
	HOOK_GL_FUNC(glGetActiveSubroutineName);
	HOOK_GL_FUNC(glUniformSubroutinesuiv);
	HOOK_GL_FUNC(glGetUniformSubroutineuiv);
	HOOK_GL_FUNC(glGetProgramStageiv);
	HOOK_GL_FUNC(glPatchParameteri);
	HOOK_GL_FUNC(glPatchParameterfv);
	HOOK_GL_FUNC(glBindTransformFeedback);
	HOOK_GL_FUNC(glDeleteTransformFeedbacks);
	HOOK_GL_FUNC(glGenTransformFeedbacks);
	HOOK_GL_FUNC(glIsTransformFeedback);
	HOOK_GL_FUNC(glPauseTransformFeedback);
	HOOK_GL_FUNC(glResumeTransformFeedback);
	HOOK_GL_FUNC(glDrawTransformFeedback);
	HOOK_GL_FUNC(glDrawTransformFeedbackStream);
	HOOK_GL_FUNC(glBeginQueryIndexed);
	HOOK_GL_FUNC(glEndQueryIndexed);
	HOOK_GL_FUNC(glGetQueryIndexediv);
	HOOK_GL_FUNC(glReleaseShaderCompiler);
	HOOK_GL_FUNC(glShaderBinary);
	HOOK_GL_FUNC(glGetShaderPrecisionFormat);
	HOOK_GL_FUNC(glDepthRangef);
	HOOK_GL_FUNC(glClearDepthf);
	HOOK_GL_FUNC(glGetProgramBinary);
	HOOK_GL_FUNC(glProgramBinary);
	HOOK_GL_FUNC(glProgramParameteri);
	HOOK_GL_FUNC(glUseProgramStages);
	HOOK_GL_FUNC(glActiveShaderProgram);
	HOOK_GL_FUNC(glCreateShaderProgramv);
	HOOK_GL_FUNC(glBindProgramPipeline);
	HOOK_GL_FUNC(glDeleteProgramPipelines);
	HOOK_GL_FUNC(glGenProgramPipelines);
	HOOK_GL_FUNC(glIsProgramPipeline);
	HOOK_GL_FUNC(glGetProgramPipelineiv);
	HOOK_GL_FUNC(glProgramUniform1i);
	HOOK_GL_FUNC(glProgramUniform1iv);
	HOOK_GL_FUNC(glProgramUniform1f);
	HOOK_GL_FUNC(glProgramUniform1fv);
	HOOK_GL_FUNC(glProgramUniform1d);
	HOOK_GL_FUNC(glProgramUniform1dv);
	HOOK_GL_FUNC(glProgramUniform1ui);
	HOOK_GL_FUNC(glProgramUniform1uiv);
	HOOK_GL_FUNC(glProgramUniform2i);
	HOOK_GL_FUNC(glProgramUniform2iv);
	HOOK_GL_FUNC(glProgramUniform2f);
	HOOK_GL_FUNC(glProgramUniform2fv);
	HOOK_GL_FUNC(glProgramUniform2d);
	HOOK_GL_FUNC(glProgramUniform2dv);
	HOOK_GL_FUNC(glProgramUniform2ui);
	HOOK_GL_FUNC(glProgramUniform2uiv);
	HOOK_GL_FUNC(glProgramUniform3i);
	HOOK_GL_FUNC(glProgramUniform3iv);
	HOOK_GL_FUNC(glProgramUniform3f);
	HOOK_GL_FUNC(glProgramUniform3fv);
	HOOK_GL_FUNC(glProgramUniform3d);
	HOOK_GL_FUNC(glProgramUniform3dv);
	HOOK_GL_FUNC(glProgramUniform3ui);
	HOOK_GL_FUNC(glProgramUniform3uiv);
	HOOK_GL_FUNC(glProgramUniform4i);
	HOOK_GL_FUNC(glProgramUniform4iv);
	HOOK_GL_FUNC(glProgramUniform4f);
	HOOK_GL_FUNC(glProgramUniform4fv);
	HOOK_GL_FUNC(glProgramUniform4d);
	HOOK_GL_FUNC(glProgramUniform4dv);
	HOOK_GL_FUNC(glProgramUniform4ui);
	HOOK_GL_FUNC(glProgramUniform4uiv);
	HOOK_GL_FUNC(glProgramUniformMatrix2fv);
	HOOK_GL_FUNC(glProgramUniformMatrix3fv);
	HOOK_GL_FUNC(glProgramUniformMatrix4fv);
	HOOK_GL_FUNC(glProgramUniformMatrix2dv);
	HOOK_GL_FUNC(glProgramUniformMatrix3dv);
	HOOK_GL_FUNC(glProgramUniformMatrix4dv);
	HOOK_GL_FUNC(glProgramUniformMatrix2x3fv);
	HOOK_GL_FUNC(glProgramUniformMatrix3x2fv);
	HOOK_GL_FUNC(glProgramUniformMatrix2x4fv);
	HOOK_GL_FUNC(glProgramUniformMatrix4x2fv);
	HOOK_GL_FUNC(glProgramUniformMatrix3x4fv);
	HOOK_GL_FUNC(glProgramUniformMatrix4x3fv);
	HOOK_GL_FUNC(glProgramUniformMatrix2x3dv);
	HOOK_GL_FUNC(glProgramUniformMatrix3x2dv);
	HOOK_GL_FUNC(glProgramUniformMatrix2x4dv);
	HOOK_GL_FUNC(glProgramUniformMatrix4x2dv);
	HOOK_GL_FUNC(glProgramUniformMatrix3x4dv);
	HOOK_GL_FUNC(glProgramUniformMatrix4x3dv);
	HOOK_GL_FUNC(glValidateProgramPipeline);
	HOOK_GL_FUNC(glGetProgramPipelineInfoLog);
	HOOK_GL_FUNC(glVertexAttribL1d);
	HOOK_GL_FUNC(glVertexAttribL2d);
	HOOK_GL_FUNC(glVertexAttribL3d);
	HOOK_GL_FUNC(glVertexAttribL4d);
	HOOK_GL_FUNC(glVertexAttribL1dv);
	HOOK_GL_FUNC(glVertexAttribL2dv);
	HOOK_GL_FUNC(glVertexAttribL3dv);
	HOOK_GL_FUNC(glVertexAttribL4dv);
	HOOK_GL_FUNC(glVertexAttribLPointer);
	HOOK_GL_FUNC(glGetVertexAttribLdv);
	HOOK_GL_FUNC(glViewportArrayv);
	HOOK_GL_FUNC(glViewportIndexedf);
	HOOK_GL_FUNC(glViewportIndexedfv);
	HOOK_GL_FUNC(glScissorArrayv);
	HOOK_GL_FUNC(glScissorIndexed);
	HOOK_GL_FUNC(glScissorIndexedv);
	HOOK_GL_FUNC(glDepthRangeArrayv);
	HOOK_GL_FUNC(glDepthRangeIndexed);
	HOOK_GL_FUNC(glGetFloati_v);
	HOOK_GL_FUNC(glGetDoublei_v);
	HOOK_GL_FUNC(glDrawArraysInstancedBaseInstance);
	HOOK_GL_FUNC(glDrawElementsInstancedBaseInstance);
	HOOK_GL_FUNC(glDrawElementsInstancedBaseVertexBaseInstance);
	HOOK_GL_FUNC(glGetInternalformativ);
	HOOK_GL_FUNC(glGetActiveAtomicCounterBufferiv);
	HOOK_GL_FUNC(glBindImageTexture);
	HOOK_GL_FUNC(glMemoryBarrier);
	HOOK_GL_FUNC(glTexStorage1D);
	HOOK_GL_FUNC(glTexStorage2D);
	HOOK_GL_FUNC(glTexStorage3D);
	HOOK_GL_FUNC(glDrawTransformFeedbackInstanced);
	HOOK_GL_FUNC(glDrawTransformFeedbackStreamInstanced);
	HOOK_GL_FUNC(glClearBufferData);
	HOOK_GL_FUNC(glClearBufferSubData);
	HOOK_GL_FUNC(glDispatchCompute);
	HOOK_GL_FUNC(glDispatchComputeIndirect);
	HOOK_GL_FUNC(glCopyImageSubData);
	HOOK_GL_FUNC(glFramebufferParameteri);
	HOOK_GL_FUNC(glGetFramebufferParameteriv);
	HOOK_GL_FUNC(glGetInternalformati64v);
	HOOK_GL_FUNC(glInvalidateTexSubImage);
	HOOK_GL_FUNC(glInvalidateTexImage);
	HOOK_GL_FUNC(glInvalidateBufferSubData);
	HOOK_GL_FUNC(glInvalidateBufferData);
	HOOK_GL_FUNC(glInvalidateFramebuffer);
	HOOK_GL_FUNC(glInvalidateSubFramebuffer);
	HOOK_GL_FUNC(glMultiDrawArraysIndirect);
	HOOK_GL_FUNC(glMultiDrawElementsIndirect);
	HOOK_GL_FUNC(glGetProgramInterfaceiv);
	HOOK_GL_FUNC(glGetProgramResourceIndex);
	HOOK_GL_FUNC(glGetProgramResourceName);
	HOOK_GL_FUNC(glGetProgramResourceiv);
	HOOK_GL_FUNC(glGetProgramResourceLocation);
	HOOK_GL_FUNC(glGetProgramResourceLocationIndex);
	HOOK_GL_FUNC(glShaderStorageBlockBinding);
	HOOK_GL_FUNC(glTexBufferRange);
	HOOK_GL_FUNC(glTexStorage2DMultisample);
	HOOK_GL_FUNC(glTexStorage3DMultisample);
	HOOK_GL_FUNC(glTextureView);
	HOOK_GL_FUNC(glBindVertexBuffer);
	HOOK_GL_FUNC(glVertexAttribFormat);
	HOOK_GL_FUNC(glVertexAttribIFormat);
	HOOK_GL_FUNC(glVertexAttribLFormat);
	HOOK_GL_FUNC(glVertexAttribBinding);
	HOOK_GL_FUNC(glVertexBindingDivisor);
	HOOK_GL_FUNC(glDebugMessageControl);
	HOOK_GL_FUNC(glDebugMessageInsert);
	HOOK_GL_FUNC(glDebugMessageCallback);
	HOOK_GL_FUNC(glGetDebugMessageLog);
	HOOK_GL_FUNC(glPushDebugGroup);
	HOOK_GL_FUNC(glPopDebugGroup);
	HOOK_GL_FUNC(glObjectLabel);
	HOOK_GL_FUNC(glGetObjectLabel);
	HOOK_GL_FUNC(glObjectPtrLabel);
	HOOK_GL_FUNC(glGetObjectPtrLabel);
	HOOK_GL_FUNC(glBufferStorage);
	HOOK_GL_FUNC(glClearTexImage);
	HOOK_GL_FUNC(glClearTexSubImage);
	HOOK_GL_FUNC(glBindBuffersBase);
	HOOK_GL_FUNC(glBindBuffersRange);
	HOOK_GL_FUNC(glBindTextures);
	HOOK_GL_FUNC(glBindSamplers);
	HOOK_GL_FUNC(glBindImageTextures);
	HOOK_GL_FUNC(glBindVertexBuffers);
	HOOK_GL_FUNC(glClipControl);
	HOOK_GL_FUNC(glCreateTransformFeedbacks);
	HOOK_GL_FUNC(glTransformFeedbackBufferBase);
	HOOK_GL_FUNC(glTransformFeedbackBufferRange);
	HOOK_GL_FUNC(glGetTransformFeedbackiv);
	HOOK_GL_FUNC(glGetTransformFeedbacki_v);
	HOOK_GL_FUNC(glGetTransformFeedbacki64_v);
	HOOK_GL_FUNC(glCreateBuffers);
	HOOK_GL_FUNC(glNamedBufferStorage);
	HOOK_GL_FUNC(glNamedBufferData);
	HOOK_GL_FUNC(glNamedBufferSubData);
	HOOK_GL_FUNC(glCopyNamedBufferSubData);
	HOOK_GL_FUNC(glClearNamedBufferData);
	HOOK_GL_FUNC(glClearNamedBufferSubData);
	HOOK_GL_FUNC(glMapNamedBuffer);
	HOOK_GL_FUNC(glMapNamedBufferRange);
	HOOK_GL_FUNC(glUnmapNamedBuffer);
	HOOK_GL_FUNC(glFlushMappedNamedBufferRange);
	HOOK_GL_FUNC(glGetNamedBufferParameteriv);
	HOOK_GL_FUNC(glGetNamedBufferParameteri64v);
	HOOK_GL_FUNC(glGetNamedBufferPointerv);
	HOOK_GL_FUNC(glGetNamedBufferSubData);
	HOOK_GL_FUNC(glCreateFramebuffers);
	HOOK_GL_FUNC(glNamedFramebufferRenderbuffer);
	HOOK_GL_FUNC(glNamedFramebufferParameteri);
	HOOK_GL_FUNC(glNamedFramebufferTexture);
	HOOK_GL_FUNC(glNamedFramebufferTextureLayer);
	HOOK_GL_FUNC(glNamedFramebufferDrawBuffer);
	HOOK_GL_FUNC(glNamedFramebufferDrawBuffers);
	HOOK_GL_FUNC(glNamedFramebufferReadBuffer);
	HOOK_GL_FUNC(glInvalidateNamedFramebufferData);
	HOOK_GL_FUNC(glInvalidateNamedFramebufferSubData);
	HOOK_GL_FUNC(glClearNamedFramebufferiv);
	HOOK_GL_FUNC(glClearNamedFramebufferuiv);
	HOOK_GL_FUNC(glClearNamedFramebufferfv);
	HOOK_GL_FUNC(glClearNamedFramebufferfi);
	HOOK_GL_FUNC(glBlitNamedFramebuffer);
	HOOK_GL_FUNC(glCheckNamedFramebufferStatus);
	HOOK_GL_FUNC(glGetNamedFramebufferParameteriv);
	HOOK_GL_FUNC(glGetNamedFramebufferAttachmentParameteriv);
	HOOK_GL_FUNC(glCreateRenderbuffers);
	HOOK_GL_FUNC(glNamedRenderbufferStorage);
	HOOK_GL_FUNC(glNamedRenderbufferStorageMultisample);
	HOOK_GL_FUNC(glGetNamedRenderbufferParameteriv);
	HOOK_GL_FUNC(glCreateTextures);
	HOOK_GL_FUNC(glTextureBuffer);
	HOOK_GL_FUNC(glTextureBufferRange);
	HOOK_GL_FUNC(glTextureStorage1D);
	HOOK_GL_FUNC(glTextureStorage2D);
	HOOK_GL_FUNC(glTextureStorage3D);
	HOOK_GL_FUNC(glTextureStorage2DMultisample);
	HOOK_GL_FUNC(glTextureStorage3DMultisample);
	HOOK_GL_FUNC(glTextureSubImage1D);
	HOOK_GL_FUNC(glTextureSubImage2D);
	HOOK_GL_FUNC(glTextureSubImage3D);
	HOOK_GL_FUNC(glCompressedTextureSubImage1D);
	HOOK_GL_FUNC(glCompressedTextureSubImage2D);
	HOOK_GL_FUNC(glCompressedTextureSubImage3D);
	HOOK_GL_FUNC(glCopyTextureSubImage1D);
	HOOK_GL_FUNC(glCopyTextureSubImage2D);
	HOOK_GL_FUNC(glCopyTextureSubImage3D);
	HOOK_GL_FUNC(glTextureParameterf);
	HOOK_GL_FUNC(glTextureParameterfv);
	HOOK_GL_FUNC(glTextureParameteri);
	HOOK_GL_FUNC(glTextureParameterIiv);
	HOOK_GL_FUNC(glTextureParameterIuiv);
	HOOK_GL_FUNC(glTextureParameteriv);
	HOOK_GL_FUNC(glGenerateTextureMipmap);
	HOOK_GL_FUNC(glBindTextureUnit);
	HOOK_GL_FUNC(glGetTextureImage);
	HOOK_GL_FUNC(glGetCompressedTextureImage);
	HOOK_GL_FUNC(glGetTextureLevelParameterfv);
	HOOK_GL_FUNC(glGetTextureLevelParameteriv);
	HOOK_GL_FUNC(glGetTextureParameterfv);
	HOOK_GL_FUNC(glGetTextureParameterIiv);
	HOOK_GL_FUNC(glGetTextureParameterIuiv);
	HOOK_GL_FUNC(glGetTextureParameteriv);
	HOOK_GL_FUNC(glCreateVertexArrays);
	HOOK_GL_FUNC(glDisableVertexArrayAttrib);
	HOOK_GL_FUNC(glEnableVertexArrayAttrib);
	HOOK_GL_FUNC(glVertexArrayElementBuffer);
	HOOK_GL_FUNC(glVertexArrayVertexBuffer);
	HOOK_GL_FUNC(glVertexArrayVertexBuffers);
	HOOK_GL_FUNC(glVertexArrayAttribBinding);
	HOOK_GL_FUNC(glVertexArrayAttribFormat);
	HOOK_GL_FUNC(glVertexArrayAttribIFormat);
	HOOK_GL_FUNC(glVertexArrayAttribLFormat);
	HOOK_GL_FUNC(glVertexArrayBindingDivisor);
	HOOK_GL_FUNC(glGetVertexArrayiv);
	HOOK_GL_FUNC(glGetVertexArrayIndexediv);
	HOOK_GL_FUNC(glGetVertexArrayIndexed64iv);
	HOOK_GL_FUNC(glCreateSamplers);
	HOOK_GL_FUNC(glCreateProgramPipelines);
	HOOK_GL_FUNC(glCreateQueries);
	HOOK_GL_FUNC(glGetQueryBufferObjecti64v);
	HOOK_GL_FUNC(glGetQueryBufferObjectiv);
	HOOK_GL_FUNC(glGetQueryBufferObjectui64v);
	HOOK_GL_FUNC(glGetQueryBufferObjectuiv);
	HOOK_GL_FUNC(glMemoryBarrierByRegion);
	HOOK_GL_FUNC(glGetTextureSubImage);
	HOOK_GL_FUNC(glGetCompressedTextureSubImage);
	HOOK_GL_FUNC(glGetGraphicsResetStatus);
	HOOK_GL_FUNC(glGetnCompressedTexImage);
	HOOK_GL_FUNC(glGetnTexImage);
	HOOK_GL_FUNC(glGetnUniformdv);
	HOOK_GL_FUNC(glGetnUniformfv);
	HOOK_GL_FUNC(glGetnUniformiv);
	HOOK_GL_FUNC(glGetnUniformuiv);
	HOOK_GL_FUNC(glReadnPixels);
	HOOK_GL_FUNC(glGetnMapdv);
	HOOK_GL_FUNC(glGetnMapfv);
	HOOK_GL_FUNC(glGetnMapiv);
	HOOK_GL_FUNC(glGetnPixelMapfv);
	HOOK_GL_FUNC(glGetnPixelMapuiv);
	HOOK_GL_FUNC(glGetnPixelMapusv);
	HOOK_GL_FUNC(glGetnPolygonStipple);
	HOOK_GL_FUNC(glGetnColorTable);
	HOOK_GL_FUNC(glGetnConvolutionFilter);
	HOOK_GL_FUNC(glGetnSeparableFilter);
	HOOK_GL_FUNC(glGetnHistogram);
	HOOK_GL_FUNC(glGetnMinmax);
	HOOK_GL_FUNC(glTextureBarrier);
	HOOK_GL_FUNC(glSpecializeShader);
	HOOK_GL_FUNC(glMultiDrawArraysIndirectCount);
	HOOK_GL_FUNC(glMultiDrawElementsIndirectCount);
	HOOK_GL_FUNC(glPolygonOffsetClamp);
}